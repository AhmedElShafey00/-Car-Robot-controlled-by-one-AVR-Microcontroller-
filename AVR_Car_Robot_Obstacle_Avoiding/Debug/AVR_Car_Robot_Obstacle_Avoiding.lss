
AVR_Car_Robot_Obstacle_Avoiding.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006434  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00006434  000064c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  00800168  00800168  000065d0  2**0
                  ALLOC
  3 .stab         00004a40  00000000  00000000  000065d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000168a  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c69a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000c83a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ca2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000ee37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000101bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011394  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001184a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000121b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__vector_4>
      14:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__vector_5>
      18:	0c 94 af 10 	jmp	0x215e	; 0x215e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_10>
      2c:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 39       	cpi	r26, 0x9A	; 154
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e3       	ldi	r30, 0x34	; 52
      78:	f4 e6       	ldi	r31, 0x64	; 100
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 70 31 	call	0x62e0	; 0x62e0 <main>
      8a:	0c 94 18 32 	jmp	0x6430	; 0x6430 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e1 31 	jmp	0x63c2	; 0x63c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fd 31 	jmp	0x63fa	; 0x63fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ed 31 	jmp	0x63da	; 0x63da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 09 32 	jmp	0x6412	; 0x6412 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ed 31 	jmp	0x63da	; 0x63da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 09 32 	jmp	0x6412	; 0x6412 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e1 31 	jmp	0x63c2	; 0x63c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fd 31 	jmp	0x63fa	; 0x63fa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 05 32 	jmp	0x640a	; 0x640a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ed 31 	jmp	0x63da	; 0x63da <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 09 32 	jmp	0x6412	; 0x6412 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ed 31 	jmp	0x63da	; 0x63da <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 09 32 	jmp	0x6412	; 0x6412 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ed 31 	jmp	0x63da	; 0x63da <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 09 32 	jmp	0x6412	; 0x6412 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f1 31 	jmp	0x63e2	; 0x63e2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 0d 32 	jmp	0x641a	; 0x641a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 05 32 	jmp	0x640a	; 0x640a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_voidInit>:
#include "UART_private.h"
#include "UART_config.h"


void UART_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_voidInit+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62

/********************************************************** UBRR ***************************************/
	u16 Local_u16UBRRValue ;
	Local_u16UBRRValue = UART_BAUD_RATE_UBRR;
     e3a:	83 e3       	ldi	r24, 0x33	; 51
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	9b 83       	std	Y+3, r25	; 0x03
     e40:	8a 83       	std	Y+2, r24	; 0x02
	UART_u8_UBRRL_REG=(u8)Local_u16UBRRValue;
     e42:	e9 e2       	ldi	r30, 0x29	; 41
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG=(u8)(Local_u16UBRRValue>>8);
     e4a:	e0 e4       	ldi	r30, 0x40	; 64
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	9b 81       	ldd	r25, Y+3	; 0x03
     e52:	89 2f       	mov	r24, r25
     e54:	99 27       	eor	r25, r25
     e56:	80 83       	st	Z, r24
/************************************* UCSRA *******************************************************/
    #if     UART_SPEED == UART_NORMAL_SPEED
	        CLR_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_U2X_BIT);
     e58:	ab e2       	ldi	r26, 0x2B	; 43
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	eb e2       	ldi	r30, 0x2B	; 43
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8d 7f       	andi	r24, 0xFD	; 253
     e64:	8c 93       	st	X, r24
    #elif   UART_SPEED == UART_DOUBLE_SPEED
	        SET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_U2X_BIT);
    #endif

    #if     UART_PROCESSOR_COMMUNICATION == UART_SINGLE_CYCLE_PRICESSOR
            CLR_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_MPCM_BIT);
     e66:	ab e2       	ldi	r26, 0x2B	; 43
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	eb e2       	ldi	r30, 0x2B	; 43
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	8e 7f       	andi	r24, 0xFE	; 254
     e72:	8c 93       	st	X, r24
    #elif   UART_PROCESSOR_COMMUNICATION == UART_MULTI_PRICESSOR
            SET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_MPCM_BIT);
    #endif
/**************************************** UCSRB ****************************************************/
    #if     UART_RX_INTERRUPR == UART_RX_DISABLE_INTERRUPR
            CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_RXCIE_BIT);
     e74:	aa e2       	ldi	r26, 0x2A	; 42
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	ea e2       	ldi	r30, 0x2A	; 42
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 77       	andi	r24, 0x7F	; 127
     e80:	8c 93       	st	X, r24
    #elif   UART_RX_INTERRUPR == UART_RX_ENABLE_INTERRUPR
            SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_RXCIE_BIT);
    #endif

    #if     UART_TX_INTERRUPR == UART_TX_DISABLE_INTERRUPR
            CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_TXCIE_BIT);
     e82:	aa e2       	ldi	r26, 0x2A	; 42
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	ea e2       	ldi	r30, 0x2A	; 42
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8f 7b       	andi	r24, 0xBF	; 191
     e8e:	8c 93       	st	X, r24
    #elif   UART_TX_INTERRUPR == UART_TX_ENABLE_INTERRUPR
            SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_TXCIE_BIT);
    #endif

    #if     UART_UDRE_EMPTY_INTERRUPR == UART_UDRE_EMPTY_DISABLE_INTERRUPR
            CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UDRIE_BIT);
     e90:	aa e2       	ldi	r26, 0x2A	; 42
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ea e2       	ldi	r30, 0x2A	; 42
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8f 7d       	andi	r24, 0xDF	; 223
     e9c:	8c 93       	st	X, r24
    #elif   UART_UDRE_EMPTY_INTERRUPR == UART_UDRE_EMPTY_ENABLE_INTERRUPR
            SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UDRIE_BIT);
    #endif


    SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_TXEN_BIT);
     e9e:	aa e2       	ldi	r26, 0x2A	; 42
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ea e2       	ldi	r30, 0x2A	; 42
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	88 60       	ori	r24, 0x08	; 8
     eaa:	8c 93       	st	X, r24
    SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_RXEN_BIT);
     eac:	aa e2       	ldi	r26, 0x2A	; 42
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ea e2       	ldi	r30, 0x2A	; 42
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	80 61       	ori	r24, 0x10	; 16
     eb8:	8c 93       	st	X, r24
 /********************************************** UCSRC **********************************************/
    u8 Local_u8UCSRCValue= 0b10000000;
     eba:	80 e8       	ldi	r24, 0x80	; 128
     ebc:	89 83       	std	Y+1, r24	; 0x01
    #if     UART_MODE_SELECT == UART_ASYNCHRONOUS_OPERATION
            CLR_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UMSEL_BIT);
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	8f 7b       	andi	r24, 0xBF	; 191
     ec2:	89 83       	std	Y+1, r24	; 0x01
    #elif   UART_MODE_SELECT == UART_SYNCHRONOUS_OPERATION
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UMSEL_BIT);
    #endif

    #if     UART_PARITY_MODE == UART_DISABLE_PARITY
            CLR_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UPM0_BIT);
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	8f 7e       	andi	r24, 0xEF	; 239
     ec8:	89 83       	std	Y+1, r24	; 0x01
            CLR_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UPM1_BIT);
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	8f 7d       	andi	r24, 0xDF	; 223
     ece:	89 83       	std	Y+1, r24	; 0x01
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UPM1_BIT);
    #endif


    #if     UART_STOP_BIT_SELECT == UART_1_BIT_STOP_SELECT
            CLR_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_USBS_BIT);
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	87 7f       	andi	r24, 0xF7	; 247
     ed4:	89 83       	std	Y+1, r24	; 0x01
    #elif   UART_CHARACTER_SIZE == UART_7_BIT_CHARACTER_SIZE
            CLR_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UCSZ0_BIT);
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UCSZ1_BIT);
            CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UCSZ2_BIT);
    #elif   UART_CHARACTER_SIZE == UART_8_BIT_CHARACTER_SIZE
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UCSZ0_BIT);
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	89 83       	std	Y+1, r24	; 0x01
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UCSZ1_BIT);
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	84 60       	ori	r24, 0x04	; 4
     ee0:	89 83       	std	Y+1, r24	; 0x01
            CLR_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UCSZ2_BIT);
     ee2:	aa e2       	ldi	r26, 0x2A	; 42
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ea e2       	ldi	r30, 0x2A	; 42
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8b 7f       	andi	r24, 0xFB	; 251
     eee:	8c 93       	st	X, r24
    #elif   UART_CHARACTER_SIZE == UART_9_BIT_CHARACTER_SIZE
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UCSZ0_BIT);
            SET_BIT(Local_u8UCSRCValue,UART_u8_UCSRC_UCSZ1_BIT);
            SET_BIT(UART_u8_UCSRB_REG,UART_u8_UCSRB_UCSZ2_BIT);
    #endif
    UART_u8_UCSRC_REG=Local_u8UCSRCValue;
     ef0:	e0 e4       	ldi	r30, 0x40	; 64
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	80 83       	st	Z, r24
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <UART_voidSendChar>:
void UART_voidSendChar(u8 Copy_u8Char)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	0f 92       	push	r0
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	89 83       	std	Y+1, r24	; 0x01
	while(!(UART_u8_UCSRA_REG & (1 << UART_u8_UCSRA_UDRE_BIT)));
     f10:	eb e2       	ldi	r30, 0x2B	; 43
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	80 72       	andi	r24, 0x20	; 32
     f1c:	90 70       	andi	r25, 0x00	; 0
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	b9 f3       	breq	.-18     	; 0xf10 <UART_voidSendChar+0xc>
   // while((0)==(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_UDRE_BIT)));
    UART_u8_UDR_REG = Copy_u8Char;
     f22:	ec e2       	ldi	r30, 0x2C	; 44
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	80 83       	st	Z, r24
}
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <UART_voidSendString>:
void UART_voidSendString(u8  *Copy_pu8String)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	61 97       	sbiw	r28, 0x11	; 17
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	99 8b       	std	Y+17, r25	; 0x11
     f48:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 Local_u8Counter=0; Copy_pu8String[Local_u8Counter] != '\0' ; Local_u8Counter++)
     f4a:	1f 86       	std	Y+15, r1	; 0x0f
     f4c:	80 c0       	rjmp	.+256    	; 0x104e <UART_voidSendString+0x11c>
	{
		  UART_voidSendChar(Copy_pu8String[Local_u8Counter]);
     f4e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	88 89       	ldd	r24, Y+16	; 0x10
     f56:	99 89       	ldd	r25, Y+17	; 0x11
     f58:	fc 01       	movw	r30, r24
     f5a:	e2 0f       	add	r30, r18
     f5c:	f3 1f       	adc	r31, r19
     f5e:	80 81       	ld	r24, Z
     f60:	0e 94 82 07 	call	0xf04	; 0xf04 <UART_voidSendChar>
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a0 e4       	ldi	r26, 0x40	; 64
     f6a:	b0 e4       	ldi	r27, 0x40	; 64
     f6c:	8b 87       	std	Y+11, r24	; 0x0b
     f6e:	9c 87       	std	Y+12, r25	; 0x0c
     f70:	ad 87       	std	Y+13, r26	; 0x0d
     f72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f74:	6b 85       	ldd	r22, Y+11	; 0x0b
     f76:	7c 85       	ldd	r23, Y+12	; 0x0c
     f78:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	4a ef       	ldi	r20, 0xFA	; 250
     f82:	54 e4       	ldi	r21, 0x44	; 68
     f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	8f 83       	std	Y+7, r24	; 0x07
     f8e:	98 87       	std	Y+8, r25	; 0x08
     f90:	a9 87       	std	Y+9, r26	; 0x09
     f92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f94:	6f 81       	ldd	r22, Y+7	; 0x07
     f96:	78 85       	ldd	r23, Y+8	; 0x08
     f98:	89 85       	ldd	r24, Y+9	; 0x09
     f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e8       	ldi	r20, 0x80	; 128
     fa2:	5f e3       	ldi	r21, 0x3F	; 63
     fa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fa8:	88 23       	and	r24, r24
     faa:	2c f4       	brge	.+10     	; 0xfb6 <UART_voidSendString+0x84>
		__ticks = 1;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9e 83       	std	Y+6, r25	; 0x06
     fb2:	8d 83       	std	Y+5, r24	; 0x05
     fb4:	3f c0       	rjmp	.+126    	; 0x1034 <UART_voidSendString+0x102>
	else if (__tmp > 65535)
     fb6:	6f 81       	ldd	r22, Y+7	; 0x07
     fb8:	78 85       	ldd	r23, Y+8	; 0x08
     fba:	89 85       	ldd	r24, Y+9	; 0x09
     fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	3f ef       	ldi	r19, 0xFF	; 255
     fc2:	4f e7       	ldi	r20, 0x7F	; 127
     fc4:	57 e4       	ldi	r21, 0x47	; 71
     fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fca:	18 16       	cp	r1, r24
     fcc:	4c f5       	brge	.+82     	; 0x1020 <UART_voidSendString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fce:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e2       	ldi	r20, 0x20	; 32
     fdc:	51 e4       	ldi	r21, 0x41	; 65
     fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9e 83       	std	Y+6, r25	; 0x06
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	0f c0       	rjmp	.+30     	; 0x1016 <UART_voidSendString+0xe4>
     ff8:	88 ec       	ldi	r24, 0xC8	; 200
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	9c 83       	std	Y+4, r25	; 0x04
     ffe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <UART_voidSendString+0xd2>
    1008:	9c 83       	std	Y+4, r25	; 0x04
    100a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100c:	8d 81       	ldd	r24, Y+5	; 0x05
    100e:	9e 81       	ldd	r25, Y+6	; 0x06
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	9e 83       	std	Y+6, r25	; 0x06
    1014:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	9e 81       	ldd	r25, Y+6	; 0x06
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	69 f7       	brne	.-38     	; 0xff8 <UART_voidSendString+0xc6>
    101e:	14 c0       	rjmp	.+40     	; 0x1048 <UART_voidSendString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1020:	6f 81       	ldd	r22, Y+7	; 0x07
    1022:	78 85       	ldd	r23, Y+8	; 0x08
    1024:	89 85       	ldd	r24, Y+9	; 0x09
    1026:	9a 85       	ldd	r25, Y+10	; 0x0a
    1028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	9e 83       	std	Y+6, r25	; 0x06
    1032:	8d 83       	std	Y+5, r24	; 0x05
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	9a 83       	std	Y+2, r25	; 0x02
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <UART_voidSendString+0x10e>
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	89 83       	std	Y+1, r24	; 0x01
   // while((0)==(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_UDRE_BIT)));
    UART_u8_UDR_REG = Copy_u8Char;
}
void UART_voidSendString(u8  *Copy_pu8String)
{
	for(u8 Local_u8Counter=0; Copy_pu8String[Local_u8Counter] != '\0' ; Local_u8Counter++)
    1048:	8f 85       	ldd	r24, Y+15	; 0x0f
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	8f 87       	std	Y+15, r24	; 0x0f
    104e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	88 89       	ldd	r24, Y+16	; 0x10
    1056:	99 89       	ldd	r25, Y+17	; 0x11
    1058:	fc 01       	movw	r30, r24
    105a:	e2 0f       	add	r30, r18
    105c:	f3 1f       	adc	r31, r19
    105e:	80 81       	ld	r24, Z
    1060:	88 23       	and	r24, r24
    1062:	09 f0       	breq	.+2      	; 0x1066 <UART_voidSendString+0x134>
    1064:	74 cf       	rjmp	.-280    	; 0xf4e <UART_voidSendString+0x1c>
	{
		  UART_voidSendChar(Copy_pu8String[Local_u8Counter]);
		  _delay_ms(3);
	}

}
    1066:	61 96       	adiw	r28, 0x11	; 17
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <UART_u8GetCharBlocking>:
u8 UART_u8GetCharBlocking(void)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
	 u8 Local_u8Char;
	 //while(!(UART_u8_UCSRA_REG & (1 << UART_u8_UCSRA_RXC_BIT)));
	 while((0)==(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_RXC_BIT)));
    1082:	eb e2       	ldi	r30, 0x2B	; 43
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	88 23       	and	r24, r24
    108a:	dc f7       	brge	.-10     	; 0x1082 <UART_u8GetCharBlocking+0xa>
	 Local_u8Char=UART_u8_UDR_REG;
    108c:	ec e2       	ldi	r30, 0x2C	; 44
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	89 83       	std	Y+1, r24	; 0x01
	// LCD_voidSendChar(UART_u8_UDR_REG);
     return Local_u8Char;
    1094:	89 81       	ldd	r24, Y+1	; 0x01
}
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <UART_u8GetCharNonBlocking>:
u8 UART_u8GetCharNonBlocking(void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <UART_u8GetCharNonBlocking+0x6>
    10a4:	0f 92       	push	r0
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <UART_u8GetCharNonBlocking+0x18>
	 u8 Local_u8Char;
	 u16 Local_u16Counter;
	 while(((Local_u16Counter)<(2000))&&(0==(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_RXC_BIT))))
	 {
		 Local_u16Counter++;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	01 96       	adiw	r24, 0x01	; 1
    10b2:	9a 83       	std	Y+2, r25	; 0x02
    10b4:	89 83       	std	Y+1, r24	; 0x01
}
u8 UART_u8GetCharNonBlocking(void)
{
	 u8 Local_u8Char;
	 u16 Local_u16Counter;
	 while(((Local_u16Counter)<(2000))&&(0==(GET_BIT(UART_u8_UCSRA_REG,UART_u8_UCSRA_RXC_BIT))))
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	27 e0       	ldi	r18, 0x07	; 7
    10bc:	80 3d       	cpi	r24, 0xD0	; 208
    10be:	92 07       	cpc	r25, r18
    10c0:	28 f4       	brcc	.+10     	; 0x10cc <UART_u8GetCharNonBlocking+0x2e>
    10c2:	eb e2       	ldi	r30, 0x2B	; 43
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	88 23       	and	r24, r24
    10ca:	84 f7       	brge	.-32     	; 0x10ac <UART_u8GetCharNonBlocking+0xe>
	 {
		 Local_u16Counter++;
	 }
	 Local_u8Char=UART_u8_UDR_REG;
    10cc:	ec e2       	ldi	r30, 0x2C	; 44
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8b 83       	std	Y+3, r24	; 0x03
     return Local_u8Char;
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <TIMER_voidTimer0Init>:
u32 TIMER0_f32OVCounterTmp;
f32 TIMER0_u16Prescaller;
u32 TIMER0_f32CounterCTC;
/**********************************************************************************/
void TIMER_voidTimer0Init(void)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TOIE0_BIT);
		CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE0_BIT);

		TIMER_u8_TCNT0_REG=TIMER0_f32PreloodValue;
	#elif TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
		SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_WGM00_BIT);
    10ea:	a3 e5       	ldi	r26, 0x53	; 83
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e3 e5       	ldi	r30, 0x53	; 83
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	80 64       	ori	r24, 0x40	; 64
    10f6:	8c 93       	st	X, r24
	    CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_WGM01_BIT);
    10f8:	a3 e5       	ldi	r26, 0x53	; 83
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e3 e5       	ldi	r30, 0x53	; 83
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	87 7f       	andi	r24, 0xF7	; 247
    1104:	8c 93       	st	X, r24
         CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_COM01_BIT);
    #elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_TOGGLE
         SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_COM00_BIT);
         CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_COM01_BIT);
    #elif  TIMER0_COMPARE_OUTPUT_MODE==TIMER0_MODE_CLEAR_OC0
         CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_COM00_BIT);
    1106:	a3 e5       	ldi	r26, 0x53	; 83
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e3 e5       	ldi	r30, 0x53	; 83
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8f 7e       	andi	r24, 0xEF	; 239
    1112:	8c 93       	st	X, r24
         SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_COM01_BIT);
    1114:	a3 e5       	ldi	r26, 0x53	; 83
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e3 e5       	ldi	r30, 0x53	; 83
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 62       	ori	r24, 0x20	; 32
    1120:	8c 93       	st	X, r24
        CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS00_BIT);
	    CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS01_BIT);
	    SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS02_BIT);
	    TIMER0_u16Prescaller=256;
    #elif  TIMER0_CLOCK_SELECT == TIMER0_SELECT_CLK_DIV_1024
        SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS00_BIT);
    1122:	a3 e5       	ldi	r26, 0x53	; 83
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e3 e5       	ldi	r30, 0x53	; 83
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	81 60       	ori	r24, 0x01	; 1
    112e:	8c 93       	st	X, r24
	    CLR_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS01_BIT);
    1130:	a3 e5       	ldi	r26, 0x53	; 83
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e3 e5       	ldi	r30, 0x53	; 83
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8d 7f       	andi	r24, 0xFD	; 253
    113c:	8c 93       	st	X, r24
	    SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS02_BIT);
    113e:	a3 e5       	ldi	r26, 0x53	; 83
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e3 e5       	ldi	r30, 0x53	; 83
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	84 60       	ori	r24, 0x04	; 4
    114a:	8c 93       	st	X, r24
	    TIMER0_u16Prescaller=1024;
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a0 e8       	ldi	r26, 0x80	; 128
    1152:	b4 e4       	ldi	r27, 0x44	; 68
    1154:	80 93 82 01 	sts	0x0182, r24
    1158:	90 93 83 01 	sts	0x0183, r25
    115c:	a0 93 84 01 	sts	0x0184, r26
    1160:	b0 93 85 01 	sts	0x0185, r27
        SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS00_BIT);
	    SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS01_BIT);
	    SET_BIT(TIMER_u8_TCCR0_REG,TIMER_u8_TCCR0_CS02_BIT);
	    TIMER0_u16Prescaller=0;
	#endif
}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <TIMER_voidTimer0Delay>:
/**********************************************************************************/
void TIMER_voidTimer0Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <TIMER_voidTimer0Delay+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <TIMER_voidTimer0Delay+0x8>
    1172:	00 d0       	rcall	.+0      	; 0x1174 <TIMER_voidTimer0Delay+0xa>
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	69 83       	std	Y+1, r22	; 0x01
    117a:	7a 83       	std	Y+2, r23	; 0x02
    117c:	8b 83       	std	Y+3, r24	; 0x03
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	5e 83       	std	Y+6, r21	; 0x06
    1182:	4d 83       	std	Y+5, r20	; 0x05
    #elif TIMER0_MODE  == TIMER0_MODE_CTC
	   f32 Local_f32TCTC=((TIMER0_CTC_OCR0_VALUE)*(TIMER0_u16Prescaller/8000UL));
	   TIMER0_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	   TIMER0_pSetCallBack=Copy_pFun;
    #endif
}
    1184:	26 96       	adiw	r28, 0x06	; 6
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <TIMER_voidTimer0GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer0GeneratePWM(f32 Copy_u8Intensity)
{
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	28 97       	sbiw	r28, 0x08	; 8
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	6d 83       	std	Y+5, r22	; 0x05
    11b0:	7e 83       	std	Y+6, r23	; 0x06
    11b2:	8f 83       	std	Y+7, r24	; 0x07
    11b4:	98 87       	std	Y+8, r25	; 0x08
   #if TIMER0_MODE  == TIMER0_MODE_PWM_PHASE_CORRECT
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(510*Copy_u8Intensity)/200;
    11b6:	6d 81       	ldd	r22, Y+5	; 0x05
    11b8:	7e 81       	ldd	r23, Y+6	; 0x06
    11ba:	8f 81       	ldd	r24, Y+7	; 0x07
    11bc:	98 85       	ldd	r25, Y+8	; 0x08
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	4f ef       	ldi	r20, 0xFF	; 255
    11c4:	53 e4       	ldi	r21, 0x43	; 67
    11c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	bc 01       	movw	r22, r24
    11d0:	cd 01       	movw	r24, r26
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	48 e4       	ldi	r20, 0x48	; 72
    11d8:	53 e4       	ldi	r21, 0x43	; 67
    11da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	ab 83       	std	Y+3, r26	; 0x03
    11e8:	bc 83       	std	Y+4, r27	; 0x04
	   TIMER_u8_OCR0_REG=Copy_u8OCRValue;
    11ea:	0c e5       	ldi	r16, 0x5C	; 92
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    11ee:	69 81       	ldd	r22, Y+1	; 0x01
    11f0:	7a 81       	ldd	r23, Y+2	; 0x02
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	f8 01       	movw	r30, r16
    1200:	80 83       	st	Z, r24
   #elif TIMER0_MODE  == TIMER0_MODE_FAST_PWM
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	   TIMER_u8_OCR0_REG=Copy_u8OCRValue;
   #endif
}
    1202:	28 96       	adiw	r28, 0x08	; 8
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <__vector_11>:
/**********************************************************************************/
void __vector_11 (void)
{
    1218:	1f 92       	push	r1
    121a:	0f 92       	push	r0
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	0f 92       	push	r0
    1220:	11 24       	eor	r1, r1
    1222:	2f 93       	push	r18
    1224:	3f 93       	push	r19
    1226:	4f 93       	push	r20
    1228:	5f 93       	push	r21
    122a:	6f 93       	push	r22
    122c:	7f 93       	push	r23
    122e:	8f 93       	push	r24
    1230:	9f 93       	push	r25
    1232:	af 93       	push	r26
    1234:	bf 93       	push	r27
    1236:	ef 93       	push	r30
    1238:	ff 93       	push	r31
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u16Counter=0;
	   Local_u16Counter++;
    1242:	80 91 68 01 	lds	r24, 0x0168
    1246:	90 91 69 01 	lds	r25, 0x0169
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	90 93 69 01 	sts	0x0169, r25
    1250:	80 93 68 01 	sts	0x0168, r24
	   if(TIMER0_f32OVCounterTmp==Local_u16Counter)
    1254:	80 91 68 01 	lds	r24, 0x0168
    1258:	90 91 69 01 	lds	r25, 0x0169
    125c:	9c 01       	movw	r18, r24
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	80 91 7e 01 	lds	r24, 0x017E
    1266:	90 91 7f 01 	lds	r25, 0x017F
    126a:	a0 91 80 01 	lds	r26, 0x0180
    126e:	b0 91 81 01 	lds	r27, 0x0181
    1272:	28 17       	cp	r18, r24
    1274:	39 07       	cpc	r19, r25
    1276:	4a 07       	cpc	r20, r26
    1278:	5b 07       	cpc	r21, r27
    127a:	a1 f4       	brne	.+40     	; 0x12a4 <__vector_11+0x8c>
	   {
		   TIMER_u8_TCNT0_REG=TIMER0_f32PreloodValue;
    127c:	e2 e5       	ldi	r30, 0x52	; 82
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 91 7a 01 	lds	r24, 0x017A
    1284:	90 91 7b 01 	lds	r25, 0x017B
    1288:	a0 91 7c 01 	lds	r26, 0x017C
    128c:	b0 91 7d 01 	lds	r27, 0x017D
    1290:	80 83       	st	Z, r24
		   TIMER0_pSetCallBack();
    1292:	e0 91 70 01 	lds	r30, 0x0170
    1296:	f0 91 71 01 	lds	r31, 0x0171
    129a:	09 95       	icall
		   Local_u16Counter=0;
    129c:	10 92 69 01 	sts	0x0169, r1
    12a0:	10 92 68 01 	sts	0x0168, r1
	   }
}
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	ff 91       	pop	r31
    12aa:	ef 91       	pop	r30
    12ac:	bf 91       	pop	r27
    12ae:	af 91       	pop	r26
    12b0:	9f 91       	pop	r25
    12b2:	8f 91       	pop	r24
    12b4:	7f 91       	pop	r23
    12b6:	6f 91       	pop	r22
    12b8:	5f 91       	pop	r21
    12ba:	4f 91       	pop	r20
    12bc:	3f 91       	pop	r19
    12be:	2f 91       	pop	r18
    12c0:	0f 90       	pop	r0
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	0f 90       	pop	r0
    12c6:	1f 90       	pop	r1
    12c8:	18 95       	reti

000012ca <__vector_10>:
void __vector_10 (void)
{
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	2f 93       	push	r18
    12d6:	3f 93       	push	r19
    12d8:	4f 93       	push	r20
    12da:	5f 93       	push	r21
    12dc:	6f 93       	push	r22
    12de:	7f 93       	push	r23
    12e0:	8f 93       	push	r24
    12e2:	9f 93       	push	r25
    12e4:	af 93       	push	r26
    12e6:	bf 93       	push	r27
    12e8:	ef 93       	push	r30
    12ea:	ff 93       	push	r31
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u8Counter=0;
	   Local_u8Counter++;
    12f4:	80 91 6a 01 	lds	r24, 0x016A
    12f8:	90 91 6b 01 	lds	r25, 0x016B
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	90 93 6b 01 	sts	0x016B, r25
    1302:	80 93 6a 01 	sts	0x016A, r24
	   if(TIMER0_f32CounterCTC==Local_u8Counter)
    1306:	80 91 6a 01 	lds	r24, 0x016A
    130a:	90 91 6b 01 	lds	r25, 0x016B
    130e:	9c 01       	movw	r18, r24
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	80 91 8e 01 	lds	r24, 0x018E
    1318:	90 91 8f 01 	lds	r25, 0x018F
    131c:	a0 91 90 01 	lds	r26, 0x0190
    1320:	b0 91 91 01 	lds	r27, 0x0191
    1324:	28 17       	cp	r18, r24
    1326:	39 07       	cpc	r19, r25
    1328:	4a 07       	cpc	r20, r26
    132a:	5b 07       	cpc	r21, r27
    132c:	49 f4       	brne	.+18     	; 0x1340 <__vector_10+0x76>
	   {
		   Local_u8Counter=0;
    132e:	10 92 6b 01 	sts	0x016B, r1
    1332:	10 92 6a 01 	sts	0x016A, r1
		   TIMER0_pSetCallBack();
    1336:	e0 91 70 01 	lds	r30, 0x0170
    133a:	f0 91 71 01 	lds	r31, 0x0171
    133e:	09 95       	icall
	   }
}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	0f 90       	pop	r0
    1362:	1f 90       	pop	r1
    1364:	18 95       	reti

00001366 <TIMER_voidTimer2Init>:
f32 TIMER2_u16Prescaller;
u32 TIMER2_f32CounterCTC;
/**********************************************************************************/

void TIMER_voidTimer2Init(void)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TOIE2_BIT);
		CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE2_BIT);

		TIMER_u8_TCNT2_REG=TIMER2_f32PreloodValue;
	#elif TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
		SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_WGM20_BIT);
    136e:	a5 e4       	ldi	r26, 0x45	; 69
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e4       	ldi	r30, 0x45	; 69
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	80 64       	ori	r24, 0x40	; 64
    137a:	8c 93       	st	X, r24
	    CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_WGM21_BIT);
    137c:	a5 e4       	ldi	r26, 0x45	; 69
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e5 e4       	ldi	r30, 0x45	; 69
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	87 7f       	andi	r24, 0xF7	; 247
    1388:	8c 93       	st	X, r24
         CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_COM21_BIT);
    #elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_TOGGLE
         SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_COM20_BIT);
         CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_COM21_BIT);
    #elif  TIMER2_COMPARE_OUTPUT_MODE==TIMER2_MODE_CLEAR_OC2
         CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_COM20_BIT);
    138a:	a5 e4       	ldi	r26, 0x45	; 69
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	e5 e4       	ldi	r30, 0x45	; 69
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8f 7e       	andi	r24, 0xEF	; 239
    1396:	8c 93       	st	X, r24
         SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_COM21_BIT);
    1398:	a5 e4       	ldi	r26, 0x45	; 69
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e5 e4       	ldi	r30, 0x45	; 69
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	80 62       	ori	r24, 0x20	; 32
    13a4:	8c 93       	st	X, r24
        CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS20_BIT);
	    CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS21_BIT);
	    SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS22_BIT);
	    TIMER2_u16Prescaller=256;
    #elif  TIMER2_CLOCK_SELECT == TIMER2_SELECT_CLK_DIV_1024
        SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS20_BIT);
    13a6:	a5 e4       	ldi	r26, 0x45	; 69
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e4       	ldi	r30, 0x45	; 69
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	81 60       	ori	r24, 0x01	; 1
    13b2:	8c 93       	st	X, r24
	    CLR_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS21_BIT);
    13b4:	a5 e4       	ldi	r26, 0x45	; 69
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e5 e4       	ldi	r30, 0x45	; 69
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8d 7f       	andi	r24, 0xFD	; 253
    13c0:	8c 93       	st	X, r24
	    SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS22_BIT);
    13c2:	a5 e4       	ldi	r26, 0x45	; 69
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e4       	ldi	r30, 0x45	; 69
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	84 60       	ori	r24, 0x04	; 4
    13ce:	8c 93       	st	X, r24
	    TIMER2_u16Prescaller=1024;
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a0 e8       	ldi	r26, 0x80	; 128
    13d6:	b4 e4       	ldi	r27, 0x44	; 68
    13d8:	80 93 8a 01 	sts	0x018A, r24
    13dc:	90 93 8b 01 	sts	0x018B, r25
    13e0:	a0 93 8c 01 	sts	0x018C, r26
    13e4:	b0 93 8d 01 	sts	0x018D, r27
        SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS20_BIT);
	    SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS21_BIT);
	    SET_BIT(TIMER_u8_TCCR2_REG,TIMER_u8_TCCR2_CS22_BIT);
	    TIMER2_u16Prescaller=0;
	#endif
}
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <TIMER_voidTimer2Delay>:
/**********************************************************************************/
void TIMER_voidTimer2Delay(u32 Copy_u32DTime,void(*Copy_pFun)(void))
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <TIMER_voidTimer2Delay+0x6>
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <TIMER_voidTimer2Delay+0x8>
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <TIMER_voidTimer2Delay+0xa>
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
    13fc:	69 83       	std	Y+1, r22	; 0x01
    13fe:	7a 83       	std	Y+2, r23	; 0x02
    1400:	8b 83       	std	Y+3, r24	; 0x03
    1402:	9c 83       	std	Y+4, r25	; 0x04
    1404:	5e 83       	std	Y+6, r21	; 0x06
    1406:	4d 83       	std	Y+5, r20	; 0x05
    #elif TIMER2_MODE  == TIMER2_MODE_CTC
	   f32 Local_f32TCTC=((TIMER2_CTC_OCR2_VALUE)*(TIMER2_u16Prescaller/8000UL));
	   TIMER2_f32CounterCTC=((f32)Copy_u32DTime/Local_f32TCTC);
	   TIMER2_pSetCallBack=Copy_pFun;
    #endif
}
    1408:	26 96       	adiw	r28, 0x06	; 6
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <TIMER_voidTimer2GeneratePWM>:
/**********************************************************************************/
void TIMER_voidTimer2GeneratePWM(f32 Copy_u8Intensity)
{
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	28 97       	sbiw	r28, 0x08	; 8
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	6d 83       	std	Y+5, r22	; 0x05
    1434:	7e 83       	std	Y+6, r23	; 0x06
    1436:	8f 83       	std	Y+7, r24	; 0x07
    1438:	98 87       	std	Y+8, r25	; 0x08
   #if TIMER2_MODE  == TIMER2_MODE_PWM_PHASE_CORRECT
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(510*Copy_u8Intensity)/200;
    143a:	6d 81       	ldd	r22, Y+5	; 0x05
    143c:	7e 81       	ldd	r23, Y+6	; 0x06
    143e:	8f 81       	ldd	r24, Y+7	; 0x07
    1440:	98 85       	ldd	r25, Y+8	; 0x08
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	4f ef       	ldi	r20, 0xFF	; 255
    1448:	53 e4       	ldi	r21, 0x43	; 67
    144a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	bc 01       	movw	r22, r24
    1454:	cd 01       	movw	r24, r26
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	48 e4       	ldi	r20, 0x48	; 72
    145c:	53 e4       	ldi	r21, 0x43	; 67
    145e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	9a 83       	std	Y+2, r25	; 0x02
    146a:	ab 83       	std	Y+3, r26	; 0x03
    146c:	bc 83       	std	Y+4, r27	; 0x04
	   TIMER_u8_OCR2_REG=Copy_u8OCRValue;
    146e:	03 e4       	ldi	r16, 0x43	; 67
    1470:	10 e0       	ldi	r17, 0x00	; 0
    1472:	69 81       	ldd	r22, Y+1	; 0x01
    1474:	7a 81       	ldd	r23, Y+2	; 0x02
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	f8 01       	movw	r30, r16
    1484:	80 83       	st	Z, r24
   #elif TIMER2_MODE  == TIMER2_MODE_FAST_PWM
	   f32 Copy_u8OCRValue;
	   Copy_u8OCRValue=(256*Copy_u8Intensity/100);
	   TIMER_u8_OCR2_REG=Copy_u8OCRValue;
   #endif
}
    1486:	28 96       	adiw	r28, 0x08	; 8
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <__vector_5>:
/**********************************************************************************/
void __vector_5 (void)
{
    149c:	1f 92       	push	r1
    149e:	0f 92       	push	r0
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	0f 92       	push	r0
    14a4:	11 24       	eor	r1, r1
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u16Counter=0;
	   Local_u16Counter++;
    14c6:	80 91 6c 01 	lds	r24, 0x016C
    14ca:	90 91 6d 01 	lds	r25, 0x016D
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	90 93 6d 01 	sts	0x016D, r25
    14d4:	80 93 6c 01 	sts	0x016C, r24
	   if(TIMER2_f32OVCounter==Local_u16Counter)
    14d8:	80 91 6c 01 	lds	r24, 0x016C
    14dc:	90 91 6d 01 	lds	r25, 0x016D
    14e0:	9c 01       	movw	r18, r24
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	80 91 86 01 	lds	r24, 0x0186
    14ea:	90 91 87 01 	lds	r25, 0x0187
    14ee:	a0 91 88 01 	lds	r26, 0x0188
    14f2:	b0 91 89 01 	lds	r27, 0x0189
    14f6:	28 17       	cp	r18, r24
    14f8:	39 07       	cpc	r19, r25
    14fa:	4a 07       	cpc	r20, r26
    14fc:	5b 07       	cpc	r21, r27
    14fe:	a1 f4       	brne	.+40     	; 0x1528 <__vector_5+0x8c>
	   {
		   TIMER_u8_TCNT2_REG=TIMER2_f32PreloodValue;
    1500:	e4 e4       	ldi	r30, 0x44	; 68
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 91 96 01 	lds	r24, 0x0196
    1508:	90 91 97 01 	lds	r25, 0x0197
    150c:	a0 91 98 01 	lds	r26, 0x0198
    1510:	b0 91 99 01 	lds	r27, 0x0199
    1514:	80 83       	st	Z, r24
		   TIMER2_pSetCallBack();
    1516:	e0 91 72 01 	lds	r30, 0x0172
    151a:	f0 91 73 01 	lds	r31, 0x0173
    151e:	09 95       	icall
		   Local_u16Counter=0;
    1520:	10 92 6d 01 	sts	0x016D, r1
    1524:	10 92 6c 01 	sts	0x016C, r1
	   }
}
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	ff 91       	pop	r31
    152e:	ef 91       	pop	r30
    1530:	bf 91       	pop	r27
    1532:	af 91       	pop	r26
    1534:	9f 91       	pop	r25
    1536:	8f 91       	pop	r24
    1538:	7f 91       	pop	r23
    153a:	6f 91       	pop	r22
    153c:	5f 91       	pop	r21
    153e:	4f 91       	pop	r20
    1540:	3f 91       	pop	r19
    1542:	2f 91       	pop	r18
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <__vector_4>:
void __vector_4 (void)
{
    154e:	1f 92       	push	r1
    1550:	0f 92       	push	r0
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	0f 92       	push	r0
    1556:	11 24       	eor	r1, r1
    1558:	2f 93       	push	r18
    155a:	3f 93       	push	r19
    155c:	4f 93       	push	r20
    155e:	5f 93       	push	r21
    1560:	6f 93       	push	r22
    1562:	7f 93       	push	r23
    1564:	8f 93       	push	r24
    1566:	9f 93       	push	r25
    1568:	af 93       	push	r26
    156a:	bf 93       	push	r27
    156c:	ef 93       	push	r30
    156e:	ff 93       	push	r31
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	   static u16 Local_u8Counter=0;
	   Local_u8Counter++;
    1578:	80 91 6e 01 	lds	r24, 0x016E
    157c:	90 91 6f 01 	lds	r25, 0x016F
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	90 93 6f 01 	sts	0x016F, r25
    1586:	80 93 6e 01 	sts	0x016E, r24
	   if(TIMER2_f32CounterCTC==Local_u8Counter)
    158a:	80 91 6e 01 	lds	r24, 0x016E
    158e:	90 91 6f 01 	lds	r25, 0x016F
    1592:	9c 01       	movw	r18, r24
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	50 e0       	ldi	r21, 0x00	; 0
    1598:	80 91 92 01 	lds	r24, 0x0192
    159c:	90 91 93 01 	lds	r25, 0x0193
    15a0:	a0 91 94 01 	lds	r26, 0x0194
    15a4:	b0 91 95 01 	lds	r27, 0x0195
    15a8:	28 17       	cp	r18, r24
    15aa:	39 07       	cpc	r19, r25
    15ac:	4a 07       	cpc	r20, r26
    15ae:	5b 07       	cpc	r21, r27
    15b0:	49 f4       	brne	.+18     	; 0x15c4 <__vector_4+0x76>
	   {
		   TIMER2_pSetCallBack();
    15b2:	e0 91 72 01 	lds	r30, 0x0172
    15b6:	f0 91 73 01 	lds	r31, 0x0173
    15ba:	09 95       	icall
		   Local_u8Counter=0;
    15bc:	10 92 6f 01 	sts	0x016F, r1
    15c0:	10 92 6e 01 	sts	0x016E, r1
	   }
}
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	ff 91       	pop	r31
    15ca:	ef 91       	pop	r30
    15cc:	bf 91       	pop	r27
    15ce:	af 91       	pop	r26
    15d0:	9f 91       	pop	r25
    15d2:	8f 91       	pop	r24
    15d4:	7f 91       	pop	r23
    15d6:	6f 91       	pop	r22
    15d8:	5f 91       	pop	r21
    15da:	4f 91       	pop	r20
    15dc:	3f 91       	pop	r19
    15de:	2f 91       	pop	r18
    15e0:	0f 90       	pop	r0
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	0f 90       	pop	r0
    15e6:	1f 90       	pop	r1
    15e8:	18 95       	reti

000015ea <TIMER_voidTimer1Enable>:
*                                                               Timer 1                                                              *
**************************************************************************************************************************************/
u8 TIMER1_u8MODEPWM;
/************************************************************************************************************************************/
void TIMER_voidTimer1Enable(u8 Copy_u8Timer1Mode,u8 Copy_u8Timer1ModeChannelA,u8 Copy_u8Timer1ModeChannelB)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	29 97       	sbiw	r28, 0x09	; 9
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	6a 83       	std	Y+2, r22	; 0x02
    1602:	4b 83       	std	Y+3, r20	; 0x03
switch(Copy_u8Timer1Mode)
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	39 87       	std	Y+9, r19	; 0x09
    160c:	28 87       	std	Y+8, r18	; 0x08
    160e:	88 85       	ldd	r24, Y+8	; 0x08
    1610:	99 85       	ldd	r25, Y+9	; 0x09
    1612:	87 30       	cpi	r24, 0x07	; 7
    1614:	91 05       	cpc	r25, r1
    1616:	09 f4       	brne	.+2      	; 0x161a <TIMER_voidTimer1Enable+0x30>
    1618:	6b c1       	rjmp	.+726    	; 0x18f0 <TIMER_voidTimer1Enable+0x306>
    161a:	28 85       	ldd	r18, Y+8	; 0x08
    161c:	39 85       	ldd	r19, Y+9	; 0x09
    161e:	28 30       	cpi	r18, 0x08	; 8
    1620:	31 05       	cpc	r19, r1
    1622:	4c f5       	brge	.+82     	; 0x1676 <TIMER_voidTimer1Enable+0x8c>
    1624:	88 85       	ldd	r24, Y+8	; 0x08
    1626:	99 85       	ldd	r25, Y+9	; 0x09
    1628:	83 30       	cpi	r24, 0x03	; 3
    162a:	91 05       	cpc	r25, r1
    162c:	09 f4       	brne	.+2      	; 0x1630 <TIMER_voidTimer1Enable+0x46>
    162e:	c7 c0       	rjmp	.+398    	; 0x17be <TIMER_voidTimer1Enable+0x1d4>
    1630:	28 85       	ldd	r18, Y+8	; 0x08
    1632:	39 85       	ldd	r19, Y+9	; 0x09
    1634:	24 30       	cpi	r18, 0x04	; 4
    1636:	31 05       	cpc	r19, r1
    1638:	8c f4       	brge	.+34     	; 0x165c <TIMER_voidTimer1Enable+0x72>
    163a:	88 85       	ldd	r24, Y+8	; 0x08
    163c:	99 85       	ldd	r25, Y+9	; 0x09
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	91 05       	cpc	r25, r1
    1642:	09 f4       	brne	.+2      	; 0x1646 <TIMER_voidTimer1Enable+0x5c>
    1644:	7c c0       	rjmp	.+248    	; 0x173e <TIMER_voidTimer1Enable+0x154>
    1646:	28 85       	ldd	r18, Y+8	; 0x08
    1648:	39 85       	ldd	r19, Y+9	; 0x09
    164a:	22 30       	cpi	r18, 0x02	; 2
    164c:	31 05       	cpc	r19, r1
    164e:	0c f0       	brlt	.+2      	; 0x1652 <TIMER_voidTimer1Enable+0x68>
    1650:	96 c0       	rjmp	.+300    	; 0x177e <TIMER_voidTimer1Enable+0x194>
    1652:	88 85       	ldd	r24, Y+8	; 0x08
    1654:	99 85       	ldd	r25, Y+9	; 0x09
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	c9 f1       	breq	.+114    	; 0x16cc <TIMER_voidTimer1Enable+0xe2>
    165a:	50 c2       	rjmp	.+1184   	; 0x1afc <TIMER_voidTimer1Enable+0x512>
    165c:	28 85       	ldd	r18, Y+8	; 0x08
    165e:	39 85       	ldd	r19, Y+9	; 0x09
    1660:	25 30       	cpi	r18, 0x05	; 5
    1662:	31 05       	cpc	r19, r1
    1664:	09 f4       	brne	.+2      	; 0x1668 <TIMER_voidTimer1Enable+0x7e>
    1666:	04 c1       	rjmp	.+520    	; 0x1870 <TIMER_voidTimer1Enable+0x286>
    1668:	88 85       	ldd	r24, Y+8	; 0x08
    166a:	99 85       	ldd	r25, Y+9	; 0x09
    166c:	86 30       	cpi	r24, 0x06	; 6
    166e:	91 05       	cpc	r25, r1
    1670:	0c f0       	brlt	.+2      	; 0x1674 <TIMER_voidTimer1Enable+0x8a>
    1672:	1e c1       	rjmp	.+572    	; 0x18b0 <TIMER_voidTimer1Enable+0x2c6>
    1674:	c4 c0       	rjmp	.+392    	; 0x17fe <TIMER_voidTimer1Enable+0x214>
    1676:	28 85       	ldd	r18, Y+8	; 0x08
    1678:	39 85       	ldd	r19, Y+9	; 0x09
    167a:	2b 30       	cpi	r18, 0x0B	; 11
    167c:	31 05       	cpc	r19, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <TIMER_voidTimer1Enable+0x98>
    1680:	ae c1       	rjmp	.+860    	; 0x19de <TIMER_voidTimer1Enable+0x3f4>
    1682:	88 85       	ldd	r24, Y+8	; 0x08
    1684:	99 85       	ldd	r25, Y+9	; 0x09
    1686:	8c 30       	cpi	r24, 0x0C	; 12
    1688:	91 05       	cpc	r25, r1
    168a:	6c f4       	brge	.+26     	; 0x16a6 <TIMER_voidTimer1Enable+0xbc>
    168c:	28 85       	ldd	r18, Y+8	; 0x08
    168e:	39 85       	ldd	r19, Y+9	; 0x09
    1690:	29 30       	cpi	r18, 0x09	; 9
    1692:	31 05       	cpc	r19, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <TIMER_voidTimer1Enable+0xae>
    1696:	69 c1       	rjmp	.+722    	; 0x196a <TIMER_voidTimer1Enable+0x380>
    1698:	88 85       	ldd	r24, Y+8	; 0x08
    169a:	99 85       	ldd	r25, Y+9	; 0x09
    169c:	8a 30       	cpi	r24, 0x0A	; 10
    169e:	91 05       	cpc	r25, r1
    16a0:	0c f0       	brlt	.+2      	; 0x16a4 <TIMER_voidTimer1Enable+0xba>
    16a2:	80 c1       	rjmp	.+768    	; 0x19a4 <TIMER_voidTimer1Enable+0x3ba>
    16a4:	45 c1       	rjmp	.+650    	; 0x1930 <TIMER_voidTimer1Enable+0x346>
    16a6:	28 85       	ldd	r18, Y+8	; 0x08
    16a8:	39 85       	ldd	r19, Y+9	; 0x09
    16aa:	2e 30       	cpi	r18, 0x0E	; 14
    16ac:	31 05       	cpc	r19, r1
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <TIMER_voidTimer1Enable+0xc8>
    16b0:	ec c1       	rjmp	.+984    	; 0x1a8a <TIMER_voidTimer1Enable+0x4a0>
    16b2:	88 85       	ldd	r24, Y+8	; 0x08
    16b4:	99 85       	ldd	r25, Y+9	; 0x09
    16b6:	8f 30       	cpi	r24, 0x0F	; 15
    16b8:	91 05       	cpc	r25, r1
    16ba:	09 f4       	brne	.+2      	; 0x16be <TIMER_voidTimer1Enable+0xd4>
    16bc:	03 c2       	rjmp	.+1030   	; 0x1ac4 <TIMER_voidTimer1Enable+0x4da>
    16be:	28 85       	ldd	r18, Y+8	; 0x08
    16c0:	39 85       	ldd	r19, Y+9	; 0x09
    16c2:	2c 30       	cpi	r18, 0x0C	; 12
    16c4:	31 05       	cpc	r19, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <TIMER_voidTimer1Enable+0xe0>
    16c8:	a7 c1       	rjmp	.+846    	; 0x1a18 <TIMER_voidTimer1Enable+0x42e>
    16ca:	18 c2       	rjmp	.+1072   	; 0x1afc <TIMER_voidTimer1Enable+0x512>
{
   case  TIMER1_MODE_NORMAL :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    16cc:	af e4       	ldi	r26, 0x4F	; 79
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ef e4       	ldi	r30, 0x4F	; 79
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	8e 7f       	andi	r24, 0xFE	; 254
    16d8:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    16da:	af e4       	ldi	r26, 0x4F	; 79
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	ef e4       	ldi	r30, 0x4F	; 79
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8d 7f       	andi	r24, 0xFD	; 253
    16e6:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    16e8:	ae e4       	ldi	r26, 0x4E	; 78
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ee e4       	ldi	r30, 0x4E	; 78
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	87 7f       	andi	r24, 0xF7	; 247
    16f4:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    16f6:	ae e4       	ldi	r26, 0x4E	; 78
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	ee e4       	ldi	r30, 0x4E	; 78
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8f 7e       	andi	r24, 0xEF	; 239
    1702:	8c 93       	st	X, r24

		SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TOIE1_BIT);
    1704:	a9 e5       	ldi	r26, 0x59	; 89
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e9 e5       	ldi	r30, 0x59	; 89
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	84 60       	ori	r24, 0x04	; 4
    1710:	8c 93       	st	X, r24
		CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE1B_BIT);
    1712:	a9 e5       	ldi	r26, 0x59	; 89
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e9 e5       	ldi	r30, 0x59	; 89
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	87 7f       	andi	r24, 0xF7	; 247
    171e:	8c 93       	st	X, r24
		CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE1A_BIT);
    1720:	a9 e5       	ldi	r26, 0x59	; 89
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e9 e5       	ldi	r30, 0x59	; 89
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8f 7e       	andi	r24, 0xEF	; 239
    172c:	8c 93       	st	X, r24
		CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TICIE1_BIT);
    172e:	a9 e5       	ldi	r26, 0x59	; 89
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e9 e5       	ldi	r30, 0x59	; 89
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8f 7d       	andi	r24, 0xDF	; 223
    173a:	8c 93       	st	X, r24
    173c:	df c1       	rjmp	.+958    	; 0x1afc <TIMER_voidTimer1Enable+0x512>

		//TIMER_u16_TCNT1_REG=TIMER_f32Timer1PreloodValue;
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    173e:	af e4       	ldi	r26, 0x4F	; 79
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ef e4       	ldi	r30, 0x4F	; 79
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	81 60       	ori	r24, 0x01	; 1
    174a:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    174c:	af e4       	ldi	r26, 0x4F	; 79
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ef e4       	ldi	r30, 0x4F	; 79
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8d 7f       	andi	r24, 0xFD	; 253
    1758:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    175a:	ae e4       	ldi	r26, 0x4E	; 78
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	ee e4       	ldi	r30, 0x4E	; 78
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	87 7f       	andi	r24, 0xF7	; 247
    1766:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1768:	ae e4       	ldi	r26, 0x4E	; 78
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	ee e4       	ldi	r30, 0x4E	; 78
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8f 7e       	andi	r24, 0xEF	; 239
    1774:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	80 93 79 01 	sts	0x0179, r24
    177c:	bf c1       	rjmp	.+894    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    177e:	af e4       	ldi	r26, 0x4F	; 79
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	ef e4       	ldi	r30, 0x4F	; 79
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	8e 7f       	andi	r24, 0xFE	; 254
    178a:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    178c:	af e4       	ldi	r26, 0x4F	; 79
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	ef e4       	ldi	r30, 0x4F	; 79
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	82 60       	ori	r24, 0x02	; 2
    1798:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    179a:	ae e4       	ldi	r26, 0x4E	; 78
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	ee e4       	ldi	r30, 0x4E	; 78
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	87 7f       	andi	r24, 0xF7	; 247
    17a6:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    17a8:	ae e4       	ldi	r26, 0x4E	; 78
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	ee e4       	ldi	r30, 0x4E	; 78
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	8f 7e       	andi	r24, 0xEF	; 239
    17b4:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT;
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	80 93 79 01 	sts	0x0179, r24
    17bc:	9f c1       	rjmp	.+830    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    17be:	af e4       	ldi	r26, 0x4F	; 79
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	ef e4       	ldi	r30, 0x4F	; 79
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	81 60       	ori	r24, 0x01	; 1
    17ca:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    17cc:	af e4       	ldi	r26, 0x4F	; 79
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ef e4       	ldi	r30, 0x4F	; 79
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	82 60       	ori	r24, 0x02	; 2
    17d8:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    17da:	ae e4       	ldi	r26, 0x4E	; 78
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ee e4       	ldi	r30, 0x4E	; 78
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	87 7f       	andi	r24, 0xF7	; 247
    17e6:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    17e8:	ae e4       	ldi	r26, 0x4E	; 78
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	ee e4       	ldi	r30, 0x4E	; 78
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	8f 7e       	andi	r24, 0xEF	; 239
    17f4:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT;
    17f6:	83 e0       	ldi	r24, 0x03	; 3
    17f8:	80 93 79 01 	sts	0x0179, r24
    17fc:	7f c1       	rjmp	.+766    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_CTC_OCR1A :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    17fe:	af e4       	ldi	r26, 0x4F	; 79
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	ef e4       	ldi	r30, 0x4F	; 79
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	8e 7f       	andi	r24, 0xFE	; 254
    180a:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    180c:	af e4       	ldi	r26, 0x4F	; 79
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	ef e4       	ldi	r30, 0x4F	; 79
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	8d 7f       	andi	r24, 0xFD	; 253
    1818:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    181a:	ae e4       	ldi	r26, 0x4E	; 78
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	ee e4       	ldi	r30, 0x4E	; 78
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	88 60       	ori	r24, 0x08	; 8
    1826:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1828:	ae e4       	ldi	r26, 0x4E	; 78
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	ee e4       	ldi	r30, 0x4E	; 78
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	8f 7e       	andi	r24, 0xEF	; 239
    1834:	8c 93       	st	X, r24

	   CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TOIE1_BIT);
    1836:	a9 e5       	ldi	r26, 0x59	; 89
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e9 e5       	ldi	r30, 0x59	; 89
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	8b 7f       	andi	r24, 0xFB	; 251
    1842:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE1B_BIT);
    1844:	a9 e5       	ldi	r26, 0x59	; 89
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e9 e5       	ldi	r30, 0x59	; 89
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	87 7f       	andi	r24, 0xF7	; 247
    1850:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE1A_BIT);
    1852:	a9 e5       	ldi	r26, 0x59	; 89
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e9 e5       	ldi	r30, 0x59	; 89
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	80 61       	ori	r24, 0x10	; 16
    185e:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TICIE1_BIT);
    1860:	a9 e5       	ldi	r26, 0x59	; 89
    1862:	b0 e0       	ldi	r27, 0x00	; 0
    1864:	e9 e5       	ldi	r30, 0x59	; 89
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	80 81       	ld	r24, Z
    186a:	8f 7d       	andi	r24, 0xDF	; 223
    186c:	8c 93       	st	X, r24
    186e:	46 c1       	rjmp	.+652    	; 0x1afc <TIMER_voidTimer1Enable+0x512>

   break;
   case TIMER1_MODE_FAST_PWM_8_BIT :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    1870:	af e4       	ldi	r26, 0x4F	; 79
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	ef e4       	ldi	r30, 0x4F	; 79
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	81 60       	ori	r24, 0x01	; 1
    187c:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    187e:	af e4       	ldi	r26, 0x4F	; 79
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	ef e4       	ldi	r30, 0x4F	; 79
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	8d 7f       	andi	r24, 0xFD	; 253
    188a:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    188c:	ae e4       	ldi	r26, 0x4E	; 78
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	ee e4       	ldi	r30, 0x4E	; 78
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	88 60       	ori	r24, 0x08	; 8
    1898:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    189a:	ae e4       	ldi	r26, 0x4E	; 78
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ee e4       	ldi	r30, 0x4E	; 78
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	8f 7e       	andi	r24, 0xEF	; 239
    18a6:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_8_BIT;
    18a8:	85 e0       	ldi	r24, 0x05	; 5
    18aa:	80 93 79 01 	sts	0x0179, r24
    18ae:	26 c1       	rjmp	.+588    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_FAST_PWM_9_BIT :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    18b0:	af e4       	ldi	r26, 0x4F	; 79
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	ef e4       	ldi	r30, 0x4F	; 79
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	8e 7f       	andi	r24, 0xFE	; 254
    18bc:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    18be:	af e4       	ldi	r26, 0x4F	; 79
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	ef e4       	ldi	r30, 0x4F	; 79
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	82 60       	ori	r24, 0x02	; 2
    18ca:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    18cc:	ae e4       	ldi	r26, 0x4E	; 78
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ee e4       	ldi	r30, 0x4E	; 78
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	88 60       	ori	r24, 0x08	; 8
    18d8:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    18da:	ae e4       	ldi	r26, 0x4E	; 78
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	ee e4       	ldi	r30, 0x4E	; 78
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8f 7e       	andi	r24, 0xEF	; 239
    18e6:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_9_BIT;
    18e8:	86 e0       	ldi	r24, 0x06	; 6
    18ea:	80 93 79 01 	sts	0x0179, r24
    18ee:	06 c1       	rjmp	.+524    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_FAST_PWM_10_BIT :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    18f0:	af e4       	ldi	r26, 0x4F	; 79
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ef e4       	ldi	r30, 0x4F	; 79
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	81 60       	ori	r24, 0x01	; 1
    18fc:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    18fe:	af e4       	ldi	r26, 0x4F	; 79
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	ef e4       	ldi	r30, 0x4F	; 79
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	82 60       	ori	r24, 0x02	; 2
    190a:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    190c:	ae e4       	ldi	r26, 0x4E	; 78
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ee e4       	ldi	r30, 0x4E	; 78
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	88 60       	ori	r24, 0x08	; 8
    1918:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    191a:	ae e4       	ldi	r26, 0x4E	; 78
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	ee e4       	ldi	r30, 0x4E	; 78
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	8f 7e       	andi	r24, 0xEF	; 239
    1926:	8c 93       	st	X, r24
	   TIMER1_u8MODEPWM=TIMER1_MODE_FAST_PWM_10_BIT;
    1928:	87 e0       	ldi	r24, 0x07	; 7
    192a:	80 93 79 01 	sts	0x0179, r24
    192e:	e6 c0       	rjmp	.+460    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_ICR1 :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    1930:	af e4       	ldi	r26, 0x4F	; 79
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ef e4       	ldi	r30, 0x4F	; 79
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	8e 7f       	andi	r24, 0xFE	; 254
    193c:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    193e:	af e4       	ldi	r26, 0x4F	; 79
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ef e4       	ldi	r30, 0x4F	; 79
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	8d 7f       	andi	r24, 0xFD	; 253
    194a:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    194c:	ae e4       	ldi	r26, 0x4E	; 78
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	ee e4       	ldi	r30, 0x4E	; 78
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	87 7f       	andi	r24, 0xF7	; 247
    1958:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    195a:	ae e4       	ldi	r26, 0x4E	; 78
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	ee e4       	ldi	r30, 0x4E	; 78
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	80 61       	ori	r24, 0x10	; 16
    1966:	8c 93       	st	X, r24
    1968:	c9 c0       	rjmp	.+402    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_PWM_PHASE_AND_FRQUENCY_CORRECT_OCR1A :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    196a:	af e4       	ldi	r26, 0x4F	; 79
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	ef e4       	ldi	r30, 0x4F	; 79
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	81 60       	ori	r24, 0x01	; 1
    1976:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    1978:	af e4       	ldi	r26, 0x4F	; 79
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	ef e4       	ldi	r30, 0x4F	; 79
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8d 7f       	andi	r24, 0xFD	; 253
    1984:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    1986:	ae e4       	ldi	r26, 0x4E	; 78
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ee e4       	ldi	r30, 0x4E	; 78
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	87 7f       	andi	r24, 0xF7	; 247
    1992:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1994:	ae e4       	ldi	r26, 0x4E	; 78
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ee e4       	ldi	r30, 0x4E	; 78
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	80 61       	ori	r24, 0x10	; 16
    19a0:	8c 93       	st	X, r24
    19a2:	ac c0       	rjmp	.+344    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_PWM_PHASE_CORRECT_ICR1 :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    19a4:	af e4       	ldi	r26, 0x4F	; 79
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ef e4       	ldi	r30, 0x4F	; 79
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8e 7f       	andi	r24, 0xFE	; 254
    19b0:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    19b2:	af e4       	ldi	r26, 0x4F	; 79
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	ef e4       	ldi	r30, 0x4F	; 79
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	82 60       	ori	r24, 0x02	; 2
    19be:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    19c0:	ae e4       	ldi	r26, 0x4E	; 78
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	ee e4       	ldi	r30, 0x4E	; 78
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	87 7f       	andi	r24, 0xF7	; 247
    19cc:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    19ce:	ae e4       	ldi	r26, 0x4E	; 78
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	ee e4       	ldi	r30, 0x4E	; 78
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	80 61       	ori	r24, 0x10	; 16
    19da:	8c 93       	st	X, r24
    19dc:	8f c0       	rjmp	.+286    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_PWM_PHASE_CORRECT_OCR1A :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    19de:	af e4       	ldi	r26, 0x4F	; 79
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	ef e4       	ldi	r30, 0x4F	; 79
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	81 60       	ori	r24, 0x01	; 1
    19ea:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    19ec:	af e4       	ldi	r26, 0x4F	; 79
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ef e4       	ldi	r30, 0x4F	; 79
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	82 60       	ori	r24, 0x02	; 2
    19f8:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    19fa:	ae e4       	ldi	r26, 0x4E	; 78
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	ee e4       	ldi	r30, 0x4E	; 78
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	87 7f       	andi	r24, 0xF7	; 247
    1a06:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1a08:	ae e4       	ldi	r26, 0x4E	; 78
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ee e4       	ldi	r30, 0x4E	; 78
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	80 61       	ori	r24, 0x10	; 16
    1a14:	8c 93       	st	X, r24
    1a16:	72 c0       	rjmp	.+228    	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case TIMER1_MODE_CTC_ICR1 :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    1a18:	af e4       	ldi	r26, 0x4F	; 79
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ef e4       	ldi	r30, 0x4F	; 79
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8e 7f       	andi	r24, 0xFE	; 254
    1a24:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    1a26:	af e4       	ldi	r26, 0x4F	; 79
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	ef e4       	ldi	r30, 0x4F	; 79
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	82 60       	ori	r24, 0x02	; 2
    1a32:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    1a34:	ae e4       	ldi	r26, 0x4E	; 78
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	ee e4       	ldi	r30, 0x4E	; 78
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 60       	ori	r24, 0x08	; 8
    1a40:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1a42:	ae e4       	ldi	r26, 0x4E	; 78
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	ee e4       	ldi	r30, 0x4E	; 78
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8f 7e       	andi	r24, 0xEF	; 239
    1a4e:	8c 93       	st	X, r24

	   CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TOIE1_BIT);
    1a50:	a9 e5       	ldi	r26, 0x59	; 89
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e9 e5       	ldi	r30, 0x59	; 89
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	8b 7f       	andi	r24, 0xFB	; 251
    1a5c:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE1B_BIT);
    1a5e:	a9 e5       	ldi	r26, 0x59	; 89
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e9 e5       	ldi	r30, 0x59	; 89
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	88 60       	ori	r24, 0x08	; 8
    1a6a:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_OCIE1A_BIT);
    1a6c:	a9 e5       	ldi	r26, 0x59	; 89
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e9 e5       	ldi	r30, 0x59	; 89
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	80 61       	ori	r24, 0x10	; 16
    1a78:	8c 93       	st	X, r24
	   CLR_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TICIE1_BIT);
    1a7a:	a9 e5       	ldi	r26, 0x59	; 89
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e9 e5       	ldi	r30, 0x59	; 89
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	8f 7d       	andi	r24, 0xDF	; 223
    1a86:	8c 93       	st	X, r24
    1a88:	39 c0       	rjmp	.+114    	; 0x1afc <TIMER_voidTimer1Enable+0x512>

   break;
   case  TIMER1_MODE_FAST_PWM_ICR1 :
	   CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    1a8a:	af e4       	ldi	r26, 0x4F	; 79
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	ef e4       	ldi	r30, 0x4F	; 79
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	8e 7f       	andi	r24, 0xFE	; 254
    1a96:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    1a98:	af e4       	ldi	r26, 0x4F	; 79
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	ef e4       	ldi	r30, 0x4F	; 79
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	82 60       	ori	r24, 0x02	; 2
    1aa4:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    1aa6:	ae e4       	ldi	r26, 0x4E	; 78
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	ee e4       	ldi	r30, 0x4E	; 78
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	88 60       	ori	r24, 0x08	; 8
    1ab2:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1ab4:	ae e4       	ldi	r26, 0x4E	; 78
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	ee e4       	ldi	r30, 0x4E	; 78
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	80 61       	ori	r24, 0x10	; 16
    1ac0:	8c 93       	st	X, r24
    1ac2:	1c c0       	rjmp	.+56     	; 0x1afc <TIMER_voidTimer1Enable+0x512>
   break;
   case  TIMER1_MODE_FAST_PWM_OCR1A :
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM10_BIT);
    1ac4:	af e4       	ldi	r26, 0x4F	; 79
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	ef e4       	ldi	r30, 0x4F	; 79
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	81 60       	ori	r24, 0x01	; 1
    1ad0:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_WGM11_BIT);
    1ad2:	af e4       	ldi	r26, 0x4F	; 79
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	ef e4       	ldi	r30, 0x4F	; 79
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	82 60       	ori	r24, 0x02	; 2
    1ade:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM12_BIT);
    1ae0:	ae e4       	ldi	r26, 0x4E	; 78
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	ee e4       	ldi	r30, 0x4E	; 78
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	88 60       	ori	r24, 0x08	; 8
    1aec:	8c 93       	st	X, r24
	   SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_WGM13_BIT);
    1aee:	ae e4       	ldi	r26, 0x4E	; 78
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	ee e4       	ldi	r30, 0x4E	; 78
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	80 61       	ori	r24, 0x10	; 16
    1afa:	8c 93       	st	X, r24
   break;
}
/***********************************************************************************************************/
switch(Copy_u8Timer1ModeChannelA)
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	3f 83       	std	Y+7, r19	; 0x07
    1b04:	2e 83       	std	Y+6, r18	; 0x06
    1b06:	8e 81       	ldd	r24, Y+6	; 0x06
    1b08:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	21 f1       	breq	.+72     	; 0x1b58 <TIMER_voidTimer1Enable+0x56e>
    1b10:	2e 81       	ldd	r18, Y+6	; 0x06
    1b12:	3f 81       	ldd	r19, Y+7	; 0x07
    1b14:	22 30       	cpi	r18, 0x02	; 2
    1b16:	31 05       	cpc	r19, r1
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <TIMER_voidTimer1Enable+0x53a>
    1b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	61 f0       	breq	.+24     	; 0x1b3a <TIMER_voidTimer1Enable+0x550>
    1b22:	46 c0       	rjmp	.+140    	; 0x1bb0 <TIMER_voidTimer1Enable+0x5c6>
    1b24:	2e 81       	ldd	r18, Y+6	; 0x06
    1b26:	3f 81       	ldd	r19, Y+7	; 0x07
    1b28:	22 30       	cpi	r18, 0x02	; 2
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	21 f1       	breq	.+72     	; 0x1b76 <TIMER_voidTimer1Enable+0x58c>
    1b2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b30:	9f 81       	ldd	r25, Y+7	; 0x07
    1b32:	83 30       	cpi	r24, 0x03	; 3
    1b34:	91 05       	cpc	r25, r1
    1b36:	71 f1       	breq	.+92     	; 0x1b94 <TIMER_voidTimer1Enable+0x5aa>
    1b38:	3b c0       	rjmp	.+118    	; 0x1bb0 <TIMER_voidTimer1Enable+0x5c6>
{
    case   TIMER1_MODE_CHANNEL_A_NORMAL :
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A0_BIT);
    1b3a:	af e4       	ldi	r26, 0x4F	; 79
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	ef e4       	ldi	r30, 0x4F	; 79
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	8f 7b       	andi	r24, 0xBF	; 191
    1b46:	8c 93       	st	X, r24
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A1_BIT);
    1b48:	af e4       	ldi	r26, 0x4F	; 79
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	ef e4       	ldi	r30, 0x4F	; 79
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	8f 77       	andi	r24, 0x7F	; 127
    1b54:	8c 93       	st	X, r24
    1b56:	2c c0       	rjmp	.+88     	; 0x1bb0 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_TOGGLE :
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A0_BIT);
    1b58:	af e4       	ldi	r26, 0x4F	; 79
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	ef e4       	ldi	r30, 0x4F	; 79
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	80 64       	ori	r24, 0x40	; 64
    1b64:	8c 93       	st	X, r24
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A1_BIT);
    1b66:	af e4       	ldi	r26, 0x4F	; 79
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	ef e4       	ldi	r30, 0x4F	; 79
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	8f 77       	andi	r24, 0x7F	; 127
    1b72:	8c 93       	st	X, r24
    1b74:	1d c0       	rjmp	.+58     	; 0x1bb0 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_CLEAR_OC1A :
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A0_BIT);
    1b76:	af e4       	ldi	r26, 0x4F	; 79
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	ef e4       	ldi	r30, 0x4F	; 79
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8f 7b       	andi	r24, 0xBF	; 191
    1b82:	8c 93       	st	X, r24
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A1_BIT);
    1b84:	af e4       	ldi	r26, 0x4F	; 79
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	ef e4       	ldi	r30, 0x4F	; 79
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 68       	ori	r24, 0x80	; 128
    1b90:	8c 93       	st	X, r24
    1b92:	0e c0       	rjmp	.+28     	; 0x1bb0 <TIMER_voidTimer1Enable+0x5c6>
    break;
    case   TIMER1_MODE_CHANNEL_A_SET_OC1A :
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A0_BIT);
    1b94:	af e4       	ldi	r26, 0x4F	; 79
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	ef e4       	ldi	r30, 0x4F	; 79
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	80 64       	ori	r24, 0x40	; 64
    1ba0:	8c 93       	st	X, r24
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1A1_BIT);
    1ba2:	af e4       	ldi	r26, 0x4F	; 79
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	ef e4       	ldi	r30, 0x4F	; 79
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	80 68       	ori	r24, 0x80	; 128
    1bae:	8c 93       	st	X, r24
    break;
}
/***********************************************************************************************************/
switch(Copy_u8Timer1ModeChannelB)
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	3d 83       	std	Y+5, r19	; 0x05
    1bb8:	2c 83       	std	Y+4, r18	; 0x04
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	21 f1       	breq	.+72     	; 0x1c0c <TIMER_voidTimer1Enable+0x622>
    1bc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc8:	22 30       	cpi	r18, 0x02	; 2
    1bca:	31 05       	cpc	r19, r1
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <TIMER_voidTimer1Enable+0x5ee>
    1bce:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	61 f0       	breq	.+24     	; 0x1bee <TIMER_voidTimer1Enable+0x604>
    1bd6:	46 c0       	rjmp	.+140    	; 0x1c64 <TIMER_voidTimer1Enable+0x67a>
    1bd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bda:	3d 81       	ldd	r19, Y+5	; 0x05
    1bdc:	22 30       	cpi	r18, 0x02	; 2
    1bde:	31 05       	cpc	r19, r1
    1be0:	21 f1       	breq	.+72     	; 0x1c2a <TIMER_voidTimer1Enable+0x640>
    1be2:	8c 81       	ldd	r24, Y+4	; 0x04
    1be4:	9d 81       	ldd	r25, Y+5	; 0x05
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	91 05       	cpc	r25, r1
    1bea:	71 f1       	breq	.+92     	; 0x1c48 <TIMER_voidTimer1Enable+0x65e>
    1bec:	3b c0       	rjmp	.+118    	; 0x1c64 <TIMER_voidTimer1Enable+0x67a>
{
    case  TIMER1_MODE_CHANNEL_B_NORMAL :
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B0_BIT);
    1bee:	af e4       	ldi	r26, 0x4F	; 79
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	ef e4       	ldi	r30, 0x4F	; 79
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8f 7e       	andi	r24, 0xEF	; 239
    1bfa:	8c 93       	st	X, r24
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B1_BIT);
    1bfc:	af e4       	ldi	r26, 0x4F	; 79
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	ef e4       	ldi	r30, 0x4F	; 79
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	8f 7d       	andi	r24, 0xDF	; 223
    1c08:	8c 93       	st	X, r24
    1c0a:	2c c0       	rjmp	.+88     	; 0x1c64 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_TOGGLE :
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B0_BIT);
    1c0c:	af e4       	ldi	r26, 0x4F	; 79
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	ef e4       	ldi	r30, 0x4F	; 79
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	80 61       	ori	r24, 0x10	; 16
    1c18:	8c 93       	st	X, r24
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B1_BIT);
    1c1a:	af e4       	ldi	r26, 0x4F	; 79
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	ef e4       	ldi	r30, 0x4F	; 79
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 7d       	andi	r24, 0xDF	; 223
    1c26:	8c 93       	st	X, r24
    1c28:	1d c0       	rjmp	.+58     	; 0x1c64 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_CLEAR_OC1B :
       CLR_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B0_BIT);
    1c2a:	af e4       	ldi	r26, 0x4F	; 79
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	ef e4       	ldi	r30, 0x4F	; 79
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	8f 7e       	andi	r24, 0xEF	; 239
    1c36:	8c 93       	st	X, r24
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B1_BIT);
    1c38:	af e4       	ldi	r26, 0x4F	; 79
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	ef e4       	ldi	r30, 0x4F	; 79
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	80 62       	ori	r24, 0x20	; 32
    1c44:	8c 93       	st	X, r24
    1c46:	0e c0       	rjmp	.+28     	; 0x1c64 <TIMER_voidTimer1Enable+0x67a>
    break;
    case    TIMER1_MODE_CHANNEL_B_SET_OC1B :
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B0_BIT);
    1c48:	af e4       	ldi	r26, 0x4F	; 79
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ef e4       	ldi	r30, 0x4F	; 79
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	80 61       	ori	r24, 0x10	; 16
    1c54:	8c 93       	st	X, r24
       SET_BIT(TIMER_u8_TCCR1A_REG,TIMER_u8_TCCR1A_COM1B1_BIT);
    1c56:	af e4       	ldi	r26, 0x4F	; 79
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	ef e4       	ldi	r30, 0x4F	; 79
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 62       	ori	r24, 0x20	; 32
    1c62:	8c 93       	st	X, r24
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_NO_PRESCALING
      SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS10_BIT);
      CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS11_BIT);
      CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS12_BIT);
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_CLK_DIV_8
      CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS10_BIT);
    1c64:	ae e4       	ldi	r26, 0x4E	; 78
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	ee e4       	ldi	r30, 0x4E	; 78
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8e 7f       	andi	r24, 0xFE	; 254
    1c70:	8c 93       	st	X, r24
      SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS11_BIT);
    1c72:	ae e4       	ldi	r26, 0x4E	; 78
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	ee e4       	ldi	r30, 0x4E	; 78
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	82 60       	ori	r24, 0x02	; 2
    1c7e:	8c 93       	st	X, r24
      CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS12_BIT);
    1c80:	ae e4       	ldi	r26, 0x4E	; 78
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	ee e4       	ldi	r30, 0x4E	; 78
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8b 7f       	andi	r24, 0xFB	; 251
    1c8c:	8c 93       	st	X, r24
  #elif  TIMER1_CLOCK_SELECT == TIMER1_SELECT_EXIT_CLK_T0_RISING
      SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS10_BIT);
      SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS11_BIT);
      SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS12_BIT);
  #endif
}
    1c8e:	29 96       	adiw	r28, 0x09	; 9
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <TIMER_voidTimer1GeneratePWMOCR1A>:
/*******************************************************************************************************/
void TIMER_voidTimer1GeneratePWMOCR1A(u8 Copy_u8Intensity)
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <TIMER_voidTimer1GeneratePWMOCR1A+0x6>
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <TIMER_voidTimer1GeneratePWMOCR1A+0x8>
    1ca8:	0f 92       	push	r0
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1AValue;
	switch(TIMER1_u8MODEPWM)
    1cb0:	80 91 79 01 	lds	r24, 0x0179
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	3d 83       	std	Y+5, r19	; 0x05
    1cba:	2c 83       	std	Y+4, r18	; 0x04
    1cbc:	4c 81       	ldd	r20, Y+4	; 0x04
    1cbe:	5d 81       	ldd	r21, Y+5	; 0x05
    1cc0:	43 30       	cpi	r20, 0x03	; 3
    1cc2:	51 05       	cpc	r21, r1
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <TIMER_voidTimer1GeneratePWMOCR1A+0x28>
    1cc6:	5b c0       	rjmp	.+182    	; 0x1d7e <TIMER_voidTimer1GeneratePWMOCR1A+0xde>
    1cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ccc:	84 30       	cpi	r24, 0x04	; 4
    1cce:	91 05       	cpc	r25, r1
    1cd0:	5c f4       	brge	.+22     	; 0x1ce8 <TIMER_voidTimer1GeneratePWMOCR1A+0x48>
    1cd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd6:	21 30       	cpi	r18, 0x01	; 1
    1cd8:	31 05       	cpc	r19, r1
    1cda:	c9 f0       	breq	.+50     	; 0x1d0e <TIMER_voidTimer1GeneratePWMOCR1A+0x6e>
    1cdc:	4c 81       	ldd	r20, Y+4	; 0x04
    1cde:	5d 81       	ldd	r21, Y+5	; 0x05
    1ce0:	42 30       	cpi	r20, 0x02	; 2
    1ce2:	51 05       	cpc	r21, r1
    1ce4:	81 f1       	breq	.+96     	; 0x1d46 <TIMER_voidTimer1GeneratePWMOCR1A+0xa6>
    1ce6:	ab c0       	rjmp	.+342    	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
    1ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cea:	9d 81       	ldd	r25, Y+5	; 0x05
    1cec:	86 30       	cpi	r24, 0x06	; 6
    1cee:	91 05       	cpc	r25, r1
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <TIMER_voidTimer1GeneratePWMOCR1A+0x54>
    1cf2:	75 c0       	rjmp	.+234    	; 0x1dde <TIMER_voidTimer1GeneratePWMOCR1A+0x13e>
    1cf4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf8:	27 30       	cpi	r18, 0x07	; 7
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <TIMER_voidTimer1GeneratePWMOCR1A+0x60>
    1cfe:	84 c0       	rjmp	.+264    	; 0x1e08 <TIMER_voidTimer1GeneratePWMOCR1A+0x168>
    1d00:	4c 81       	ldd	r20, Y+4	; 0x04
    1d02:	5d 81       	ldd	r21, Y+5	; 0x05
    1d04:	45 30       	cpi	r20, 0x05	; 5
    1d06:	51 05       	cpc	r21, r1
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <TIMER_voidTimer1GeneratePWMOCR1A+0x6c>
    1d0a:	55 c0       	rjmp	.+170    	; 0x1db6 <TIMER_voidTimer1GeneratePWMOCR1A+0x116>
    1d0c:	98 c0       	rjmp	.+304    	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	{
	   case TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT :
	        Copy_u16OCR1AValue=((u16)510*Copy_u8Intensity/100);
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	8e ef       	ldi	r24, 0xFE	; 254
    1d16:	91 e0       	ldi	r25, 0x01	; 1
    1d18:	ac 01       	movw	r20, r24
    1d1a:	24 9f       	mul	r18, r20
    1d1c:	c0 01       	movw	r24, r0
    1d1e:	25 9f       	mul	r18, r21
    1d20:	90 0d       	add	r25, r0
    1d22:	34 9f       	mul	r19, r20
    1d24:	90 0d       	add	r25, r0
    1d26:	11 24       	eor	r1, r1
    1d28:	24 e6       	ldi	r18, 0x64	; 100
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	b9 01       	movw	r22, r18
    1d2e:	0e 94 98 31 	call	0x6330	; 0x6330 <__udivmodhi4>
    1d32:	cb 01       	movw	r24, r22
    1d34:	9a 83       	std	Y+2, r25	; 0x02
    1d36:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A_REG=Copy_u16OCR1AValue;
    1d38:	ea e4       	ldi	r30, 0x4A	; 74
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	80 83       	st	Z, r24
    1d44:	7c c0       	rjmp	.+248    	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT :
	        Copy_u16OCR1AValue=((u16)1022*Copy_u8Intensity/100);
    1d46:	8b 81       	ldd	r24, Y+3	; 0x03
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	8e ef       	ldi	r24, 0xFE	; 254
    1d4e:	93 e0       	ldi	r25, 0x03	; 3
    1d50:	ac 01       	movw	r20, r24
    1d52:	24 9f       	mul	r18, r20
    1d54:	c0 01       	movw	r24, r0
    1d56:	25 9f       	mul	r18, r21
    1d58:	90 0d       	add	r25, r0
    1d5a:	34 9f       	mul	r19, r20
    1d5c:	90 0d       	add	r25, r0
    1d5e:	11 24       	eor	r1, r1
    1d60:	24 e6       	ldi	r18, 0x64	; 100
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	b9 01       	movw	r22, r18
    1d66:	0e 94 98 31 	call	0x6330	; 0x6330 <__udivmodhi4>
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A_REG=Copy_u16OCR1AValue;
    1d70:	ea e4       	ldi	r30, 0x4A	; 74
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
    1d7c:	60 c0       	rjmp	.+192    	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT :
	        Copy_u16OCR1AValue=((u16)2046*Copy_u8Intensity/100);
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	8e ef       	ldi	r24, 0xFE	; 254
    1d86:	97 e0       	ldi	r25, 0x07	; 7
    1d88:	ac 01       	movw	r20, r24
    1d8a:	24 9f       	mul	r18, r20
    1d8c:	c0 01       	movw	r24, r0
    1d8e:	25 9f       	mul	r18, r21
    1d90:	90 0d       	add	r25, r0
    1d92:	34 9f       	mul	r19, r20
    1d94:	90 0d       	add	r25, r0
    1d96:	11 24       	eor	r1, r1
    1d98:	24 e6       	ldi	r18, 0x64	; 100
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	b9 01       	movw	r22, r18
    1d9e:	0e 94 98 31 	call	0x6330	; 0x6330 <__udivmodhi4>
    1da2:	cb 01       	movw	r24, r22
    1da4:	9a 83       	std	Y+2, r25	; 0x02
    1da6:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A_REG=Copy_u16OCR1AValue;
    1da8:	ea e4       	ldi	r30, 0x4A	; 74
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
    1db4:	44 c0       	rjmp	.+136    	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;

	   case TIMER1_MODE_FAST_PWM_8_BIT :
	        Copy_u16OCR1AValue=(256*Copy_u8Intensity/100);
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	88 27       	eor	r24, r24
    1dc0:	24 e6       	ldi	r18, 0x64	; 100
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	b9 01       	movw	r22, r18
    1dc6:	0e 94 ac 31 	call	0x6358	; 0x6358 <__divmodhi4>
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9a 83       	std	Y+2, r25	; 0x02
    1dce:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A_REG=Copy_u16OCR1AValue;
    1dd0:	ea e4       	ldi	r30, 0x4A	; 74
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	30 c0       	rjmp	.+96     	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_9_BIT :
	        Copy_u16OCR1AValue=(512*Copy_u8Intensity/100);
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	98 2f       	mov	r25, r24
    1de6:	88 27       	eor	r24, r24
    1de8:	99 0f       	add	r25, r25
    1dea:	24 e6       	ldi	r18, 0x64	; 100
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	b9 01       	movw	r22, r18
    1df0:	0e 94 ac 31 	call	0x6358	; 0x6358 <__divmodhi4>
    1df4:	cb 01       	movw	r24, r22
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A_REG=Copy_u16OCR1AValue;
    1dfa:	ea e4       	ldi	r30, 0x4A	; 74
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	9a 81       	ldd	r25, Y+2	; 0x02
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
    1e06:	1b c0       	rjmp	.+54     	; 0x1e3e <TIMER_voidTimer1GeneratePWMOCR1A+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_10_BIT :
	        Copy_u16OCR1AValue=((u16)1023*Copy_u8Intensity/100);
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	8f ef       	ldi	r24, 0xFF	; 255
    1e10:	93 e0       	ldi	r25, 0x03	; 3
    1e12:	ac 01       	movw	r20, r24
    1e14:	24 9f       	mul	r18, r20
    1e16:	c0 01       	movw	r24, r0
    1e18:	25 9f       	mul	r18, r21
    1e1a:	90 0d       	add	r25, r0
    1e1c:	34 9f       	mul	r19, r20
    1e1e:	90 0d       	add	r25, r0
    1e20:	11 24       	eor	r1, r1
    1e22:	24 e6       	ldi	r18, 0x64	; 100
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	b9 01       	movw	r22, r18
    1e28:	0e 94 98 31 	call	0x6330	; 0x6330 <__udivmodhi4>
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9a 83       	std	Y+2, r25	; 0x02
    1e30:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1A_REG=Copy_u16OCR1AValue;
    1e32:	ea e4       	ldi	r30, 0x4A	; 74
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
	   break;
	}
}
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <TIMER_voidTimer1GeneratePWMOCR1B>:
void TIMER_voidTimer1GeneratePWMOCR1B(u8 Copy_u8Intensity)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	00 d0       	rcall	.+0      	; 0x1e54 <TIMER_voidTimer1GeneratePWMOCR1B+0x6>
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <TIMER_voidTimer1GeneratePWMOCR1B+0x8>
    1e56:	0f 92       	push	r0
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	8b 83       	std	Y+3, r24	; 0x03
	u16 Copy_u16OCR1BValue;
	switch(TIMER1_u8MODEPWM)
    1e5e:	80 91 79 01 	lds	r24, 0x0179
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	3d 83       	std	Y+5, r19	; 0x05
    1e68:	2c 83       	std	Y+4, r18	; 0x04
    1e6a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e6c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e6e:	43 30       	cpi	r20, 0x03	; 3
    1e70:	51 05       	cpc	r21, r1
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <TIMER_voidTimer1GeneratePWMOCR1B+0x28>
    1e74:	5b c0       	rjmp	.+182    	; 0x1f2c <TIMER_voidTimer1GeneratePWMOCR1B+0xde>
    1e76:	8c 81       	ldd	r24, Y+4	; 0x04
    1e78:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7a:	84 30       	cpi	r24, 0x04	; 4
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	5c f4       	brge	.+22     	; 0x1e96 <TIMER_voidTimer1GeneratePWMOCR1B+0x48>
    1e80:	2c 81       	ldd	r18, Y+4	; 0x04
    1e82:	3d 81       	ldd	r19, Y+5	; 0x05
    1e84:	21 30       	cpi	r18, 0x01	; 1
    1e86:	31 05       	cpc	r19, r1
    1e88:	c9 f0       	breq	.+50     	; 0x1ebc <TIMER_voidTimer1GeneratePWMOCR1B+0x6e>
    1e8a:	4c 81       	ldd	r20, Y+4	; 0x04
    1e8c:	5d 81       	ldd	r21, Y+5	; 0x05
    1e8e:	42 30       	cpi	r20, 0x02	; 2
    1e90:	51 05       	cpc	r21, r1
    1e92:	81 f1       	breq	.+96     	; 0x1ef4 <TIMER_voidTimer1GeneratePWMOCR1B+0xa6>
    1e94:	ab c0       	rjmp	.+342    	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
    1e96:	8c 81       	ldd	r24, Y+4	; 0x04
    1e98:	9d 81       	ldd	r25, Y+5	; 0x05
    1e9a:	86 30       	cpi	r24, 0x06	; 6
    1e9c:	91 05       	cpc	r25, r1
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <TIMER_voidTimer1GeneratePWMOCR1B+0x54>
    1ea0:	75 c0       	rjmp	.+234    	; 0x1f8c <TIMER_voidTimer1GeneratePWMOCR1B+0x13e>
    1ea2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea6:	27 30       	cpi	r18, 0x07	; 7
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <TIMER_voidTimer1GeneratePWMOCR1B+0x60>
    1eac:	84 c0       	rjmp	.+264    	; 0x1fb6 <TIMER_voidTimer1GeneratePWMOCR1B+0x168>
    1eae:	4c 81       	ldd	r20, Y+4	; 0x04
    1eb0:	5d 81       	ldd	r21, Y+5	; 0x05
    1eb2:	45 30       	cpi	r20, 0x05	; 5
    1eb4:	51 05       	cpc	r21, r1
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <TIMER_voidTimer1GeneratePWMOCR1B+0x6c>
    1eb8:	55 c0       	rjmp	.+170    	; 0x1f64 <TIMER_voidTimer1GeneratePWMOCR1B+0x116>
    1eba:	98 c0       	rjmp	.+304    	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	{
	   case TIMER1_MODE_PWM_PHASE_CORRECT_8_BIT :
	        Copy_u16OCR1BValue=((u16)510*Copy_u8Intensity/100);
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	8e ef       	ldi	r24, 0xFE	; 254
    1ec4:	91 e0       	ldi	r25, 0x01	; 1
    1ec6:	ac 01       	movw	r20, r24
    1ec8:	24 9f       	mul	r18, r20
    1eca:	c0 01       	movw	r24, r0
    1ecc:	25 9f       	mul	r18, r21
    1ece:	90 0d       	add	r25, r0
    1ed0:	34 9f       	mul	r19, r20
    1ed2:	90 0d       	add	r25, r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	24 e6       	ldi	r18, 0x64	; 100
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	b9 01       	movw	r22, r18
    1edc:	0e 94 98 31 	call	0x6330	; 0x6330 <__udivmodhi4>
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B_REG=Copy_u16OCR1BValue;
    1ee6:	e8 e4       	ldi	r30, 0x48	; 72
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	80 83       	st	Z, r24
    1ef2:	7c c0       	rjmp	.+248    	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_9_BIT :
	        Copy_u16OCR1BValue=((u16)1022*Copy_u8Intensity/100);
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	8e ef       	ldi	r24, 0xFE	; 254
    1efc:	93 e0       	ldi	r25, 0x03	; 3
    1efe:	ac 01       	movw	r20, r24
    1f00:	24 9f       	mul	r18, r20
    1f02:	c0 01       	movw	r24, r0
    1f04:	25 9f       	mul	r18, r21
    1f06:	90 0d       	add	r25, r0
    1f08:	34 9f       	mul	r19, r20
    1f0a:	90 0d       	add	r25, r0
    1f0c:	11 24       	eor	r1, r1
    1f0e:	24 e6       	ldi	r18, 0x64	; 100
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	b9 01       	movw	r22, r18
    1f14:	0e 94 98 31 	call	0x6330	; 0x6330 <__udivmodhi4>
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B_REG=Copy_u16OCR1BValue;
    1f1e:	e8 e4       	ldi	r30, 0x48	; 72
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	9a 81       	ldd	r25, Y+2	; 0x02
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	80 83       	st	Z, r24
    1f2a:	60 c0       	rjmp	.+192    	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_PWM_PHASE_CORRECT_10_BIT :
	        Copy_u16OCR1BValue=((u16)2046*Copy_u8Intensity/100);
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	8e ef       	ldi	r24, 0xFE	; 254
    1f34:	97 e0       	ldi	r25, 0x07	; 7
    1f36:	ac 01       	movw	r20, r24
    1f38:	24 9f       	mul	r18, r20
    1f3a:	c0 01       	movw	r24, r0
    1f3c:	25 9f       	mul	r18, r21
    1f3e:	90 0d       	add	r25, r0
    1f40:	34 9f       	mul	r19, r20
    1f42:	90 0d       	add	r25, r0
    1f44:	11 24       	eor	r1, r1
    1f46:	24 e6       	ldi	r18, 0x64	; 100
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	b9 01       	movw	r22, r18
    1f4c:	0e 94 98 31 	call	0x6330	; 0x6330 <__udivmodhi4>
    1f50:	cb 01       	movw	r24, r22
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B_REG=Copy_u16OCR1BValue;
    1f56:	e8 e4       	ldi	r30, 0x48	; 72
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	91 83       	std	Z+1, r25	; 0x01
    1f60:	80 83       	st	Z, r24
    1f62:	44 c0       	rjmp	.+136    	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;

	   case TIMER1_MODE_FAST_PWM_8_BIT :
	        Copy_u16OCR1BValue=(256*Copy_u8Intensity/100);
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	88 2f       	mov	r24, r24
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	98 2f       	mov	r25, r24
    1f6c:	88 27       	eor	r24, r24
    1f6e:	24 e6       	ldi	r18, 0x64	; 100
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	b9 01       	movw	r22, r18
    1f74:	0e 94 ac 31 	call	0x6358	; 0x6358 <__divmodhi4>
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B_REG=Copy_u16OCR1BValue;
    1f7e:	e8 e4       	ldi	r30, 0x48	; 72
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	9a 81       	ldd	r25, Y+2	; 0x02
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	80 83       	st	Z, r24
    1f8a:	30 c0       	rjmp	.+96     	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_9_BIT :
	        Copy_u16OCR1BValue=(512*Copy_u8Intensity/100);
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	98 2f       	mov	r25, r24
    1f94:	88 27       	eor	r24, r24
    1f96:	99 0f       	add	r25, r25
    1f98:	24 e6       	ldi	r18, 0x64	; 100
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	b9 01       	movw	r22, r18
    1f9e:	0e 94 ac 31 	call	0x6358	; 0x6358 <__divmodhi4>
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9a 83       	std	Y+2, r25	; 0x02
    1fa6:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B_REG=Copy_u16OCR1BValue;
    1fa8:	e8 e4       	ldi	r30, 0x48	; 72
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
    1fb4:	1b c0       	rjmp	.+54     	; 0x1fec <TIMER_voidTimer1GeneratePWMOCR1B+0x19e>
	   break;
	   case TIMER1_MODE_FAST_PWM_10_BIT :
	        Copy_u16OCR1BValue=((u16)1023*Copy_u8Intensity/100);
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	8f ef       	ldi	r24, 0xFF	; 255
    1fbe:	93 e0       	ldi	r25, 0x03	; 3
    1fc0:	ac 01       	movw	r20, r24
    1fc2:	24 9f       	mul	r18, r20
    1fc4:	c0 01       	movw	r24, r0
    1fc6:	25 9f       	mul	r18, r21
    1fc8:	90 0d       	add	r25, r0
    1fca:	34 9f       	mul	r19, r20
    1fcc:	90 0d       	add	r25, r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	24 e6       	ldi	r18, 0x64	; 100
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	b9 01       	movw	r22, r18
    1fd6:	0e 94 98 31 	call	0x6330	; 0x6330 <__udivmodhi4>
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01
	        TIMER_u16_OCR1B_REG=Copy_u16OCR1BValue;
    1fe0:	e8 e4       	ldi	r30, 0x48	; 72
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
	   break;
	}
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <TIMER_voidTimer1SetOCR1A>:

/*************************************************************************************************************/
void TIMER_voidTimer1SetOCR1A(u16 Copy_u16OCR1A)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	00 d0       	rcall	.+0      	; 0x2002 <TIMER_voidTimer1SetOCR1A+0x6>
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	89 83       	std	Y+1, r24	; 0x01
	  TIMER_u8_OCR1AH_REG = (u8)(Copy_u16OCR1A>>8);
    200a:	eb e4       	ldi	r30, 0x4B	; 75
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	89 2f       	mov	r24, r25
    2014:	99 27       	eor	r25, r25
    2016:	80 83       	st	Z, r24
	  TIMER_u8_OCR1AL_REG = (u8)(Copy_u16OCR1A);
    2018:	ea e4       	ldi	r30, 0x4A	; 74
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	80 83       	st	Z, r24
}
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <TIMER_voidTimer1SetOCR1B>:
void TIMER_voidTimer1SetOCR1B(u16 Copy_u16OCR1B)
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	00 d0       	rcall	.+0      	; 0x2030 <TIMER_voidTimer1SetOCR1B+0x6>
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	89 83       	std	Y+1, r24	; 0x01
	TIMER_u16_OCR1B_REG = Copy_u16OCR1B ;
    2038:	e8 e4       	ldi	r30, 0x48	; 72
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	80 83       	st	Z, r24
}
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <TIMER_voidTimer1SetICR1>:
void TIMER_voidTimer1SetICR1(u16 Copy_u16ICR1)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	00 d0       	rcall	.+0      	; 0x2054 <TIMER_voidTimer1SetICR1+0x6>
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
	  TIMER_u8_ICR1H_REG = (u8)(Copy_u16ICR1>>8);
    205c:	e7 e4       	ldi	r30, 0x47	; 71
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	9a 81       	ldd	r25, Y+2	; 0x02
    2064:	89 2f       	mov	r24, r25
    2066:	99 27       	eor	r25, r25
    2068:	80 83       	st	Z, r24
	  TIMER_u8_ICR1L_REG = (u8)(Copy_u16ICR1);
    206a:	e6 e4       	ldi	r30, 0x46	; 70
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	80 83       	st	Z, r24
}
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <TIMER_voidTimer1ICUInit>:
 *                                                           ICU Timer 1                                                             *
 **************************************************************************************************************************************/
static void(*Timer1_pICUSetCallBack)(void);
/************************************************************************************************************************************/
void TIMER_voidTimer1ICUInit(void)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
	 SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_ICES1_BIT);
    2084:	ae e4       	ldi	r26, 0x4E	; 78
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	ee e4       	ldi	r30, 0x4E	; 78
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	80 64       	ori	r24, 0x40	; 64
    2090:	8c 93       	st	X, r24
	 SET_BIT(TIMER_u8_TIMSK_REG,TIMER_u8_TIMSK_TICIE1_BIT);
    2092:	a9 e5       	ldi	r26, 0x59	; 89
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e9 e5       	ldi	r30, 0x59	; 89
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	80 62       	ori	r24, 0x20	; 32
    209e:	8c 93       	st	X, r24

	 CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS10_BIT);
    20a0:	ae e4       	ldi	r26, 0x4E	; 78
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	ee e4       	ldi	r30, 0x4E	; 78
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	8e 7f       	andi	r24, 0xFE	; 254
    20ac:	8c 93       	st	X, r24
	 SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS11_BIT);
    20ae:	ae e4       	ldi	r26, 0x4E	; 78
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	ee e4       	ldi	r30, 0x4E	; 78
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	82 60       	ori	r24, 0x02	; 2
    20ba:	8c 93       	st	X, r24
	 CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_CS12_BIT);
    20bc:	ae e4       	ldi	r26, 0x4E	; 78
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	ee e4       	ldi	r30, 0x4E	; 78
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	8b 7f       	andi	r24, 0xFB	; 251
    20c8:	8c 93       	st	X, r24
}
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <TIMER_voidTimer1ICUSetTriggerEdge>:
void TIMER_voidTimer1ICUSetTriggerEdge(u8 Copy_u8ICUEdgeType)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	0f 92       	push	r0
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	89 83       	std	Y+1, r24	; 0x01
   if(Copy_u8ICUEdgeType==TIMER1_ICU_RISING_EDGY_TYPE_MODE)
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	41 f4       	brne	.+16     	; 0x20f2 <TIMER_voidTimer1ICUSetTriggerEdge+0x22>
   {
	  SET_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_ICES1_BIT);
    20e2:	ae e4       	ldi	r26, 0x4E	; 78
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	ee e4       	ldi	r30, 0x4E	; 78
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	80 64       	ori	r24, 0x40	; 64
    20ee:	8c 93       	st	X, r24
    20f0:	0a c0       	rjmp	.+20     	; 0x2106 <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
   }
   else if(Copy_u8ICUEdgeType==TIMER1_ICU_FALLING_EDGY_TYPE_MODE)
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	88 23       	and	r24, r24
    20f6:	39 f4       	brne	.+14     	; 0x2106 <TIMER_voidTimer1ICUSetTriggerEdge+0x36>
   {
	  CLR_BIT(TIMER_u8_TCCR1B_REG,TIMER_u8_TCCR1B_ICES1_BIT);
    20f8:	ae e4       	ldi	r26, 0x4E	; 78
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	ee e4       	ldi	r30, 0x4E	; 78
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	8f 7b       	andi	r24, 0xBF	; 191
    2104:	8c 93       	st	X, r24
   }
}
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <TIMER_voidTimer1ICUGetInputCaptureValue>:
u16 TIMER_voidTimer1ICUGetInputCaptureValue(void)
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
	 return TIMER_u16_ICR1_REG;
    2116:	e6 e4       	ldi	r30, 0x46	; 70
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	91 81       	ldd	r25, Z+1	; 0x01
}
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <TIMER_voidTimer1ICUSetCallBack>:
void TIMER_voidTimer1ICUSetCallBack(void (*Copy_pFun) (void))
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <TIMER_voidTimer1ICUSetCallBack+0x6>
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
    212e:	9a 83       	std	Y+2, r25	; 0x02
    2130:	89 83       	std	Y+1, r24	; 0x01
	 Timer1_pICUSetCallBack = Copy_pFun;
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	9a 81       	ldd	r25, Y+2	; 0x02
    2136:	90 93 75 01 	sts	0x0175, r25
    213a:	80 93 74 01 	sts	0x0174, r24
}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <TIMER_voidClearTimer1Value>:
void TIMER_voidClearTimer1Value(void)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
	 TIMER_u16_TCNT1_REG = 0;
    2150:	ec e4       	ldi	r30, 0x4C	; 76
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	11 82       	std	Z+1, r1	; 0x01
    2156:	10 82       	st	Z, r1
}
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <__vector_6>:
void __vector_6 (void)
{
    215e:	1f 92       	push	r1
    2160:	0f 92       	push	r0
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	0f 92       	push	r0
    2166:	11 24       	eor	r1, r1
    2168:	2f 93       	push	r18
    216a:	3f 93       	push	r19
    216c:	4f 93       	push	r20
    216e:	5f 93       	push	r21
    2170:	6f 93       	push	r22
    2172:	7f 93       	push	r23
    2174:	8f 93       	push	r24
    2176:	9f 93       	push	r25
    2178:	af 93       	push	r26
    217a:	bf 93       	push	r27
    217c:	ef 93       	push	r30
    217e:	ff 93       	push	r31
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
	if (Timer1_pICUSetCallBack!=NULL)
    2188:	80 91 74 01 	lds	r24, 0x0174
    218c:	90 91 75 01 	lds	r25, 0x0175
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	29 f0       	breq	.+10     	; 0x219e <__vector_6+0x40>
	{
		Timer1_pICUSetCallBack();
    2194:	e0 91 74 01 	lds	r30, 0x0174
    2198:	f0 91 75 01 	lds	r31, 0x0175
    219c:	09 95       	icall
	}
}
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	ff 91       	pop	r31
    21a4:	ef 91       	pop	r30
    21a6:	bf 91       	pop	r27
    21a8:	af 91       	pop	r26
    21aa:	9f 91       	pop	r25
    21ac:	8f 91       	pop	r24
    21ae:	7f 91       	pop	r23
    21b0:	6f 91       	pop	r22
    21b2:	5f 91       	pop	r21
    21b4:	4f 91       	pop	r20
    21b6:	3f 91       	pop	r19
    21b8:	2f 91       	pop	r18
    21ba:	0f 90       	pop	r0
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	0f 90       	pop	r0
    21c0:	1f 90       	pop	r1
    21c2:	18 95       	reti

000021c4 <GI_voidEnable>:
#include "GI_private.h"
#include "GI_config.h"
#include "GI_interface.h"

void GI_voidEnable (void)
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG_REG , GI_u8_SREG_I_BIT);
    21cc:	af e5       	ldi	r26, 0x5F	; 95
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	ef e5       	ldi	r30, 0x5F	; 95
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	80 68       	ori	r24, 0x80	; 128
    21d8:	8c 93       	st	X, r24
}
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <GI_voidDisable>:

void GI_voidDisable(void)
{
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG_REG , GI_u8_SREG_I_BIT);
    21e8:	af e5       	ldi	r26, 0x5F	; 95
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	ef e5       	ldi	r30, 0x5F	; 95
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	8f 77       	andi	r24, 0x7F	; 127
    21f4:	8c 93       	st	X, r24
}
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidSetPinDirection(u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber,u8 Copy_u8PinDirection)
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
    2204:	27 97       	sbiw	r28, 0x07	; 7
    2206:	0f b6       	in	r0, 0x3f	; 63
    2208:	f8 94       	cli
    220a:	de bf       	out	0x3e, r29	; 62
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	cd bf       	out	0x3d, r28	; 61
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	6a 83       	std	Y+2, r22	; 0x02
    2214:	4b 83       	std	Y+3, r20	; 0x03
	if(DIO_u8_PIN_OUTPUT==Copy_u8PinDirection)
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	09 f0       	breq	.+2      	; 0x221e <DIO_voidSetPinDirection+0x22>
    221c:	6f c0       	rjmp	.+222    	; 0x22fc <DIO_voidSetPinDirection+0x100>
	{
	    switch (Copy_u8PortNumber)
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	3f 83       	std	Y+7, r19	; 0x07
    2226:	2e 83       	std	Y+6, r18	; 0x06
    2228:	8e 81       	ldd	r24, Y+6	; 0x06
    222a:	9f 81       	ldd	r25, Y+7	; 0x07
    222c:	81 30       	cpi	r24, 0x01	; 1
    222e:	91 05       	cpc	r25, r1
    2230:	49 f1       	breq	.+82     	; 0x2284 <DIO_voidSetPinDirection+0x88>
    2232:	2e 81       	ldd	r18, Y+6	; 0x06
    2234:	3f 81       	ldd	r19, Y+7	; 0x07
    2236:	22 30       	cpi	r18, 0x02	; 2
    2238:	31 05       	cpc	r19, r1
    223a:	2c f4       	brge	.+10     	; 0x2246 <DIO_voidSetPinDirection+0x4a>
    223c:	8e 81       	ldd	r24, Y+6	; 0x06
    223e:	9f 81       	ldd	r25, Y+7	; 0x07
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	61 f0       	breq	.+24     	; 0x225c <DIO_voidSetPinDirection+0x60>
    2244:	d2 c0       	rjmp	.+420    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
    2246:	2e 81       	ldd	r18, Y+6	; 0x06
    2248:	3f 81       	ldd	r19, Y+7	; 0x07
    224a:	22 30       	cpi	r18, 0x02	; 2
    224c:	31 05       	cpc	r19, r1
    224e:	71 f1       	breq	.+92     	; 0x22ac <DIO_voidSetPinDirection+0xb0>
    2250:	8e 81       	ldd	r24, Y+6	; 0x06
    2252:	9f 81       	ldd	r25, Y+7	; 0x07
    2254:	83 30       	cpi	r24, 0x03	; 3
    2256:	91 05       	cpc	r25, r1
    2258:	e9 f1       	breq	.+122    	; 0x22d4 <DIO_voidSetPinDirection+0xd8>
    225a:	c7 c0       	rjmp	.+398    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		{
		  case DIO_u8_PORTA: SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinNumber); break;
    225c:	aa e3       	ldi	r26, 0x3A	; 58
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	ea e3       	ldi	r30, 0x3A	; 58
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	48 2f       	mov	r20, r24
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	02 2e       	mov	r0, r18
    2274:	02 c0       	rjmp	.+4      	; 0x227a <DIO_voidSetPinDirection+0x7e>
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	0a 94       	dec	r0
    227c:	e2 f7       	brpl	.-8      	; 0x2276 <DIO_voidSetPinDirection+0x7a>
    227e:	84 2b       	or	r24, r20
    2280:	8c 93       	st	X, r24
    2282:	b3 c0       	rjmp	.+358    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		  case DIO_u8_PORTB: SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinNumber); break;
    2284:	a7 e3       	ldi	r26, 0x37	; 55
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e7 e3       	ldi	r30, 0x37	; 55
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	48 2f       	mov	r20, r24
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	02 2e       	mov	r0, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <DIO_voidSetPinDirection+0xa6>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <DIO_voidSetPinDirection+0xa2>
    22a6:	84 2b       	or	r24, r20
    22a8:	8c 93       	st	X, r24
    22aa:	9f c0       	rjmp	.+318    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		  case DIO_u8_PORTC: SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinNumber); break;
    22ac:	a4 e3       	ldi	r26, 0x34	; 52
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e4 e3       	ldi	r30, 0x34	; 52
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 2e       	mov	r0, r18
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <DIO_voidSetPinDirection+0xce>
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	0a 94       	dec	r0
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <DIO_voidSetPinDirection+0xca>
    22ce:	84 2b       	or	r24, r20
    22d0:	8c 93       	st	X, r24
    22d2:	8b c0       	rjmp	.+278    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		  case DIO_u8_PORTD: SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinNumber); break;
    22d4:	a1 e3       	ldi	r26, 0x31	; 49
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e1 e3       	ldi	r30, 0x31	; 49
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	48 2f       	mov	r20, r24
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 2e       	mov	r0, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <DIO_voidSetPinDirection+0xf6>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <DIO_voidSetPinDirection+0xf2>
    22f6:	84 2b       	or	r24, r20
    22f8:	8c 93       	st	X, r24
    22fa:	77 c0       	rjmp	.+238    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		}
	}
	else if (DIO_u8_PIN_INPUT==Copy_u8PinDirection)
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	88 23       	and	r24, r24
    2300:	09 f0       	breq	.+2      	; 0x2304 <DIO_voidSetPinDirection+0x108>
    2302:	73 c0       	rjmp	.+230    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
	{
		switch (Copy_u8PortNumber)
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	3d 83       	std	Y+5, r19	; 0x05
    230c:	2c 83       	std	Y+4, r18	; 0x04
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
    2310:	9d 81       	ldd	r25, Y+5	; 0x05
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	91 05       	cpc	r25, r1
    2316:	59 f1       	breq	.+86     	; 0x236e <DIO_voidSetPinDirection+0x172>
    2318:	2c 81       	ldd	r18, Y+4	; 0x04
    231a:	3d 81       	ldd	r19, Y+5	; 0x05
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	2c f4       	brge	.+10     	; 0x232c <DIO_voidSetPinDirection+0x130>
    2322:	8c 81       	ldd	r24, Y+4	; 0x04
    2324:	9d 81       	ldd	r25, Y+5	; 0x05
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f0       	breq	.+26     	; 0x2344 <DIO_voidSetPinDirection+0x148>
    232a:	5f c0       	rjmp	.+190    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
    232c:	2c 81       	ldd	r18, Y+4	; 0x04
    232e:	3d 81       	ldd	r19, Y+5	; 0x05
    2330:	22 30       	cpi	r18, 0x02	; 2
    2332:	31 05       	cpc	r19, r1
    2334:	89 f1       	breq	.+98     	; 0x2398 <DIO_voidSetPinDirection+0x19c>
    2336:	8c 81       	ldd	r24, Y+4	; 0x04
    2338:	9d 81       	ldd	r25, Y+5	; 0x05
    233a:	83 30       	cpi	r24, 0x03	; 3
    233c:	91 05       	cpc	r25, r1
    233e:	09 f4       	brne	.+2      	; 0x2342 <DIO_voidSetPinDirection+0x146>
    2340:	40 c0       	rjmp	.+128    	; 0x23c2 <DIO_voidSetPinDirection+0x1c6>
    2342:	53 c0       	rjmp	.+166    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		{
		  case DIO_u8_PORTA: CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinNumber); break;
    2344:	aa e3       	ldi	r26, 0x3A	; 58
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	ea e3       	ldi	r30, 0x3A	; 58
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	48 2f       	mov	r20, r24
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	02 2e       	mov	r0, r18
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <DIO_voidSetPinDirection+0x166>
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	0a 94       	dec	r0
    2364:	e2 f7       	brpl	.-8      	; 0x235e <DIO_voidSetPinDirection+0x162>
    2366:	80 95       	com	r24
    2368:	84 23       	and	r24, r20
    236a:	8c 93       	st	X, r24
    236c:	3e c0       	rjmp	.+124    	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		  case DIO_u8_PORTB: CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinNumber); break;
    236e:	a7 e3       	ldi	r26, 0x37	; 55
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e7 e3       	ldi	r30, 0x37	; 55
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	48 2f       	mov	r20, r24
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	02 2e       	mov	r0, r18
    2386:	02 c0       	rjmp	.+4      	; 0x238c <DIO_voidSetPinDirection+0x190>
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	0a 94       	dec	r0
    238e:	e2 f7       	brpl	.-8      	; 0x2388 <DIO_voidSetPinDirection+0x18c>
    2390:	80 95       	com	r24
    2392:	84 23       	and	r24, r20
    2394:	8c 93       	st	X, r24
    2396:	29 c0       	rjmp	.+82     	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		  case DIO_u8_PORTC: CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinNumber); break;
    2398:	a4 e3       	ldi	r26, 0x34	; 52
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e4 e3       	ldi	r30, 0x34	; 52
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	48 2f       	mov	r20, r24
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	02 2e       	mov	r0, r18
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <DIO_voidSetPinDirection+0x1ba>
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	0a 94       	dec	r0
    23b8:	e2 f7       	brpl	.-8      	; 0x23b2 <DIO_voidSetPinDirection+0x1b6>
    23ba:	80 95       	com	r24
    23bc:	84 23       	and	r24, r20
    23be:	8c 93       	st	X, r24
    23c0:	14 c0       	rjmp	.+40     	; 0x23ea <DIO_voidSetPinDirection+0x1ee>
		  case DIO_u8_PORTD: CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinNumber); break;
    23c2:	a1 e3       	ldi	r26, 0x31	; 49
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e1 e3       	ldi	r30, 0x31	; 49
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	48 2f       	mov	r20, r24
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	02 2e       	mov	r0, r18
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <DIO_voidSetPinDirection+0x1e4>
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	0a 94       	dec	r0
    23e2:	e2 f7       	brpl	.-8      	; 0x23dc <DIO_voidSetPinDirection+0x1e0>
    23e4:	80 95       	com	r24
    23e6:	84 23       	and	r24, r20
    23e8:	8c 93       	st	X, r24
		}
	}
}
    23ea:	27 96       	adiw	r28, 0x07	; 7
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber,u8 Copy_u8PinValue)
{
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	27 97       	sbiw	r28, 0x07	; 7
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	6a 83       	std	Y+2, r22	; 0x02
    2414:	4b 83       	std	Y+3, r20	; 0x03

	if(DIO_u8_HIGH==Copy_u8PinValue)
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	81 30       	cpi	r24, 0x01	; 1
    241a:	09 f0       	breq	.+2      	; 0x241e <DIO_voidSetPinValue+0x22>
    241c:	6f c0       	rjmp	.+222    	; 0x24fc <DIO_voidSetPinValue+0x100>
	{
	    switch (Copy_u8PortNumber)
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	3f 83       	std	Y+7, r19	; 0x07
    2426:	2e 83       	std	Y+6, r18	; 0x06
    2428:	8e 81       	ldd	r24, Y+6	; 0x06
    242a:	9f 81       	ldd	r25, Y+7	; 0x07
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	91 05       	cpc	r25, r1
    2430:	49 f1       	breq	.+82     	; 0x2484 <DIO_voidSetPinValue+0x88>
    2432:	2e 81       	ldd	r18, Y+6	; 0x06
    2434:	3f 81       	ldd	r19, Y+7	; 0x07
    2436:	22 30       	cpi	r18, 0x02	; 2
    2438:	31 05       	cpc	r19, r1
    243a:	2c f4       	brge	.+10     	; 0x2446 <DIO_voidSetPinValue+0x4a>
    243c:	8e 81       	ldd	r24, Y+6	; 0x06
    243e:	9f 81       	ldd	r25, Y+7	; 0x07
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	61 f0       	breq	.+24     	; 0x245c <DIO_voidSetPinValue+0x60>
    2444:	d2 c0       	rjmp	.+420    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
    2446:	2e 81       	ldd	r18, Y+6	; 0x06
    2448:	3f 81       	ldd	r19, Y+7	; 0x07
    244a:	22 30       	cpi	r18, 0x02	; 2
    244c:	31 05       	cpc	r19, r1
    244e:	71 f1       	breq	.+92     	; 0x24ac <DIO_voidSetPinValue+0xb0>
    2450:	8e 81       	ldd	r24, Y+6	; 0x06
    2452:	9f 81       	ldd	r25, Y+7	; 0x07
    2454:	83 30       	cpi	r24, 0x03	; 3
    2456:	91 05       	cpc	r25, r1
    2458:	e9 f1       	breq	.+122    	; 0x24d4 <DIO_voidSetPinValue+0xd8>
    245a:	c7 c0       	rjmp	.+398    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		{
		  case DIO_u8_PORTA: SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber); break;
    245c:	ab e3       	ldi	r26, 0x3B	; 59
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	eb e3       	ldi	r30, 0x3B	; 59
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	48 2f       	mov	r20, r24
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	02 2e       	mov	r0, r18
    2474:	02 c0       	rjmp	.+4      	; 0x247a <DIO_voidSetPinValue+0x7e>
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	0a 94       	dec	r0
    247c:	e2 f7       	brpl	.-8      	; 0x2476 <DIO_voidSetPinValue+0x7a>
    247e:	84 2b       	or	r24, r20
    2480:	8c 93       	st	X, r24
    2482:	b3 c0       	rjmp	.+358    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		  case DIO_u8_PORTB: SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber); break;
    2484:	a8 e3       	ldi	r26, 0x38	; 56
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	e8 e3       	ldi	r30, 0x38	; 56
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	48 2f       	mov	r20, r24
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	02 2e       	mov	r0, r18
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <DIO_voidSetPinValue+0xa6>
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	0a 94       	dec	r0
    24a4:	e2 f7       	brpl	.-8      	; 0x249e <DIO_voidSetPinValue+0xa2>
    24a6:	84 2b       	or	r24, r20
    24a8:	8c 93       	st	X, r24
    24aa:	9f c0       	rjmp	.+318    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		  case DIO_u8_PORTC: SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber); break;
    24ac:	a5 e3       	ldi	r26, 0x35	; 53
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e5 e3       	ldi	r30, 0x35	; 53
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	48 2f       	mov	r20, r24
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	02 2e       	mov	r0, r18
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <DIO_voidSetPinValue+0xce>
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	0a 94       	dec	r0
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <DIO_voidSetPinValue+0xca>
    24ce:	84 2b       	or	r24, r20
    24d0:	8c 93       	st	X, r24
    24d2:	8b c0       	rjmp	.+278    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		  case DIO_u8_PORTD: SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber); break;
    24d4:	a2 e3       	ldi	r26, 0x32	; 50
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e2 e3       	ldi	r30, 0x32	; 50
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	48 2f       	mov	r20, r24
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	02 2e       	mov	r0, r18
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <DIO_voidSetPinValue+0xf6>
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	0a 94       	dec	r0
    24f4:	e2 f7       	brpl	.-8      	; 0x24ee <DIO_voidSetPinValue+0xf2>
    24f6:	84 2b       	or	r24, r20
    24f8:	8c 93       	st	X, r24
    24fa:	77 c0       	rjmp	.+238    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		}
	}
	else if (DIO_u8_LOW==Copy_u8PinValue)
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	88 23       	and	r24, r24
    2500:	09 f0       	breq	.+2      	; 0x2504 <DIO_voidSetPinValue+0x108>
    2502:	73 c0       	rjmp	.+230    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
	{
		switch (Copy_u8PortNumber)
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	3d 83       	std	Y+5, r19	; 0x05
    250c:	2c 83       	std	Y+4, r18	; 0x04
    250e:	8c 81       	ldd	r24, Y+4	; 0x04
    2510:	9d 81       	ldd	r25, Y+5	; 0x05
    2512:	81 30       	cpi	r24, 0x01	; 1
    2514:	91 05       	cpc	r25, r1
    2516:	59 f1       	breq	.+86     	; 0x256e <DIO_voidSetPinValue+0x172>
    2518:	2c 81       	ldd	r18, Y+4	; 0x04
    251a:	3d 81       	ldd	r19, Y+5	; 0x05
    251c:	22 30       	cpi	r18, 0x02	; 2
    251e:	31 05       	cpc	r19, r1
    2520:	2c f4       	brge	.+10     	; 0x252c <DIO_voidSetPinValue+0x130>
    2522:	8c 81       	ldd	r24, Y+4	; 0x04
    2524:	9d 81       	ldd	r25, Y+5	; 0x05
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	69 f0       	breq	.+26     	; 0x2544 <DIO_voidSetPinValue+0x148>
    252a:	5f c0       	rjmp	.+190    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
    252c:	2c 81       	ldd	r18, Y+4	; 0x04
    252e:	3d 81       	ldd	r19, Y+5	; 0x05
    2530:	22 30       	cpi	r18, 0x02	; 2
    2532:	31 05       	cpc	r19, r1
    2534:	89 f1       	breq	.+98     	; 0x2598 <DIO_voidSetPinValue+0x19c>
    2536:	8c 81       	ldd	r24, Y+4	; 0x04
    2538:	9d 81       	ldd	r25, Y+5	; 0x05
    253a:	83 30       	cpi	r24, 0x03	; 3
    253c:	91 05       	cpc	r25, r1
    253e:	09 f4       	brne	.+2      	; 0x2542 <DIO_voidSetPinValue+0x146>
    2540:	40 c0       	rjmp	.+128    	; 0x25c2 <DIO_voidSetPinValue+0x1c6>
    2542:	53 c0       	rjmp	.+166    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		{
		  case DIO_u8_PORTA: CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber); break;
    2544:	ab e3       	ldi	r26, 0x3B	; 59
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	eb e3       	ldi	r30, 0x3B	; 59
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	48 2f       	mov	r20, r24
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	02 2e       	mov	r0, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <DIO_voidSetPinValue+0x166>
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	0a 94       	dec	r0
    2564:	e2 f7       	brpl	.-8      	; 0x255e <DIO_voidSetPinValue+0x162>
    2566:	80 95       	com	r24
    2568:	84 23       	and	r24, r20
    256a:	8c 93       	st	X, r24
    256c:	3e c0       	rjmp	.+124    	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		  case DIO_u8_PORTB: CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber); break;
    256e:	a8 e3       	ldi	r26, 0x38	; 56
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e8 e3       	ldi	r30, 0x38	; 56
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	48 2f       	mov	r20, r24
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	28 2f       	mov	r18, r24
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	02 2e       	mov	r0, r18
    2586:	02 c0       	rjmp	.+4      	; 0x258c <DIO_voidSetPinValue+0x190>
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	0a 94       	dec	r0
    258e:	e2 f7       	brpl	.-8      	; 0x2588 <DIO_voidSetPinValue+0x18c>
    2590:	80 95       	com	r24
    2592:	84 23       	and	r24, r20
    2594:	8c 93       	st	X, r24
    2596:	29 c0       	rjmp	.+82     	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		  case DIO_u8_PORTC: CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber); break;
    2598:	a5 e3       	ldi	r26, 0x35	; 53
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e5 e3       	ldi	r30, 0x35	; 53
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	48 2f       	mov	r20, r24
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	02 2e       	mov	r0, r18
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <DIO_voidSetPinValue+0x1ba>
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	0a 94       	dec	r0
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <DIO_voidSetPinValue+0x1b6>
    25ba:	80 95       	com	r24
    25bc:	84 23       	and	r24, r20
    25be:	8c 93       	st	X, r24
    25c0:	14 c0       	rjmp	.+40     	; 0x25ea <DIO_voidSetPinValue+0x1ee>
		  case DIO_u8_PORTD: CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber); break;
    25c2:	a2 e3       	ldi	r26, 0x32	; 50
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e2 e3       	ldi	r30, 0x32	; 50
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	48 2f       	mov	r20, r24
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	02 2e       	mov	r0, r18
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <DIO_voidSetPinValue+0x1e4>
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	0a 94       	dec	r0
    25e2:	e2 f7       	brpl	.-8      	; 0x25dc <DIO_voidSetPinValue+0x1e0>
    25e4:	80 95       	com	r24
    25e6:	84 23       	and	r24, r20
    25e8:	8c 93       	st	X, r24
		}
	}
}
    25ea:	27 96       	adiw	r28, 0x07	; 7
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	00 d0       	rcall	.+0      	; 0x2602 <DIO_u8GetPinValue+0x6>
    2602:	00 d0       	rcall	.+0      	; 0x2604 <DIO_u8GetPinValue+0x8>
    2604:	0f 92       	push	r0
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	8a 83       	std	Y+2, r24	; 0x02
    260c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8BitValue;
	switch (Copy_u8PortNumber)
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	3d 83       	std	Y+5, r19	; 0x05
    2616:	2c 83       	std	Y+4, r18	; 0x04
    2618:	4c 81       	ldd	r20, Y+4	; 0x04
    261a:	5d 81       	ldd	r21, Y+5	; 0x05
    261c:	41 30       	cpi	r20, 0x01	; 1
    261e:	51 05       	cpc	r21, r1
    2620:	41 f1       	breq	.+80     	; 0x2672 <DIO_u8GetPinValue+0x76>
    2622:	8c 81       	ldd	r24, Y+4	; 0x04
    2624:	9d 81       	ldd	r25, Y+5	; 0x05
    2626:	82 30       	cpi	r24, 0x02	; 2
    2628:	91 05       	cpc	r25, r1
    262a:	34 f4       	brge	.+12     	; 0x2638 <DIO_u8GetPinValue+0x3c>
    262c:	2c 81       	ldd	r18, Y+4	; 0x04
    262e:	3d 81       	ldd	r19, Y+5	; 0x05
    2630:	21 15       	cp	r18, r1
    2632:	31 05       	cpc	r19, r1
    2634:	61 f0       	breq	.+24     	; 0x264e <DIO_u8GetPinValue+0x52>
    2636:	52 c0       	rjmp	.+164    	; 0x26dc <DIO_u8GetPinValue+0xe0>
    2638:	4c 81       	ldd	r20, Y+4	; 0x04
    263a:	5d 81       	ldd	r21, Y+5	; 0x05
    263c:	42 30       	cpi	r20, 0x02	; 2
    263e:	51 05       	cpc	r21, r1
    2640:	51 f1       	breq	.+84     	; 0x2696 <DIO_u8GetPinValue+0x9a>
    2642:	8c 81       	ldd	r24, Y+4	; 0x04
    2644:	9d 81       	ldd	r25, Y+5	; 0x05
    2646:	83 30       	cpi	r24, 0x03	; 3
    2648:	91 05       	cpc	r25, r1
    264a:	b9 f1       	breq	.+110    	; 0x26ba <DIO_u8GetPinValue+0xbe>
    264c:	47 c0       	rjmp	.+142    	; 0x26dc <DIO_u8GetPinValue+0xe0>
	{
	    case DIO_u8_PORTA: Local_u8BitValue= GET_BIT(DIO_u8_PINA_REG,Copy_u8PinNumber); break;
    264e:	e9 e3       	ldi	r30, 0x39	; 57
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	28 2f       	mov	r18, r24
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	88 2f       	mov	r24, r24
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	a9 01       	movw	r20, r18
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <DIO_u8GetPinValue+0x6a>
    2662:	55 95       	asr	r21
    2664:	47 95       	ror	r20
    2666:	8a 95       	dec	r24
    2668:	e2 f7       	brpl	.-8      	; 0x2662 <DIO_u8GetPinValue+0x66>
    266a:	ca 01       	movw	r24, r20
    266c:	81 70       	andi	r24, 0x01	; 1
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	35 c0       	rjmp	.+106    	; 0x26dc <DIO_u8GetPinValue+0xe0>
	    case DIO_u8_PORTB: Local_u8BitValue= GET_BIT(DIO_u8_PINB_REG,Copy_u8PinNumber); break;
    2672:	e6 e3       	ldi	r30, 0x36	; 54
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	88 2f       	mov	r24, r24
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	a9 01       	movw	r20, r18
    2684:	02 c0       	rjmp	.+4      	; 0x268a <DIO_u8GetPinValue+0x8e>
    2686:	55 95       	asr	r21
    2688:	47 95       	ror	r20
    268a:	8a 95       	dec	r24
    268c:	e2 f7       	brpl	.-8      	; 0x2686 <DIO_u8GetPinValue+0x8a>
    268e:	ca 01       	movw	r24, r20
    2690:	81 70       	andi	r24, 0x01	; 1
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	23 c0       	rjmp	.+70     	; 0x26dc <DIO_u8GetPinValue+0xe0>
		case DIO_u8_PORTC: Local_u8BitValue= GET_BIT(DIO_u8_PINC_REG,Copy_u8PinNumber); break;
    2696:	e3 e3       	ldi	r30, 0x33	; 51
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	88 2f       	mov	r24, r24
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	a9 01       	movw	r20, r18
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <DIO_u8GetPinValue+0xb2>
    26aa:	55 95       	asr	r21
    26ac:	47 95       	ror	r20
    26ae:	8a 95       	dec	r24
    26b0:	e2 f7       	brpl	.-8      	; 0x26aa <DIO_u8GetPinValue+0xae>
    26b2:	ca 01       	movw	r24, r20
    26b4:	81 70       	andi	r24, 0x01	; 1
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	11 c0       	rjmp	.+34     	; 0x26dc <DIO_u8GetPinValue+0xe0>
		case DIO_u8_PORTD: Local_u8BitValue= GET_BIT(DIO_u8_PIND_REG,Copy_u8PinNumber); break;
    26ba:	e0 e3       	ldi	r30, 0x30	; 48
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	88 2f       	mov	r24, r24
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	a9 01       	movw	r20, r18
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <DIO_u8GetPinValue+0xd6>
    26ce:	55 95       	asr	r21
    26d0:	47 95       	ror	r20
    26d2:	8a 95       	dec	r24
    26d4:	e2 f7       	brpl	.-8      	; 0x26ce <DIO_u8GetPinValue+0xd2>
    26d6:	ca 01       	movw	r24, r20
    26d8:	81 70       	andi	r24, 0x01	; 1
    26da:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8BitValue;
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue(u8 Copy_u8PortNumber ,u8 Copy_u8PinNumber)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <DIO_voidTogglePinValue+0x6>
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <DIO_voidTogglePinValue+0x8>
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortNumber)
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	3c 83       	std	Y+4, r19	; 0x04
    2706:	2b 83       	std	Y+3, r18	; 0x03
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	91 05       	cpc	r25, r1
    2710:	49 f1       	breq	.+82     	; 0x2764 <DIO_voidTogglePinValue+0x76>
    2712:	2b 81       	ldd	r18, Y+3	; 0x03
    2714:	3c 81       	ldd	r19, Y+4	; 0x04
    2716:	22 30       	cpi	r18, 0x02	; 2
    2718:	31 05       	cpc	r19, r1
    271a:	2c f4       	brge	.+10     	; 0x2726 <DIO_voidTogglePinValue+0x38>
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	61 f0       	breq	.+24     	; 0x273c <DIO_voidTogglePinValue+0x4e>
    2724:	5a c0       	rjmp	.+180    	; 0x27da <DIO_voidTogglePinValue+0xec>
    2726:	2b 81       	ldd	r18, Y+3	; 0x03
    2728:	3c 81       	ldd	r19, Y+4	; 0x04
    272a:	22 30       	cpi	r18, 0x02	; 2
    272c:	31 05       	cpc	r19, r1
    272e:	71 f1       	breq	.+92     	; 0x278c <DIO_voidTogglePinValue+0x9e>
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	83 30       	cpi	r24, 0x03	; 3
    2736:	91 05       	cpc	r25, r1
    2738:	e9 f1       	breq	.+122    	; 0x27b4 <DIO_voidTogglePinValue+0xc6>
    273a:	4f c0       	rjmp	.+158    	; 0x27da <DIO_voidTogglePinValue+0xec>
	{
		  case DIO_u8_PORTA: TOOGLE_BIT(DIO_u8_PORTA_REG,Copy_u8PinNumber); break;
    273c:	ab e3       	ldi	r26, 0x3B	; 59
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	eb e3       	ldi	r30, 0x3B	; 59
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	48 2f       	mov	r20, r24
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	28 2f       	mov	r18, r24
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	02 2e       	mov	r0, r18
    2754:	02 c0       	rjmp	.+4      	; 0x275a <DIO_voidTogglePinValue+0x6c>
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	0a 94       	dec	r0
    275c:	e2 f7       	brpl	.-8      	; 0x2756 <DIO_voidTogglePinValue+0x68>
    275e:	84 27       	eor	r24, r20
    2760:	8c 93       	st	X, r24
    2762:	3b c0       	rjmp	.+118    	; 0x27da <DIO_voidTogglePinValue+0xec>
		  case DIO_u8_PORTB: TOOGLE_BIT(DIO_u8_PORTB_REG,Copy_u8PinNumber); break;
    2764:	a8 e3       	ldi	r26, 0x38	; 56
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	e8 e3       	ldi	r30, 0x38	; 56
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	48 2f       	mov	r20, r24
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	02 2e       	mov	r0, r18
    277c:	02 c0       	rjmp	.+4      	; 0x2782 <DIO_voidTogglePinValue+0x94>
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	0a 94       	dec	r0
    2784:	e2 f7       	brpl	.-8      	; 0x277e <DIO_voidTogglePinValue+0x90>
    2786:	84 27       	eor	r24, r20
    2788:	8c 93       	st	X, r24
    278a:	27 c0       	rjmp	.+78     	; 0x27da <DIO_voidTogglePinValue+0xec>
		  case DIO_u8_PORTC: TOOGLE_BIT(DIO_u8_PORTC_REG,Copy_u8PinNumber); break;
    278c:	a5 e3       	ldi	r26, 0x35	; 53
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	e5 e3       	ldi	r30, 0x35	; 53
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	48 2f       	mov	r20, r24
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	02 2e       	mov	r0, r18
    27a4:	02 c0       	rjmp	.+4      	; 0x27aa <DIO_voidTogglePinValue+0xbc>
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	0a 94       	dec	r0
    27ac:	e2 f7       	brpl	.-8      	; 0x27a6 <DIO_voidTogglePinValue+0xb8>
    27ae:	84 27       	eor	r24, r20
    27b0:	8c 93       	st	X, r24
    27b2:	13 c0       	rjmp	.+38     	; 0x27da <DIO_voidTogglePinValue+0xec>
		  case DIO_u8_PORTD: TOOGLE_BIT(DIO_u8_PORTD_REG,Copy_u8PinNumber); break;
    27b4:	a2 e3       	ldi	r26, 0x32	; 50
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e2 e3       	ldi	r30, 0x32	; 50
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	48 2f       	mov	r20, r24
    27c0:	8a 81       	ldd	r24, Y+2	; 0x02
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	02 2e       	mov	r0, r18
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <DIO_voidTogglePinValue+0xe4>
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	0a 94       	dec	r0
    27d4:	e2 f7       	brpl	.-8      	; 0x27ce <DIO_voidTogglePinValue+0xe0>
    27d6:	84 27       	eor	r24, r20
    27d8:	8c 93       	st	X, r24
	}
}
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <DIO_voidSetPortDirection>:
/***************************************************************************************************/
void DIO_voidSetPortDirection(u8 Copy_u8PortNumber ,u8 Copy_u8PortDirection)
{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	00 d0       	rcall	.+0      	; 0x27ee <DIO_voidSetPortDirection+0x6>
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <DIO_voidSetPortDirection+0x8>
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	89 83       	std	Y+1, r24	; 0x01
    27f6:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortNumber)
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	3c 83       	std	Y+4, r19	; 0x04
    2800:	2b 83       	std	Y+3, r18	; 0x03
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	91 05       	cpc	r25, r1
    280a:	d1 f0       	breq	.+52     	; 0x2840 <DIO_voidSetPortDirection+0x58>
    280c:	2b 81       	ldd	r18, Y+3	; 0x03
    280e:	3c 81       	ldd	r19, Y+4	; 0x04
    2810:	22 30       	cpi	r18, 0x02	; 2
    2812:	31 05       	cpc	r19, r1
    2814:	2c f4       	brge	.+10     	; 0x2820 <DIO_voidSetPortDirection+0x38>
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	9c 81       	ldd	r25, Y+4	; 0x04
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	61 f0       	breq	.+24     	; 0x2836 <DIO_voidSetPortDirection+0x4e>
    281e:	1e c0       	rjmp	.+60     	; 0x285c <DIO_voidSetPortDirection+0x74>
    2820:	2b 81       	ldd	r18, Y+3	; 0x03
    2822:	3c 81       	ldd	r19, Y+4	; 0x04
    2824:	22 30       	cpi	r18, 0x02	; 2
    2826:	31 05       	cpc	r19, r1
    2828:	81 f0       	breq	.+32     	; 0x284a <DIO_voidSetPortDirection+0x62>
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	83 30       	cpi	r24, 0x03	; 3
    2830:	91 05       	cpc	r25, r1
    2832:	81 f0       	breq	.+32     	; 0x2854 <DIO_voidSetPortDirection+0x6c>
    2834:	13 c0       	rjmp	.+38     	; 0x285c <DIO_voidSetPortDirection+0x74>
	{
		  case DIO_u8_PORTA: DIO_u8_DDRA_REG = Copy_u8PortDirection; break;
    2836:	ea e3       	ldi	r30, 0x3A	; 58
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	80 83       	st	Z, r24
    283e:	0e c0       	rjmp	.+28     	; 0x285c <DIO_voidSetPortDirection+0x74>
		  case DIO_u8_PORTB: DIO_u8_DDRB_REG = Copy_u8PortDirection; break;
    2840:	e7 e3       	ldi	r30, 0x37	; 55
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	80 83       	st	Z, r24
    2848:	09 c0       	rjmp	.+18     	; 0x285c <DIO_voidSetPortDirection+0x74>
		  case DIO_u8_PORTC: DIO_u8_DDRC_REG = Copy_u8PortDirection; break;
    284a:	e4 e3       	ldi	r30, 0x34	; 52
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	80 83       	st	Z, r24
    2852:	04 c0       	rjmp	.+8      	; 0x285c <DIO_voidSetPortDirection+0x74>
		  case DIO_u8_PORTD: DIO_u8_DDRD_REG = Copy_u8PortDirection; break;
    2854:	e1 e3       	ldi	r30, 0x31	; 49
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	80 83       	st	Z, r24
	}
}
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 Copy_u8PortNumber ,u8 Copy_u8PortValue)
{
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	00 d0       	rcall	.+0      	; 0x2870 <DIO_voidSetPortValue+0x6>
    2870:	00 d0       	rcall	.+0      	; 0x2872 <DIO_voidSetPortValue+0x8>
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortNumber)
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	3c 83       	std	Y+4, r19	; 0x04
    2882:	2b 83       	std	Y+3, r18	; 0x03
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	9c 81       	ldd	r25, Y+4	; 0x04
    2888:	81 30       	cpi	r24, 0x01	; 1
    288a:	91 05       	cpc	r25, r1
    288c:	d1 f0       	breq	.+52     	; 0x28c2 <DIO_voidSetPortValue+0x58>
    288e:	2b 81       	ldd	r18, Y+3	; 0x03
    2890:	3c 81       	ldd	r19, Y+4	; 0x04
    2892:	22 30       	cpi	r18, 0x02	; 2
    2894:	31 05       	cpc	r19, r1
    2896:	2c f4       	brge	.+10     	; 0x28a2 <DIO_voidSetPortValue+0x38>
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	61 f0       	breq	.+24     	; 0x28b8 <DIO_voidSetPortValue+0x4e>
    28a0:	1e c0       	rjmp	.+60     	; 0x28de <DIO_voidSetPortValue+0x74>
    28a2:	2b 81       	ldd	r18, Y+3	; 0x03
    28a4:	3c 81       	ldd	r19, Y+4	; 0x04
    28a6:	22 30       	cpi	r18, 0x02	; 2
    28a8:	31 05       	cpc	r19, r1
    28aa:	81 f0       	breq	.+32     	; 0x28cc <DIO_voidSetPortValue+0x62>
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	83 30       	cpi	r24, 0x03	; 3
    28b2:	91 05       	cpc	r25, r1
    28b4:	81 f0       	breq	.+32     	; 0x28d6 <DIO_voidSetPortValue+0x6c>
    28b6:	13 c0       	rjmp	.+38     	; 0x28de <DIO_voidSetPortValue+0x74>
	{
		  case DIO_u8_PORTA: DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    28b8:	eb e3       	ldi	r30, 0x3B	; 59
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	80 83       	st	Z, r24
    28c0:	0e c0       	rjmp	.+28     	; 0x28de <DIO_voidSetPortValue+0x74>
		  case DIO_u8_PORTB: DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    28c2:	e8 e3       	ldi	r30, 0x38	; 56
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	80 83       	st	Z, r24
    28ca:	09 c0       	rjmp	.+18     	; 0x28de <DIO_voidSetPortValue+0x74>
		  case DIO_u8_PORTC: DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    28cc:	e5 e3       	ldi	r30, 0x35	; 53
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	80 83       	st	Z, r24
    28d4:	04 c0       	rjmp	.+8      	; 0x28de <DIO_voidSetPortValue+0x74>
		  case DIO_u8_PORTD: DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    28d6:	e2 e3       	ldi	r30, 0x32	; 50
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	80 83       	st	Z, r24

	}
}
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <DIO_u8GetPortValue>:
u8  DIO_u8GetPortValue (u8 Copy_u8PortNumber)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <DIO_u8GetPortValue+0x6>
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <DIO_u8GetPortValue+0x8>
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PortValue;
	switch (Copy_u8PortNumber)
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	3c 83       	std	Y+4, r19	; 0x04
    2902:	2b 83       	std	Y+3, r18	; 0x03
    2904:	8b 81       	ldd	r24, Y+3	; 0x03
    2906:	9c 81       	ldd	r25, Y+4	; 0x04
    2908:	81 30       	cpi	r24, 0x01	; 1
    290a:	91 05       	cpc	r25, r1
    290c:	d1 f0       	breq	.+52     	; 0x2942 <DIO_u8GetPortValue+0x56>
    290e:	2b 81       	ldd	r18, Y+3	; 0x03
    2910:	3c 81       	ldd	r19, Y+4	; 0x04
    2912:	22 30       	cpi	r18, 0x02	; 2
    2914:	31 05       	cpc	r19, r1
    2916:	2c f4       	brge	.+10     	; 0x2922 <DIO_u8GetPortValue+0x36>
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	9c 81       	ldd	r25, Y+4	; 0x04
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	61 f0       	breq	.+24     	; 0x2938 <DIO_u8GetPortValue+0x4c>
    2920:	1e c0       	rjmp	.+60     	; 0x295e <DIO_u8GetPortValue+0x72>
    2922:	2b 81       	ldd	r18, Y+3	; 0x03
    2924:	3c 81       	ldd	r19, Y+4	; 0x04
    2926:	22 30       	cpi	r18, 0x02	; 2
    2928:	31 05       	cpc	r19, r1
    292a:	81 f0       	breq	.+32     	; 0x294c <DIO_u8GetPortValue+0x60>
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	9c 81       	ldd	r25, Y+4	; 0x04
    2930:	83 30       	cpi	r24, 0x03	; 3
    2932:	91 05       	cpc	r25, r1
    2934:	81 f0       	breq	.+32     	; 0x2956 <DIO_u8GetPortValue+0x6a>
    2936:	13 c0       	rjmp	.+38     	; 0x295e <DIO_u8GetPortValue+0x72>
	{
		case DIO_u8_PORTA: Local_u8PortValue = DIO_u8_PINA_REG; break;
    2938:	e9 e3       	ldi	r30, 0x39	; 57
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	0e c0       	rjmp	.+28     	; 0x295e <DIO_u8GetPortValue+0x72>
		case DIO_u8_PORTB: Local_u8PortValue = DIO_u8_PINB_REG; break;
    2942:	e6 e3       	ldi	r30, 0x36	; 54
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	89 83       	std	Y+1, r24	; 0x01
    294a:	09 c0       	rjmp	.+18     	; 0x295e <DIO_u8GetPortValue+0x72>
		case DIO_u8_PORTC: Local_u8PortValue = DIO_u8_PINC_REG; break;
    294c:	e3 e3       	ldi	r30, 0x33	; 51
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	89 83       	std	Y+1, r24	; 0x01
    2954:	04 c0       	rjmp	.+8      	; 0x295e <DIO_u8GetPortValue+0x72>
		case DIO_u8_PORTD: Local_u8PortValue = DIO_u8_PIND_REG; break;
    2956:	e0 e3       	ldi	r30, 0x30	; 48
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8PortValue;
    295e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <ULTRASONIC_voidInit>:

u8 ULTRASONIC_u8EdgeCounter = 0;
u16 ULTRASONIC_u16TimeON = 0;

void ULTRASONIC_voidInit(void)
{
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
	GI_voidEnable();
    2976:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <GI_voidEnable>
	TIMER_voidTimer1ICUInit();
    297a:	0e 94 3e 10 	call	0x207c	; 0x207c <TIMER_voidTimer1ICUInit>
	TIMER_voidTimer1ICUSetCallBack(&ULTRASONIC_voidEdgeProcessing);
    297e:	87 ee       	ldi	r24, 0xE7	; 231
    2980:	95 e1       	ldi	r25, 0x15	; 21
    2982:	0e 94 92 10 	call	0x2124	; 0x2124 <TIMER_voidTimer1ICUSetCallBack>
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN6,DIO_u8_PIN_INPUT);
    2986:	83 e0       	ldi	r24, 0x03	; 3
    2988:	66 e0       	ldi	r22, 0x06	; 6
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8_PIN_OUTPUT);
    2990:	83 e0       	ldi	r24, 0x03	; 3
    2992:	65 e0       	ldi	r22, 0x05	; 5
    2994:	41 e0       	ldi	r20, 0x01	; 1
    2996:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8_LOW);
    299a:	83 e0       	ldi	r24, 0x03	; 3
    299c:	65 e0       	ldi	r22, 0x05	; 5
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <ULTRASONIC_voidTrigger>:
void ULTRASONIC_voidTrigger(void)
{
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
    29b2:	68 97       	sbiw	r28, 0x18	; 24
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8_HIGH);
    29be:	83 e0       	ldi	r24, 0x03	; 3
    29c0:	65 e0       	ldi	r22, 0x05	; 5
    29c2:	41 e0       	ldi	r20, 0x01	; 1
    29c4:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	a0 e2       	ldi	r26, 0x20	; 32
    29ce:	b1 e4       	ldi	r27, 0x41	; 65
    29d0:	8d 8b       	std	Y+21, r24	; 0x15
    29d2:	9e 8b       	std	Y+22, r25	; 0x16
    29d4:	af 8b       	std	Y+23, r26	; 0x17
    29d6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    29d8:	6d 89       	ldd	r22, Y+21	; 0x15
    29da:	7e 89       	ldd	r23, Y+22	; 0x16
    29dc:	8f 89       	ldd	r24, Y+23	; 0x17
    29de:	98 8d       	ldd	r25, Y+24	; 0x18
    29e0:	2b ea       	ldi	r18, 0xAB	; 171
    29e2:	3a ea       	ldi	r19, 0xAA	; 170
    29e4:	4a e2       	ldi	r20, 0x2A	; 42
    29e6:	50 e4       	ldi	r21, 0x40	; 64
    29e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	89 8b       	std	Y+17, r24	; 0x11
    29f2:	9a 8b       	std	Y+18, r25	; 0x12
    29f4:	ab 8b       	std	Y+19, r26	; 0x13
    29f6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    29f8:	69 89       	ldd	r22, Y+17	; 0x11
    29fa:	7a 89       	ldd	r23, Y+18	; 0x12
    29fc:	8b 89       	ldd	r24, Y+19	; 0x13
    29fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e8       	ldi	r20, 0x80	; 128
    2a06:	5f e3       	ldi	r21, 0x3F	; 63
    2a08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a0c:	88 23       	and	r24, r24
    2a0e:	1c f4       	brge	.+6      	; 0x2a16 <ULTRASONIC_voidTrigger+0x6c>
		__ticks = 1;
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	88 8b       	std	Y+16, r24	; 0x10
    2a14:	91 c0       	rjmp	.+290    	; 0x2b38 <ULTRASONIC_voidTrigger+0x18e>
	else if (__tmp > 255)
    2a16:	69 89       	ldd	r22, Y+17	; 0x11
    2a18:	7a 89       	ldd	r23, Y+18	; 0x12
    2a1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4f e7       	ldi	r20, 0x7F	; 127
    2a24:	53 e4       	ldi	r21, 0x43	; 67
    2a26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a2a:	18 16       	cp	r1, r24
    2a2c:	0c f0       	brlt	.+2      	; 0x2a30 <ULTRASONIC_voidTrigger+0x86>
    2a2e:	7b c0       	rjmp	.+246    	; 0x2b26 <ULTRASONIC_voidTrigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2a30:	6d 89       	ldd	r22, Y+21	; 0x15
    2a32:	7e 89       	ldd	r23, Y+22	; 0x16
    2a34:	8f 89       	ldd	r24, Y+23	; 0x17
    2a36:	98 8d       	ldd	r25, Y+24	; 0x18
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	4a e7       	ldi	r20, 0x7A	; 122
    2a3e:	54 e4       	ldi	r21, 0x44	; 68
    2a40:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8c 87       	std	Y+12, r24	; 0x0c
    2a4a:	9d 87       	std	Y+13, r25	; 0x0d
    2a4c:	ae 87       	std	Y+14, r26	; 0x0e
    2a4e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a50:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a52:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a54:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a56:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	4a ef       	ldi	r20, 0xFA	; 250
    2a5e:	54 e4       	ldi	r21, 0x44	; 68
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	88 87       	std	Y+8, r24	; 0x08
    2a6a:	99 87       	std	Y+9, r25	; 0x09
    2a6c:	aa 87       	std	Y+10, r26	; 0x0a
    2a6e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2a70:	68 85       	ldd	r22, Y+8	; 0x08
    2a72:	79 85       	ldd	r23, Y+9	; 0x09
    2a74:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a76:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e8       	ldi	r20, 0x80	; 128
    2a7e:	5f e3       	ldi	r21, 0x3F	; 63
    2a80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a84:	88 23       	and	r24, r24
    2a86:	2c f4       	brge	.+10     	; 0x2a92 <ULTRASONIC_voidTrigger+0xe8>
		__ticks = 1;
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	9f 83       	std	Y+7, r25	; 0x07
    2a8e:	8e 83       	std	Y+6, r24	; 0x06
    2a90:	3f c0       	rjmp	.+126    	; 0x2b10 <ULTRASONIC_voidTrigger+0x166>
	else if (__tmp > 65535)
    2a92:	68 85       	ldd	r22, Y+8	; 0x08
    2a94:	79 85       	ldd	r23, Y+9	; 0x09
    2a96:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a98:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	3f ef       	ldi	r19, 0xFF	; 255
    2a9e:	4f e7       	ldi	r20, 0x7F	; 127
    2aa0:	57 e4       	ldi	r21, 0x47	; 71
    2aa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa6:	18 16       	cp	r1, r24
    2aa8:	4c f5       	brge	.+82     	; 0x2afc <ULTRASONIC_voidTrigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aaa:	6c 85       	ldd	r22, Y+12	; 0x0c
    2aac:	7d 85       	ldd	r23, Y+13	; 0x0d
    2aae:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ab0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e2       	ldi	r20, 0x20	; 32
    2ab8:	51 e4       	ldi	r21, 0x41	; 65
    2aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	bc 01       	movw	r22, r24
    2ac4:	cd 01       	movw	r24, r26
    2ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	9f 83       	std	Y+7, r25	; 0x07
    2ad0:	8e 83       	std	Y+6, r24	; 0x06
    2ad2:	0f c0       	rjmp	.+30     	; 0x2af2 <ULTRASONIC_voidTrigger+0x148>
    2ad4:	88 ec       	ldi	r24, 0xC8	; 200
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9d 83       	std	Y+5, r25	; 0x05
    2ada:	8c 83       	std	Y+4, r24	; 0x04
    2adc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ade:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <ULTRASONIC_voidTrigger+0x136>
    2ae4:	9d 83       	std	Y+5, r25	; 0x05
    2ae6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aea:	9f 81       	ldd	r25, Y+7	; 0x07
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	9f 83       	std	Y+7, r25	; 0x07
    2af0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af2:	8e 81       	ldd	r24, Y+6	; 0x06
    2af4:	9f 81       	ldd	r25, Y+7	; 0x07
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	69 f7       	brne	.-38     	; 0x2ad4 <ULTRASONIC_voidTrigger+0x12a>
    2afa:	24 c0       	rjmp	.+72     	; 0x2b44 <ULTRASONIC_voidTrigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afc:	68 85       	ldd	r22, Y+8	; 0x08
    2afe:	79 85       	ldd	r23, Y+9	; 0x09
    2b00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b02:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	9f 83       	std	Y+7, r25	; 0x07
    2b0e:	8e 83       	std	Y+6, r24	; 0x06
    2b10:	8e 81       	ldd	r24, Y+6	; 0x06
    2b12:	9f 81       	ldd	r25, Y+7	; 0x07
    2b14:	9b 83       	std	Y+3, r25	; 0x03
    2b16:	8a 83       	std	Y+2, r24	; 0x02
    2b18:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <ULTRASONIC_voidTrigger+0x172>
    2b20:	9b 83       	std	Y+3, r25	; 0x03
    2b22:	8a 83       	std	Y+2, r24	; 0x02
    2b24:	0f c0       	rjmp	.+30     	; 0x2b44 <ULTRASONIC_voidTrigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b26:	69 89       	ldd	r22, Y+17	; 0x11
    2b28:	7a 89       	ldd	r23, Y+18	; 0x12
    2b2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	88 8b       	std	Y+16, r24	; 0x10
    2b38:	88 89       	ldd	r24, Y+16	; 0x10
    2b3a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	8a 95       	dec	r24
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <ULTRASONIC_voidTrigger+0x194>
    2b42:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8_LOW);
    2b44:	83 e0       	ldi	r24, 0x03	; 3
    2b46:	65 e0       	ldi	r22, 0x05	; 5
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    2b4e:	68 96       	adiw	r28, 0x18	; 24
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	de bf       	out	0x3e, r29	; 62
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	cd bf       	out	0x3d, r28	; 61
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	08 95       	ret

00002b60 <ULTRASONIC_u16GetDistance>:
u16 ULTRASONIC_u16GetDistance(void)
{
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <ULTRASONIC_u16GetDistance+0x6>
    2b66:	0f 92       	push	r0
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16Distance;
	for (u8 Local_u8Couter=0;Local_u8Couter<16;Local_u8Couter++)
    2b6c:	19 82       	std	Y+1, r1	; 0x01
    2b6e:	24 c0       	rjmp	.+72     	; 0x2bb8 <ULTRASONIC_u16GetDistance+0x58>
	{
		 ULTRASONIC_voidTrigger();
    2b70:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ULTRASONIC_voidTrigger>
		  * Prescaler F_CPU/8 for timer frequency.
		  * The timer gets incremented after 1 us time elapse.
		  * Distance (cm)= 17000 x (TIMER value) x 1 x 10^-6 cm
	      * Distance (cm)= (TIMER value) / 58 cm
	      * */
	     Local_u16Distance=(ULTRASONIC_u16TimeON/(57.828125)); /* Calculating Distance In cm */
    2b74:	80 91 77 01 	lds	r24, 0x0177
    2b78:	90 91 78 01 	lds	r25, 0x0178
    2b7c:	cc 01       	movw	r24, r24
    2b7e:	a0 e0       	ldi	r26, 0x00	; 0
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e5       	ldi	r19, 0x50	; 80
    2b96:	47 e6       	ldi	r20, 0x67	; 103
    2b98:	52 e4       	ldi	r21, 0x42	; 66
    2b9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	9b 83       	std	Y+3, r25	; 0x03
    2bb0:	8a 83       	std	Y+2, r24	; 0x02
	DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,DIO_u8_LOW);
}
u16 ULTRASONIC_u16GetDistance(void)
{
	u16 Local_u16Distance;
	for (u8 Local_u8Couter=0;Local_u8Couter<16;Local_u8Couter++)
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	8f 5f       	subi	r24, 0xFF	; 255
    2bb6:	89 83       	std	Y+1, r24	; 0x01
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	80 31       	cpi	r24, 0x10	; 16
    2bbc:	c8 f2       	brcs	.-78     	; 0x2b70 <ULTRASONIC_u16GetDistance+0x10>
		  * Distance (cm)= 17000 x (TIMER value) x 1 x 10^-6 cm
	      * Distance (cm)= (TIMER value) / 58 cm
	      * */
	     Local_u16Distance=(ULTRASONIC_u16TimeON/(57.828125)); /* Calculating Distance In cm */
	}
	return Local_u16Distance;
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <ULTRASONIC_voidEdgeProcessing>:
void ULTRASONIC_voidEdgeProcessing(void)
{
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
	ULTRASONIC_u8EdgeCounter++;
    2bd6:	80 91 76 01 	lds	r24, 0x0176
    2bda:	8f 5f       	subi	r24, 0xFF	; 255
    2bdc:	80 93 76 01 	sts	0x0176, r24
	if(ULTRASONIC_u8EdgeCounter == 1)
    2be0:	80 91 76 01 	lds	r24, 0x0176
    2be4:	81 30       	cpi	r24, 0x01	; 1
    2be6:	31 f4       	brne	.+12     	; 0x2bf4 <ULTRASONIC_voidEdgeProcessing+0x26>
	{
		TIMER_voidClearTimer1Value();
    2be8:	0e 94 a4 10 	call	0x2148	; 0x2148 <TIMER_voidClearTimer1Value>
		TIMER_voidTimer1ICUSetTriggerEdge(TIMER1_ICU_FALLING_EDGY_TYPE_MODE);
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	0e 94 68 10 	call	0x20d0	; 0x20d0 <TIMER_voidTimer1ICUSetTriggerEdge>
    2bf2:	11 c0       	rjmp	.+34     	; 0x2c16 <ULTRASONIC_voidEdgeProcessing+0x48>
	}
	else if(ULTRASONIC_u8EdgeCounter == 2)
    2bf4:	80 91 76 01 	lds	r24, 0x0176
    2bf8:	82 30       	cpi	r24, 0x02	; 2
    2bfa:	69 f4       	brne	.+26     	; 0x2c16 <ULTRASONIC_voidEdgeProcessing+0x48>
	{
		ULTRASONIC_u16TimeON = TIMER_voidTimer1ICUGetInputCaptureValue();
    2bfc:	0e 94 87 10 	call	0x210e	; 0x210e <TIMER_voidTimer1ICUGetInputCaptureValue>
    2c00:	90 93 78 01 	sts	0x0178, r25
    2c04:	80 93 77 01 	sts	0x0177, r24
		TIMER_voidClearTimer1Value();
    2c08:	0e 94 a4 10 	call	0x2148	; 0x2148 <TIMER_voidClearTimer1Value>
		ULTRASONIC_u8EdgeCounter=0;
    2c0c:	10 92 76 01 	sts	0x0176, r1
		TIMER_voidTimer1ICUSetTriggerEdge(TIMER1_ICU_RISING_EDGY_TYPE_MODE);
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	0e 94 68 10 	call	0x20d0	; 0x20d0 <TIMER_voidTimer1ICUSetTriggerEdge>
	}
}
    2c16:	cf 91       	pop	r28
    2c18:	df 91       	pop	r29
    2c1a:	08 95       	ret

00002c1c <SERVO_voidTimer1InitOCR1A>:
/* MCAL Layer */
#include "SERVO_interface.h"
#include "SERVO_private.h"
#include "SERVO_config.h"
void SERVO_voidTimer1InitOCR1A(void)
{
    2c1c:	df 93       	push	r29
    2c1e:	cf 93       	push	r28
    2c20:	cd b7       	in	r28, 0x3d	; 61
    2c22:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN5,DIO_u8_PIN_OUTPUT);
    2c24:	83 e0       	ldi	r24, 0x03	; 3
    2c26:	65 e0       	ldi	r22, 0x05	; 5
    2c28:	41 e0       	ldi	r20, 0x01	; 1
    2c2a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	TIMER_voidTimer1Enable(TIMER1_MODE_FAST_PWM_ICR1,TIMER1_MODE_CHANNEL_A_CLEAR_OC1A,TIMER1_MODE_CHANNEL_B_NORMAL);
    2c2e:	8e e0       	ldi	r24, 0x0E	; 14
    2c30:	62 e0       	ldi	r22, 0x02	; 2
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <TIMER_voidTimer1Enable>
}
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	08 95       	ret

00002c3e <SERVO_voidTimer1InitOCR1B>:
void SERVO_voidTimer1InitOCR1B(void)
{
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN4,DIO_u8_PIN_OUTPUT);
    2c46:	83 e0       	ldi	r24, 0x03	; 3
    2c48:	64 e0       	ldi	r22, 0x04	; 4
    2c4a:	41 e0       	ldi	r20, 0x01	; 1
    2c4c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	TIMER_voidTimer1Enable(TIMER1_MODE_FAST_PWM_OCR1A,TIMER1_MODE_CHANNEL_A_NORMAL,TIMER1_MODE_CHANNEL_B_CLEAR_OC1B);
    2c50:	8f e0       	ldi	r24, 0x0F	; 15
    2c52:	60 e0       	ldi	r22, 0x00	; 0
    2c54:	42 e0       	ldi	r20, 0x02	; 2
    2c56:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <TIMER_voidTimer1Enable>
}
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	08 95       	ret

00002c60 <SERVO_voidTimer1ServoSetAngleOCR1A>:
void SERVO_voidTimer1ServoSetAngleOCR1A(u32 Copy_u32Angle)
{
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	28 97       	sbiw	r28, 0x08	; 8
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	6d 83       	std	Y+5, r22	; 0x05
    2c76:	7e 83       	std	Y+6, r23	; 0x06
    2c78:	8f 83       	std	Y+7, r24	; 0x07
    2c7a:	98 87       	std	Y+8, r25	; 0x08
	TIMER_voidTimer1SetICR1 (19999);
    2c7c:	8f e1       	ldi	r24, 0x1F	; 31
    2c7e:	9e e4       	ldi	r25, 0x4E	; 78
    2c80:	0e 94 27 10 	call	0x204e	; 0x204e <TIMER_voidTimer1SetICR1>
	u32 Local_u32AnglePulse = (((Copy_u32Angle * 1840 )/180)+480);
    2c84:	8d 81       	ldd	r24, Y+5	; 0x05
    2c86:	9e 81       	ldd	r25, Y+6	; 0x06
    2c88:	af 81       	ldd	r26, Y+7	; 0x07
    2c8a:	b8 85       	ldd	r27, Y+8	; 0x08
    2c8c:	20 e3       	ldi	r18, 0x30	; 48
    2c8e:	37 e0       	ldi	r19, 0x07	; 7
    2c90:	40 e0       	ldi	r20, 0x00	; 0
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	bc 01       	movw	r22, r24
    2c96:	cd 01       	movw	r24, r26
    2c98:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__mulsi3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	24 eb       	ldi	r18, 0xB4	; 180
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 bf 31 	call	0x637e	; 0x637e <__udivmodsi4>
    2cb0:	da 01       	movw	r26, r20
    2cb2:	c9 01       	movw	r24, r18
    2cb4:	80 52       	subi	r24, 0x20	; 32
    2cb6:	9e 4f       	sbci	r25, 0xFE	; 254
    2cb8:	af 4f       	sbci	r26, 0xFF	; 255
    2cba:	bf 4f       	sbci	r27, 0xFF	; 255
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	ab 83       	std	Y+3, r26	; 0x03
    2cc2:	bc 83       	std	Y+4, r27	; 0x04
	TIMER_voidTimer1SetOCR1A(Local_u32AnglePulse);
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc8:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <TIMER_voidTimer1SetOCR1A>
}
    2ccc:	28 96       	adiw	r28, 0x08	; 8
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	08 95       	ret

00002cde <SERVO_voidTimer1ServoSetAngleOCR1B>:
void SERVO_voidTimer1ServoSetAngleOCR1B(u32 Copy_u32Angle)
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	28 97       	sbiw	r28, 0x08	; 8
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	6d 83       	std	Y+5, r22	; 0x05
    2cf4:	7e 83       	std	Y+6, r23	; 0x06
    2cf6:	8f 83       	std	Y+7, r24	; 0x07
    2cf8:	98 87       	std	Y+8, r25	; 0x08
	TIMER_voidTimer1SetOCR1A (19999);
    2cfa:	8f e1       	ldi	r24, 0x1F	; 31
    2cfc:	9e e4       	ldi	r25, 0x4E	; 78
    2cfe:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <TIMER_voidTimer1SetOCR1A>
	u32 Local_u32AnglePulse = (((Copy_u32Angle * 1840 )/180)+480);
    2d02:	8d 81       	ldd	r24, Y+5	; 0x05
    2d04:	9e 81       	ldd	r25, Y+6	; 0x06
    2d06:	af 81       	ldd	r26, Y+7	; 0x07
    2d08:	b8 85       	ldd	r27, Y+8	; 0x08
    2d0a:	20 e3       	ldi	r18, 0x30	; 48
    2d0c:	37 e0       	ldi	r19, 0x07	; 7
    2d0e:	40 e0       	ldi	r20, 0x00	; 0
    2d10:	50 e0       	ldi	r21, 0x00	; 0
    2d12:	bc 01       	movw	r22, r24
    2d14:	cd 01       	movw	r24, r26
    2d16:	0e 94 79 31 	call	0x62f2	; 0x62f2 <__mulsi3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	24 eb       	ldi	r18, 0xB4	; 180
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e0       	ldi	r20, 0x00	; 0
    2d24:	50 e0       	ldi	r21, 0x00	; 0
    2d26:	bc 01       	movw	r22, r24
    2d28:	cd 01       	movw	r24, r26
    2d2a:	0e 94 bf 31 	call	0x637e	; 0x637e <__udivmodsi4>
    2d2e:	da 01       	movw	r26, r20
    2d30:	c9 01       	movw	r24, r18
    2d32:	80 52       	subi	r24, 0x20	; 32
    2d34:	9e 4f       	sbci	r25, 0xFE	; 254
    2d36:	af 4f       	sbci	r26, 0xFF	; 255
    2d38:	bf 4f       	sbci	r27, 0xFF	; 255
    2d3a:	89 83       	std	Y+1, r24	; 0x01
    2d3c:	9a 83       	std	Y+2, r25	; 0x02
    2d3e:	ab 83       	std	Y+3, r26	; 0x03
    2d40:	bc 83       	std	Y+4, r27	; 0x04
	TIMER_voidTimer1SetOCR1B(Local_u32AnglePulse);
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	9a 81       	ldd	r25, Y+2	; 0x02
    2d46:	0e 94 15 10 	call	0x202a	; 0x202a <TIMER_voidTimer1SetOCR1B>
}
    2d4a:	28 96       	adiw	r28, 0x08	; 8
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	08 95       	ret

00002d5c <BUZZER_voidBuzzer_Work>:
#include "BUZZER_interface.h"
#include "BUZZER_private.h"
#include "BUZZER_config.h"

void BUZZER_voidBuzzer_Work(u8 copy_u8Sound)
{
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <BUZZER_voidBuzzer_Work+0x6>
    2d62:	0f 92       	push	r0
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8Sound)
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	3b 83       	std	Y+3, r19	; 0x03
    2d72:	2a 83       	std	Y+2, r18	; 0x02
    2d74:	8a 81       	ldd	r24, Y+2	; 0x02
    2d76:	9b 81       	ldd	r25, Y+3	; 0x03
    2d78:	00 97       	sbiw	r24, 0x00	; 0
    2d7a:	59 f0       	breq	.+22     	; 0x2d92 <BUZZER_voidBuzzer_Work+0x36>
    2d7c:	2a 81       	ldd	r18, Y+2	; 0x02
    2d7e:	3b 81       	ldd	r19, Y+3	; 0x03
    2d80:	21 30       	cpi	r18, 0x01	; 1
    2d82:	31 05       	cpc	r19, r1
    2d84:	59 f4       	brne	.+22     	; 0x2d9c <BUZZER_voidBuzzer_Work+0x40>
	{
	case BUZZER_ON : 	DIO_voidSetPinValue(BUZZER_PORT , BUZZER_PIN , DIO_u8_HIGH); break ;
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	65 e0       	ldi	r22, 0x05	; 5
    2d8a:	41 e0       	ldi	r20, 0x01	; 1
    2d8c:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
    2d90:	05 c0       	rjmp	.+10     	; 0x2d9c <BUZZER_voidBuzzer_Work+0x40>
	case BUZZER_OFF : 	DIO_voidSetPinValue(BUZZER_PORT , BUZZER_PIN , DIO_u8_LOW); break ;
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	65 e0       	ldi	r22, 0x05	; 5
    2d96:	40 e0       	ldi	r20, 0x00	; 0
    2d98:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	}
}
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	cf 91       	pop	r28
    2da4:	df 91       	pop	r29
    2da6:	08 95       	ret

00002da8 <Robot_voidSpeed>:
/* Init modes Speeds*/
#define Robot_u8_INIT_SPEED                        60 	/* 60 % */
#define Robot_u8_ObstacleAvoidingMode_SPEED        60  	/* 60 % */
/****************************************************************** Speed ******************************************************************/
void Robot_voidSpeed(u8 Copy_u8SpeedIntinsty)
{
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	0f 92       	push	r0
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	89 83       	std	Y+1, r24	; 0x01
	/* Speed control by Timer0 and Timer2 */
	TIMER_voidTimer0GeneratePWM(Copy_u8SpeedIntinsty);
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	88 2f       	mov	r24, r24
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	a0 e0       	ldi	r26, 0x00	; 0
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
    2dbe:	bc 01       	movw	r22, r24
    2dc0:	cd 01       	movw	r24, r26
    2dc2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	0e 94 cb 08 	call	0x1196	; 0x1196 <TIMER_voidTimer0GeneratePWM>
	TIMER_voidTimer2GeneratePWM(Copy_u8SpeedIntinsty);
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
    2dd4:	88 2f       	mov	r24, r24
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	a0 e0       	ldi	r26, 0x00	; 0
    2dda:	b0 e0       	ldi	r27, 0x00	; 0
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	bc 01       	movw	r22, r24
    2dea:	cd 01       	movw	r24, r26
    2dec:	0e 94 0d 0a 	call	0x141a	; 0x141a <TIMER_voidTimer2GeneratePWM>
}
    2df0:	0f 90       	pop	r0
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <Robot_voidStop>:
/************************************************************* Directions ******************************************************************/
void Robot_voidStop(void)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
	/* Stop motors */
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_LOW);
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	60 e0       	ldi	r22, 0x00	; 0
    2e04:	40 e0       	ldi	r20, 0x00	; 0
    2e06:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_LOW);
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	61 e0       	ldi	r22, 0x01	; 1
    2e0e:	40 e0       	ldi	r20, 0x00	; 0
    2e10:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_LOW);
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	62 e0       	ldi	r22, 0x02	; 2
    2e18:	40 e0       	ldi	r20, 0x00	; 0
    2e1a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_LOW);
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	63 e0       	ldi	r22, 0x03	; 3
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	08 95       	ret

00002e2e <Robot_voidForward>:
void Robot_voidForward(void)
{
    2e2e:	df 93       	push	r29
    2e30:	cf 93       	push	r28
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
	/* all motors forward */
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_LOW);
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	40 e0       	ldi	r20, 0x00	; 0
    2e3c:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_HIGH);
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	61 e0       	ldi	r22, 0x01	; 1
    2e44:	41 e0       	ldi	r20, 0x01	; 1
    2e46:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_LOW);
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	62 e0       	ldi	r22, 0x02	; 2
    2e4e:	40 e0       	ldi	r20, 0x00	; 0
    2e50:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_HIGH);
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	63 e0       	ldi	r22, 0x03	; 3
    2e58:	41 e0       	ldi	r20, 0x01	; 1
    2e5a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <Robot_voidBackward>:
void Robot_voidBackward(void)
{
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
	/* all motors Backward */
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_HIGH);
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	60 e0       	ldi	r22, 0x00	; 0
    2e70:	41 e0       	ldi	r20, 0x01	; 1
    2e72:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_LOW);
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	61 e0       	ldi	r22, 0x01	; 1
    2e7a:	40 e0       	ldi	r20, 0x00	; 0
    2e7c:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_HIGH);
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	62 e0       	ldi	r22, 0x02	; 2
    2e84:	41 e0       	ldi	r20, 0x01	; 1
    2e86:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_LOW);
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	63 e0       	ldi	r22, 0x03	; 3
    2e8e:	40 e0       	ldi	r20, 0x00	; 0
    2e90:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    2e94:	cf 91       	pop	r28
    2e96:	df 91       	pop	r29
    2e98:	08 95       	ret

00002e9a <Robot_voidLeft>:
void Robot_voidLeft(void)
{
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
	/* Left motors forward and Right motors Backward */
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_HIGH);
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	60 e0       	ldi	r22, 0x00	; 0
    2ea6:	41 e0       	ldi	r20, 0x01	; 1
    2ea8:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_LOW);
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	61 e0       	ldi	r22, 0x01	; 1
    2eb0:	40 e0       	ldi	r20, 0x00	; 0
    2eb2:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_LOW);
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	62 e0       	ldi	r22, 0x02	; 2
    2eba:	40 e0       	ldi	r20, 0x00	; 0
    2ebc:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_HIGH);
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	63 e0       	ldi	r22, 0x03	; 3
    2ec4:	41 e0       	ldi	r20, 0x01	; 1
    2ec6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    2eca:	cf 91       	pop	r28
    2ecc:	df 91       	pop	r29
    2ece:	08 95       	ret

00002ed0 <Robot_voidRight>:
void Robot_voidRight(void)
{
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
	/* Left motors Backward and Right motors forward */
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_LOW);
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	60 e0       	ldi	r22, 0x00	; 0
    2edc:	40 e0       	ldi	r20, 0x00	; 0
    2ede:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_HIGH);
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	61 e0       	ldi	r22, 0x01	; 1
    2ee6:	41 e0       	ldi	r20, 0x01	; 1
    2ee8:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_HIGH);
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	62 e0       	ldi	r22, 0x02	; 2
    2ef0:	41 e0       	ldi	r20, 0x01	; 1
    2ef2:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_LOW);
    2ef6:	80 e0       	ldi	r24, 0x00	; 0
    2ef8:	63 e0       	ldi	r22, 0x03	; 3
    2efa:	40 e0       	ldi	r20, 0x00	; 0
    2efc:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
}
    2f00:	cf 91       	pop	r28
    2f02:	df 91       	pop	r29
    2f04:	08 95       	ret

00002f06 <Robot_voidStep>:
void Robot_voidStep(void)
{
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	2e 97       	sbiw	r28, 0x0e	; 14
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	cd bf       	out	0x3d, r28	; 61
	/* After Stop take Step */
	Robot_voidSpeed(60);
    2f1a:	8c e3       	ldi	r24, 0x3C	; 60
    2f1c:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <Robot_voidSpeed>
	Robot_voidForward();
    2f20:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <Robot_voidForward>
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	aa e2       	ldi	r26, 0x2A	; 42
    2f2a:	b3 e4       	ldi	r27, 0x43	; 67
    2f2c:	8b 87       	std	Y+11, r24	; 0x0b
    2f2e:	9c 87       	std	Y+12, r25	; 0x0c
    2f30:	ad 87       	std	Y+13, r26	; 0x0d
    2f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	4a ef       	ldi	r20, 0xFA	; 250
    2f42:	54 e4       	ldi	r21, 0x44	; 68
    2f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	8f 83       	std	Y+7, r24	; 0x07
    2f4e:	98 87       	std	Y+8, r25	; 0x08
    2f50:	a9 87       	std	Y+9, r26	; 0x09
    2f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f54:	6f 81       	ldd	r22, Y+7	; 0x07
    2f56:	78 85       	ldd	r23, Y+8	; 0x08
    2f58:	89 85       	ldd	r24, Y+9	; 0x09
    2f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e8       	ldi	r20, 0x80	; 128
    2f62:	5f e3       	ldi	r21, 0x3F	; 63
    2f64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f68:	88 23       	and	r24, r24
    2f6a:	2c f4       	brge	.+10     	; 0x2f76 <Robot_voidStep+0x70>
		__ticks = 1;
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9e 83       	std	Y+6, r25	; 0x06
    2f72:	8d 83       	std	Y+5, r24	; 0x05
    2f74:	3f c0       	rjmp	.+126    	; 0x2ff4 <Robot_voidStep+0xee>
	else if (__tmp > 65535)
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	3f ef       	ldi	r19, 0xFF	; 255
    2f82:	4f e7       	ldi	r20, 0x7F	; 127
    2f84:	57 e4       	ldi	r21, 0x47	; 71
    2f86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f8a:	18 16       	cp	r1, r24
    2f8c:	4c f5       	brge	.+82     	; 0x2fe0 <Robot_voidStep+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e2       	ldi	r20, 0x20	; 32
    2f9c:	51 e4       	ldi	r21, 0x41	; 65
    2f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	9e 83       	std	Y+6, r25	; 0x06
    2fb4:	8d 83       	std	Y+5, r24	; 0x05
    2fb6:	0f c0       	rjmp	.+30     	; 0x2fd6 <Robot_voidStep+0xd0>
    2fb8:	88 ec       	ldi	r24, 0xC8	; 200
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	9c 83       	std	Y+4, r25	; 0x04
    2fbe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <Robot_voidStep+0xbe>
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fce:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	9e 83       	std	Y+6, r25	; 0x06
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fda:	00 97       	sbiw	r24, 0x00	; 0
    2fdc:	69 f7       	brne	.-38     	; 0x2fb8 <Robot_voidStep+0xb2>
    2fde:	14 c0       	rjmp	.+40     	; 0x3008 <Robot_voidStep+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe2:	78 85       	ldd	r23, Y+8	; 0x08
    2fe4:	89 85       	ldd	r24, Y+9	; 0x09
    2fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	9e 83       	std	Y+6, r25	; 0x06
    2ff2:	8d 83       	std	Y+5, r24	; 0x05
    2ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff8:	9a 83       	std	Y+2, r25	; 0x02
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <Robot_voidStep+0xfa>
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(170);
}
    3008:	2e 96       	adiw	r28, 0x0e	; 14
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	cf 91       	pop	r28
    3016:	df 91       	pop	r29
    3018:	08 95       	ret

0000301a <Robot_voidRight90>:
void Robot_voidRight90(void)
{
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	aa 97       	sbiw	r28, 0x2a	; 42
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	de bf       	out	0x3e, r29	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	cd bf       	out	0x3d, r28	; 61
	/* turn 90 degree Right */
	Robot_voidSpeed(60);
    302e:	8c e3       	ldi	r24, 0x3C	; 60
    3030:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <Robot_voidSpeed>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_LOW);
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	40 e0       	ldi	r20, 0x00	; 0
    303a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_HIGH);
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	61 e0       	ldi	r22, 0x01	; 1
    3042:	41 e0       	ldi	r20, 0x01	; 1
    3044:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_HIGH);
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	62 e0       	ldi	r22, 0x02	; 2
    304c:	41 e0       	ldi	r20, 0x01	; 1
    304e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_LOW);
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	63 e0       	ldi	r22, 0x03	; 3
    3056:	40 e0       	ldi	r20, 0x00	; 0
    3058:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	/* value of delay will change by change (voltage and arena) */
    BUZZER_voidBuzzer_Work(BUZZER_ON);
    305c:	81 e0       	ldi	r24, 0x01	; 1
    305e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	a8 e4       	ldi	r26, 0x48	; 72
    3068:	b3 e4       	ldi	r27, 0x43	; 67
    306a:	8f a3       	std	Y+39, r24	; 0x27
    306c:	98 a7       	std	Y+40, r25	; 0x28
    306e:	a9 a7       	std	Y+41, r26	; 0x29
    3070:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3072:	6f a1       	ldd	r22, Y+39	; 0x27
    3074:	78 a5       	ldd	r23, Y+40	; 0x28
    3076:	89 a5       	ldd	r24, Y+41	; 0x29
    3078:	9a a5       	ldd	r25, Y+42	; 0x2a
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	4a ef       	ldi	r20, 0xFA	; 250
    3080:	54 e4       	ldi	r21, 0x44	; 68
    3082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	8b a3       	std	Y+35, r24	; 0x23
    308c:	9c a3       	std	Y+36, r25	; 0x24
    308e:	ad a3       	std	Y+37, r26	; 0x25
    3090:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3092:	6b a1       	ldd	r22, Y+35	; 0x23
    3094:	7c a1       	ldd	r23, Y+36	; 0x24
    3096:	8d a1       	ldd	r24, Y+37	; 0x25
    3098:	9e a1       	ldd	r25, Y+38	; 0x26
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e8       	ldi	r20, 0x80	; 128
    30a0:	5f e3       	ldi	r21, 0x3F	; 63
    30a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a6:	88 23       	and	r24, r24
    30a8:	2c f4       	brge	.+10     	; 0x30b4 <Robot_voidRight90+0x9a>
		__ticks = 1;
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	9a a3       	std	Y+34, r25	; 0x22
    30b0:	89 a3       	std	Y+33, r24	; 0x21
    30b2:	3f c0       	rjmp	.+126    	; 0x3132 <Robot_voidRight90+0x118>
	else if (__tmp > 65535)
    30b4:	6b a1       	ldd	r22, Y+35	; 0x23
    30b6:	7c a1       	ldd	r23, Y+36	; 0x24
    30b8:	8d a1       	ldd	r24, Y+37	; 0x25
    30ba:	9e a1       	ldd	r25, Y+38	; 0x26
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	3f ef       	ldi	r19, 0xFF	; 255
    30c0:	4f e7       	ldi	r20, 0x7F	; 127
    30c2:	57 e4       	ldi	r21, 0x47	; 71
    30c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c8:	18 16       	cp	r1, r24
    30ca:	4c f5       	brge	.+82     	; 0x311e <Robot_voidRight90+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30cc:	6f a1       	ldd	r22, Y+39	; 0x27
    30ce:	78 a5       	ldd	r23, Y+40	; 0x28
    30d0:	89 a5       	ldd	r24, Y+41	; 0x29
    30d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e2       	ldi	r20, 0x20	; 32
    30da:	51 e4       	ldi	r21, 0x41	; 65
    30dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	bc 01       	movw	r22, r24
    30e6:	cd 01       	movw	r24, r26
    30e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	9a a3       	std	Y+34, r25	; 0x22
    30f2:	89 a3       	std	Y+33, r24	; 0x21
    30f4:	0f c0       	rjmp	.+30     	; 0x3114 <Robot_voidRight90+0xfa>
    30f6:	88 ec       	ldi	r24, 0xC8	; 200
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	98 a3       	std	Y+32, r25	; 0x20
    30fc:	8f 8f       	std	Y+31, r24	; 0x1f
    30fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3100:	98 a1       	ldd	r25, Y+32	; 0x20
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <Robot_voidRight90+0xe8>
    3106:	98 a3       	std	Y+32, r25	; 0x20
    3108:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310a:	89 a1       	ldd	r24, Y+33	; 0x21
    310c:	9a a1       	ldd	r25, Y+34	; 0x22
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	9a a3       	std	Y+34, r25	; 0x22
    3112:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3114:	89 a1       	ldd	r24, Y+33	; 0x21
    3116:	9a a1       	ldd	r25, Y+34	; 0x22
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	69 f7       	brne	.-38     	; 0x30f6 <Robot_voidRight90+0xdc>
    311c:	14 c0       	rjmp	.+40     	; 0x3146 <Robot_voidRight90+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    311e:	6b a1       	ldd	r22, Y+35	; 0x23
    3120:	7c a1       	ldd	r23, Y+36	; 0x24
    3122:	8d a1       	ldd	r24, Y+37	; 0x25
    3124:	9e a1       	ldd	r25, Y+38	; 0x26
    3126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	9a a3       	std	Y+34, r25	; 0x22
    3130:	89 a3       	std	Y+33, r24	; 0x21
    3132:	89 a1       	ldd	r24, Y+33	; 0x21
    3134:	9a a1       	ldd	r25, Y+34	; 0x22
    3136:	9e 8f       	std	Y+30, r25	; 0x1e
    3138:	8d 8f       	std	Y+29, r24	; 0x1d
    313a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    313c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    313e:	01 97       	sbiw	r24, 0x01	; 1
    3140:	f1 f7       	brne	.-4      	; 0x313e <Robot_voidRight90+0x124>
    3142:	9e 8f       	std	Y+30, r25	; 0x1e
    3144:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(200);
    BUZZER_voidBuzzer_Work(BUZZER_OFF);
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	a8 e4       	ldi	r26, 0x48	; 72
    3152:	b3 e4       	ldi	r27, 0x43	; 67
    3154:	89 8f       	std	Y+25, r24	; 0x19
    3156:	9a 8f       	std	Y+26, r25	; 0x1a
    3158:	ab 8f       	std	Y+27, r26	; 0x1b
    315a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315c:	69 8d       	ldd	r22, Y+25	; 0x19
    315e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	4a ef       	ldi	r20, 0xFA	; 250
    316a:	54 e4       	ldi	r21, 0x44	; 68
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	8d 8b       	std	Y+21, r24	; 0x15
    3176:	9e 8b       	std	Y+22, r25	; 0x16
    3178:	af 8b       	std	Y+23, r26	; 0x17
    317a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    317c:	6d 89       	ldd	r22, Y+21	; 0x15
    317e:	7e 89       	ldd	r23, Y+22	; 0x16
    3180:	8f 89       	ldd	r24, Y+23	; 0x17
    3182:	98 8d       	ldd	r25, Y+24	; 0x18
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e8       	ldi	r20, 0x80	; 128
    318a:	5f e3       	ldi	r21, 0x3F	; 63
    318c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3190:	88 23       	and	r24, r24
    3192:	2c f4       	brge	.+10     	; 0x319e <Robot_voidRight90+0x184>
		__ticks = 1;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9c 8b       	std	Y+20, r25	; 0x14
    319a:	8b 8b       	std	Y+19, r24	; 0x13
    319c:	3f c0       	rjmp	.+126    	; 0x321c <Robot_voidRight90+0x202>
	else if (__tmp > 65535)
    319e:	6d 89       	ldd	r22, Y+21	; 0x15
    31a0:	7e 89       	ldd	r23, Y+22	; 0x16
    31a2:	8f 89       	ldd	r24, Y+23	; 0x17
    31a4:	98 8d       	ldd	r25, Y+24	; 0x18
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	3f ef       	ldi	r19, 0xFF	; 255
    31aa:	4f e7       	ldi	r20, 0x7F	; 127
    31ac:	57 e4       	ldi	r21, 0x47	; 71
    31ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31b2:	18 16       	cp	r1, r24
    31b4:	4c f5       	brge	.+82     	; 0x3208 <Robot_voidRight90+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	69 8d       	ldd	r22, Y+25	; 0x19
    31b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e2       	ldi	r20, 0x20	; 32
    31c4:	51 e4       	ldi	r21, 0x41	; 65
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9c 8b       	std	Y+20, r25	; 0x14
    31dc:	8b 8b       	std	Y+19, r24	; 0x13
    31de:	0f c0       	rjmp	.+30     	; 0x31fe <Robot_voidRight90+0x1e4>
    31e0:	88 ec       	ldi	r24, 0xC8	; 200
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	9a 8b       	std	Y+18, r25	; 0x12
    31e6:	89 8b       	std	Y+17, r24	; 0x11
    31e8:	89 89       	ldd	r24, Y+17	; 0x11
    31ea:	9a 89       	ldd	r25, Y+18	; 0x12
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <Robot_voidRight90+0x1d2>
    31f0:	9a 8b       	std	Y+18, r25	; 0x12
    31f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f4:	8b 89       	ldd	r24, Y+19	; 0x13
    31f6:	9c 89       	ldd	r25, Y+20	; 0x14
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	9c 8b       	std	Y+20, r25	; 0x14
    31fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3200:	9c 89       	ldd	r25, Y+20	; 0x14
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	69 f7       	brne	.-38     	; 0x31e0 <Robot_voidRight90+0x1c6>
    3206:	14 c0       	rjmp	.+40     	; 0x3230 <Robot_voidRight90+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3208:	6d 89       	ldd	r22, Y+21	; 0x15
    320a:	7e 89       	ldd	r23, Y+22	; 0x16
    320c:	8f 89       	ldd	r24, Y+23	; 0x17
    320e:	98 8d       	ldd	r25, Y+24	; 0x18
    3210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	9c 8b       	std	Y+20, r25	; 0x14
    321a:	8b 8b       	std	Y+19, r24	; 0x13
    321c:	8b 89       	ldd	r24, Y+19	; 0x13
    321e:	9c 89       	ldd	r25, Y+20	; 0x14
    3220:	98 8b       	std	Y+16, r25	; 0x10
    3222:	8f 87       	std	Y+15, r24	; 0x0f
    3224:	8f 85       	ldd	r24, Y+15	; 0x0f
    3226:	98 89       	ldd	r25, Y+16	; 0x10
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	f1 f7       	brne	.-4      	; 0x3228 <Robot_voidRight90+0x20e>
    322c:	98 8b       	std	Y+16, r25	; 0x10
    322e:	8f 87       	std	Y+15, r24	; 0x0f
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	a8 ec       	ldi	r26, 0xC8	; 200
    3236:	b2 e4       	ldi	r27, 0x42	; 66
    3238:	8b 87       	std	Y+11, r24	; 0x0b
    323a:	9c 87       	std	Y+12, r25	; 0x0c
    323c:	ad 87       	std	Y+13, r26	; 0x0d
    323e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3240:	6b 85       	ldd	r22, Y+11	; 0x0b
    3242:	7c 85       	ldd	r23, Y+12	; 0x0c
    3244:	8d 85       	ldd	r24, Y+13	; 0x0d
    3246:	9e 85       	ldd	r25, Y+14	; 0x0e
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	4a ef       	ldi	r20, 0xFA	; 250
    324e:	54 e4       	ldi	r21, 0x44	; 68
    3250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	8f 83       	std	Y+7, r24	; 0x07
    325a:	98 87       	std	Y+8, r25	; 0x08
    325c:	a9 87       	std	Y+9, r26	; 0x09
    325e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3260:	6f 81       	ldd	r22, Y+7	; 0x07
    3262:	78 85       	ldd	r23, Y+8	; 0x08
    3264:	89 85       	ldd	r24, Y+9	; 0x09
    3266:	9a 85       	ldd	r25, Y+10	; 0x0a
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	40 e8       	ldi	r20, 0x80	; 128
    326e:	5f e3       	ldi	r21, 0x3F	; 63
    3270:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3274:	88 23       	and	r24, r24
    3276:	2c f4       	brge	.+10     	; 0x3282 <Robot_voidRight90+0x268>
		__ticks = 1;
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	9e 83       	std	Y+6, r25	; 0x06
    327e:	8d 83       	std	Y+5, r24	; 0x05
    3280:	3f c0       	rjmp	.+126    	; 0x3300 <Robot_voidRight90+0x2e6>
	else if (__tmp > 65535)
    3282:	6f 81       	ldd	r22, Y+7	; 0x07
    3284:	78 85       	ldd	r23, Y+8	; 0x08
    3286:	89 85       	ldd	r24, Y+9	; 0x09
    3288:	9a 85       	ldd	r25, Y+10	; 0x0a
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	3f ef       	ldi	r19, 0xFF	; 255
    328e:	4f e7       	ldi	r20, 0x7F	; 127
    3290:	57 e4       	ldi	r21, 0x47	; 71
    3292:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3296:	18 16       	cp	r1, r24
    3298:	4c f5       	brge	.+82     	; 0x32ec <Robot_voidRight90+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    329a:	6b 85       	ldd	r22, Y+11	; 0x0b
    329c:	7c 85       	ldd	r23, Y+12	; 0x0c
    329e:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	40 e2       	ldi	r20, 0x20	; 32
    32a8:	51 e4       	ldi	r21, 0x41	; 65
    32aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	bc 01       	movw	r22, r24
    32b4:	cd 01       	movw	r24, r26
    32b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	9e 83       	std	Y+6, r25	; 0x06
    32c0:	8d 83       	std	Y+5, r24	; 0x05
    32c2:	0f c0       	rjmp	.+30     	; 0x32e2 <Robot_voidRight90+0x2c8>
    32c4:	88 ec       	ldi	r24, 0xC8	; 200
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	9c 83       	std	Y+4, r25	; 0x04
    32ca:	8b 83       	std	Y+3, r24	; 0x03
    32cc:	8b 81       	ldd	r24, Y+3	; 0x03
    32ce:	9c 81       	ldd	r25, Y+4	; 0x04
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <Robot_voidRight90+0x2b6>
    32d4:	9c 83       	std	Y+4, r25	; 0x04
    32d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d8:	8d 81       	ldd	r24, Y+5	; 0x05
    32da:	9e 81       	ldd	r25, Y+6	; 0x06
    32dc:	01 97       	sbiw	r24, 0x01	; 1
    32de:	9e 83       	std	Y+6, r25	; 0x06
    32e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e2:	8d 81       	ldd	r24, Y+5	; 0x05
    32e4:	9e 81       	ldd	r25, Y+6	; 0x06
    32e6:	00 97       	sbiw	r24, 0x00	; 0
    32e8:	69 f7       	brne	.-38     	; 0x32c4 <Robot_voidRight90+0x2aa>
    32ea:	14 c0       	rjmp	.+40     	; 0x3314 <Robot_voidRight90+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ec:	6f 81       	ldd	r22, Y+7	; 0x07
    32ee:	78 85       	ldd	r23, Y+8	; 0x08
    32f0:	89 85       	ldd	r24, Y+9	; 0x09
    32f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	9e 83       	std	Y+6, r25	; 0x06
    32fe:	8d 83       	std	Y+5, r24	; 0x05
    3300:	8d 81       	ldd	r24, Y+5	; 0x05
    3302:	9e 81       	ldd	r25, Y+6	; 0x06
    3304:	9a 83       	std	Y+2, r25	; 0x02
    3306:	89 83       	std	Y+1, r24	; 0x01
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	9a 81       	ldd	r25, Y+2	; 0x02
    330c:	01 97       	sbiw	r24, 0x01	; 1
    330e:	f1 f7       	brne	.-4      	; 0x330c <Robot_voidRight90+0x2f2>
    3310:	9a 83       	std	Y+2, r25	; 0x02
    3312:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(200);
	_delay_ms(100);
	Robot_voidStop();
    3314:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <Robot_voidStop>
	Robot_voidSpeed(Robot_u8_INIT_SPEED);
    3318:	8c e3       	ldi	r24, 0x3C	; 60
    331a:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <Robot_voidSpeed>

}
    331e:	aa 96       	adiw	r28, 0x2a	; 42
    3320:	0f b6       	in	r0, 0x3f	; 63
    3322:	f8 94       	cli
    3324:	de bf       	out	0x3e, r29	; 62
    3326:	0f be       	out	0x3f, r0	; 63
    3328:	cd bf       	out	0x3d, r28	; 61
    332a:	cf 91       	pop	r28
    332c:	df 91       	pop	r29
    332e:	08 95       	ret

00003330 <Robot_voidLeft90>:
void Robot_voidLeft90(void)
{
    3330:	df 93       	push	r29
    3332:	cf 93       	push	r28
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	aa 97       	sbiw	r28, 0x2a	; 42
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
	/* turn 90 degree Left */
	Robot_voidSpeed(60);
    3344:	8c e3       	ldi	r24, 0x3C	; 60
    3346:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <Robot_voidSpeed>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_HIGH);
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	60 e0       	ldi	r22, 0x00	; 0
    334e:	41 e0       	ldi	r20, 0x01	; 1
    3350:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_LOW);
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	61 e0       	ldi	r22, 0x01	; 1
    3358:	40 e0       	ldi	r20, 0x00	; 0
    335a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_LOW);
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	62 e0       	ldi	r22, 0x02	; 2
    3362:	40 e0       	ldi	r20, 0x00	; 0
    3364:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_HIGH);
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	63 e0       	ldi	r22, 0x03	; 3
    336c:	41 e0       	ldi	r20, 0x01	; 1
    336e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	/* value of delay will change by change (voltage and arena) */
    BUZZER_voidBuzzer_Work(BUZZER_ON);
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	a8 e4       	ldi	r26, 0x48	; 72
    337e:	b3 e4       	ldi	r27, 0x43	; 67
    3380:	8f a3       	std	Y+39, r24	; 0x27
    3382:	98 a7       	std	Y+40, r25	; 0x28
    3384:	a9 a7       	std	Y+41, r26	; 0x29
    3386:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3388:	6f a1       	ldd	r22, Y+39	; 0x27
    338a:	78 a5       	ldd	r23, Y+40	; 0x28
    338c:	89 a5       	ldd	r24, Y+41	; 0x29
    338e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	4a ef       	ldi	r20, 0xFA	; 250
    3396:	54 e4       	ldi	r21, 0x44	; 68
    3398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	8b a3       	std	Y+35, r24	; 0x23
    33a2:	9c a3       	std	Y+36, r25	; 0x24
    33a4:	ad a3       	std	Y+37, r26	; 0x25
    33a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33a8:	6b a1       	ldd	r22, Y+35	; 0x23
    33aa:	7c a1       	ldd	r23, Y+36	; 0x24
    33ac:	8d a1       	ldd	r24, Y+37	; 0x25
    33ae:	9e a1       	ldd	r25, Y+38	; 0x26
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e8       	ldi	r20, 0x80	; 128
    33b6:	5f e3       	ldi	r21, 0x3F	; 63
    33b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33bc:	88 23       	and	r24, r24
    33be:	2c f4       	brge	.+10     	; 0x33ca <Robot_voidLeft90+0x9a>
		__ticks = 1;
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	9a a3       	std	Y+34, r25	; 0x22
    33c6:	89 a3       	std	Y+33, r24	; 0x21
    33c8:	3f c0       	rjmp	.+126    	; 0x3448 <Robot_voidLeft90+0x118>
	else if (__tmp > 65535)
    33ca:	6b a1       	ldd	r22, Y+35	; 0x23
    33cc:	7c a1       	ldd	r23, Y+36	; 0x24
    33ce:	8d a1       	ldd	r24, Y+37	; 0x25
    33d0:	9e a1       	ldd	r25, Y+38	; 0x26
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	3f ef       	ldi	r19, 0xFF	; 255
    33d6:	4f e7       	ldi	r20, 0x7F	; 127
    33d8:	57 e4       	ldi	r21, 0x47	; 71
    33da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33de:	18 16       	cp	r1, r24
    33e0:	4c f5       	brge	.+82     	; 0x3434 <Robot_voidLeft90+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e2:	6f a1       	ldd	r22, Y+39	; 0x27
    33e4:	78 a5       	ldd	r23, Y+40	; 0x28
    33e6:	89 a5       	ldd	r24, Y+41	; 0x29
    33e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	40 e2       	ldi	r20, 0x20	; 32
    33f0:	51 e4       	ldi	r21, 0x41	; 65
    33f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	bc 01       	movw	r22, r24
    33fc:	cd 01       	movw	r24, r26
    33fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	9a a3       	std	Y+34, r25	; 0x22
    3408:	89 a3       	std	Y+33, r24	; 0x21
    340a:	0f c0       	rjmp	.+30     	; 0x342a <Robot_voidLeft90+0xfa>
    340c:	88 ec       	ldi	r24, 0xC8	; 200
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	98 a3       	std	Y+32, r25	; 0x20
    3412:	8f 8f       	std	Y+31, r24	; 0x1f
    3414:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3416:	98 a1       	ldd	r25, Y+32	; 0x20
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	f1 f7       	brne	.-4      	; 0x3418 <Robot_voidLeft90+0xe8>
    341c:	98 a3       	std	Y+32, r25	; 0x20
    341e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3420:	89 a1       	ldd	r24, Y+33	; 0x21
    3422:	9a a1       	ldd	r25, Y+34	; 0x22
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	9a a3       	std	Y+34, r25	; 0x22
    3428:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342a:	89 a1       	ldd	r24, Y+33	; 0x21
    342c:	9a a1       	ldd	r25, Y+34	; 0x22
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	69 f7       	brne	.-38     	; 0x340c <Robot_voidLeft90+0xdc>
    3432:	14 c0       	rjmp	.+40     	; 0x345c <Robot_voidLeft90+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3434:	6b a1       	ldd	r22, Y+35	; 0x23
    3436:	7c a1       	ldd	r23, Y+36	; 0x24
    3438:	8d a1       	ldd	r24, Y+37	; 0x25
    343a:	9e a1       	ldd	r25, Y+38	; 0x26
    343c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	9a a3       	std	Y+34, r25	; 0x22
    3446:	89 a3       	std	Y+33, r24	; 0x21
    3448:	89 a1       	ldd	r24, Y+33	; 0x21
    344a:	9a a1       	ldd	r25, Y+34	; 0x22
    344c:	9e 8f       	std	Y+30, r25	; 0x1e
    344e:	8d 8f       	std	Y+29, r24	; 0x1d
    3450:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3452:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3454:	01 97       	sbiw	r24, 0x01	; 1
    3456:	f1 f7       	brne	.-4      	; 0x3454 <Robot_voidLeft90+0x124>
    3458:	9e 8f       	std	Y+30, r25	; 0x1e
    345a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(200);
    BUZZER_voidBuzzer_Work(BUZZER_OFF);
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	a8 e4       	ldi	r26, 0x48	; 72
    3468:	b3 e4       	ldi	r27, 0x43	; 67
    346a:	89 8f       	std	Y+25, r24	; 0x19
    346c:	9a 8f       	std	Y+26, r25	; 0x1a
    346e:	ab 8f       	std	Y+27, r26	; 0x1b
    3470:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3472:	69 8d       	ldd	r22, Y+25	; 0x19
    3474:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	4a ef       	ldi	r20, 0xFA	; 250
    3480:	54 e4       	ldi	r21, 0x44	; 68
    3482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	8d 8b       	std	Y+21, r24	; 0x15
    348c:	9e 8b       	std	Y+22, r25	; 0x16
    348e:	af 8b       	std	Y+23, r26	; 0x17
    3490:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3492:	6d 89       	ldd	r22, Y+21	; 0x15
    3494:	7e 89       	ldd	r23, Y+22	; 0x16
    3496:	8f 89       	ldd	r24, Y+23	; 0x17
    3498:	98 8d       	ldd	r25, Y+24	; 0x18
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	40 e8       	ldi	r20, 0x80	; 128
    34a0:	5f e3       	ldi	r21, 0x3F	; 63
    34a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34a6:	88 23       	and	r24, r24
    34a8:	2c f4       	brge	.+10     	; 0x34b4 <Robot_voidLeft90+0x184>
		__ticks = 1;
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	9c 8b       	std	Y+20, r25	; 0x14
    34b0:	8b 8b       	std	Y+19, r24	; 0x13
    34b2:	3f c0       	rjmp	.+126    	; 0x3532 <Robot_voidLeft90+0x202>
	else if (__tmp > 65535)
    34b4:	6d 89       	ldd	r22, Y+21	; 0x15
    34b6:	7e 89       	ldd	r23, Y+22	; 0x16
    34b8:	8f 89       	ldd	r24, Y+23	; 0x17
    34ba:	98 8d       	ldd	r25, Y+24	; 0x18
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	3f ef       	ldi	r19, 0xFF	; 255
    34c0:	4f e7       	ldi	r20, 0x7F	; 127
    34c2:	57 e4       	ldi	r21, 0x47	; 71
    34c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34c8:	18 16       	cp	r1, r24
    34ca:	4c f5       	brge	.+82     	; 0x351e <Robot_voidLeft90+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34cc:	69 8d       	ldd	r22, Y+25	; 0x19
    34ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	40 e2       	ldi	r20, 0x20	; 32
    34da:	51 e4       	ldi	r21, 0x41	; 65
    34dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	bc 01       	movw	r22, r24
    34e6:	cd 01       	movw	r24, r26
    34e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	9c 8b       	std	Y+20, r25	; 0x14
    34f2:	8b 8b       	std	Y+19, r24	; 0x13
    34f4:	0f c0       	rjmp	.+30     	; 0x3514 <Robot_voidLeft90+0x1e4>
    34f6:	88 ec       	ldi	r24, 0xC8	; 200
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	9a 8b       	std	Y+18, r25	; 0x12
    34fc:	89 8b       	std	Y+17, r24	; 0x11
    34fe:	89 89       	ldd	r24, Y+17	; 0x11
    3500:	9a 89       	ldd	r25, Y+18	; 0x12
    3502:	01 97       	sbiw	r24, 0x01	; 1
    3504:	f1 f7       	brne	.-4      	; 0x3502 <Robot_voidLeft90+0x1d2>
    3506:	9a 8b       	std	Y+18, r25	; 0x12
    3508:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    350a:	8b 89       	ldd	r24, Y+19	; 0x13
    350c:	9c 89       	ldd	r25, Y+20	; 0x14
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	9c 8b       	std	Y+20, r25	; 0x14
    3512:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3514:	8b 89       	ldd	r24, Y+19	; 0x13
    3516:	9c 89       	ldd	r25, Y+20	; 0x14
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	69 f7       	brne	.-38     	; 0x34f6 <Robot_voidLeft90+0x1c6>
    351c:	14 c0       	rjmp	.+40     	; 0x3546 <Robot_voidLeft90+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351e:	6d 89       	ldd	r22, Y+21	; 0x15
    3520:	7e 89       	ldd	r23, Y+22	; 0x16
    3522:	8f 89       	ldd	r24, Y+23	; 0x17
    3524:	98 8d       	ldd	r25, Y+24	; 0x18
    3526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	9c 8b       	std	Y+20, r25	; 0x14
    3530:	8b 8b       	std	Y+19, r24	; 0x13
    3532:	8b 89       	ldd	r24, Y+19	; 0x13
    3534:	9c 89       	ldd	r25, Y+20	; 0x14
    3536:	98 8b       	std	Y+16, r25	; 0x10
    3538:	8f 87       	std	Y+15, r24	; 0x0f
    353a:	8f 85       	ldd	r24, Y+15	; 0x0f
    353c:	98 89       	ldd	r25, Y+16	; 0x10
    353e:	01 97       	sbiw	r24, 0x01	; 1
    3540:	f1 f7       	brne	.-4      	; 0x353e <Robot_voidLeft90+0x20e>
    3542:	98 8b       	std	Y+16, r25	; 0x10
    3544:	8f 87       	std	Y+15, r24	; 0x0f
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	a8 ec       	ldi	r26, 0xC8	; 200
    354c:	b2 e4       	ldi	r27, 0x42	; 66
    354e:	8b 87       	std	Y+11, r24	; 0x0b
    3550:	9c 87       	std	Y+12, r25	; 0x0c
    3552:	ad 87       	std	Y+13, r26	; 0x0d
    3554:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3556:	6b 85       	ldd	r22, Y+11	; 0x0b
    3558:	7c 85       	ldd	r23, Y+12	; 0x0c
    355a:	8d 85       	ldd	r24, Y+13	; 0x0d
    355c:	9e 85       	ldd	r25, Y+14	; 0x0e
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	4a ef       	ldi	r20, 0xFA	; 250
    3564:	54 e4       	ldi	r21, 0x44	; 68
    3566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	8f 83       	std	Y+7, r24	; 0x07
    3570:	98 87       	std	Y+8, r25	; 0x08
    3572:	a9 87       	std	Y+9, r26	; 0x09
    3574:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3576:	6f 81       	ldd	r22, Y+7	; 0x07
    3578:	78 85       	ldd	r23, Y+8	; 0x08
    357a:	89 85       	ldd	r24, Y+9	; 0x09
    357c:	9a 85       	ldd	r25, Y+10	; 0x0a
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	40 e8       	ldi	r20, 0x80	; 128
    3584:	5f e3       	ldi	r21, 0x3F	; 63
    3586:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358a:	88 23       	and	r24, r24
    358c:	2c f4       	brge	.+10     	; 0x3598 <Robot_voidLeft90+0x268>
		__ticks = 1;
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	9e 83       	std	Y+6, r25	; 0x06
    3594:	8d 83       	std	Y+5, r24	; 0x05
    3596:	3f c0       	rjmp	.+126    	; 0x3616 <Robot_voidLeft90+0x2e6>
	else if (__tmp > 65535)
    3598:	6f 81       	ldd	r22, Y+7	; 0x07
    359a:	78 85       	ldd	r23, Y+8	; 0x08
    359c:	89 85       	ldd	r24, Y+9	; 0x09
    359e:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	3f ef       	ldi	r19, 0xFF	; 255
    35a4:	4f e7       	ldi	r20, 0x7F	; 127
    35a6:	57 e4       	ldi	r21, 0x47	; 71
    35a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ac:	18 16       	cp	r1, r24
    35ae:	4c f5       	brge	.+82     	; 0x3602 <Robot_voidLeft90+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	40 e2       	ldi	r20, 0x20	; 32
    35be:	51 e4       	ldi	r21, 0x41	; 65
    35c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	bc 01       	movw	r22, r24
    35ca:	cd 01       	movw	r24, r26
    35cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	9e 83       	std	Y+6, r25	; 0x06
    35d6:	8d 83       	std	Y+5, r24	; 0x05
    35d8:	0f c0       	rjmp	.+30     	; 0x35f8 <Robot_voidLeft90+0x2c8>
    35da:	88 ec       	ldi	r24, 0xC8	; 200
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	9c 83       	std	Y+4, r25	; 0x04
    35e0:	8b 83       	std	Y+3, r24	; 0x03
    35e2:	8b 81       	ldd	r24, Y+3	; 0x03
    35e4:	9c 81       	ldd	r25, Y+4	; 0x04
    35e6:	01 97       	sbiw	r24, 0x01	; 1
    35e8:	f1 f7       	brne	.-4      	; 0x35e6 <Robot_voidLeft90+0x2b6>
    35ea:	9c 83       	std	Y+4, r25	; 0x04
    35ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ee:	8d 81       	ldd	r24, Y+5	; 0x05
    35f0:	9e 81       	ldd	r25, Y+6	; 0x06
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	9e 83       	std	Y+6, r25	; 0x06
    35f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f8:	8d 81       	ldd	r24, Y+5	; 0x05
    35fa:	9e 81       	ldd	r25, Y+6	; 0x06
    35fc:	00 97       	sbiw	r24, 0x00	; 0
    35fe:	69 f7       	brne	.-38     	; 0x35da <Robot_voidLeft90+0x2aa>
    3600:	14 c0       	rjmp	.+40     	; 0x362a <Robot_voidLeft90+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3602:	6f 81       	ldd	r22, Y+7	; 0x07
    3604:	78 85       	ldd	r23, Y+8	; 0x08
    3606:	89 85       	ldd	r24, Y+9	; 0x09
    3608:	9a 85       	ldd	r25, Y+10	; 0x0a
    360a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	9e 83       	std	Y+6, r25	; 0x06
    3614:	8d 83       	std	Y+5, r24	; 0x05
    3616:	8d 81       	ldd	r24, Y+5	; 0x05
    3618:	9e 81       	ldd	r25, Y+6	; 0x06
    361a:	9a 83       	std	Y+2, r25	; 0x02
    361c:	89 83       	std	Y+1, r24	; 0x01
    361e:	89 81       	ldd	r24, Y+1	; 0x01
    3620:	9a 81       	ldd	r25, Y+2	; 0x02
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	f1 f7       	brne	.-4      	; 0x3622 <Robot_voidLeft90+0x2f2>
    3626:	9a 83       	std	Y+2, r25	; 0x02
    3628:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(200);
	_delay_ms(100);
	Robot_voidStop();
    362a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <Robot_voidStop>
	Robot_voidSpeed(Robot_u8_INIT_SPEED);
    362e:	8c e3       	ldi	r24, 0x3C	; 60
    3630:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <Robot_voidSpeed>
}
    3634:	aa 96       	adiw	r28, 0x2a	; 42
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	f8 94       	cli
    363a:	de bf       	out	0x3e, r29	; 62
    363c:	0f be       	out	0x3f, r0	; 63
    363e:	cd bf       	out	0x3d, r28	; 61
    3640:	cf 91       	pop	r28
    3642:	df 91       	pop	r29
    3644:	08 95       	ret

00003646 <Robot_voidRevers>:
void Robot_voidRevers(void)
{
    3646:	df 93       	push	r29
    3648:	cf 93       	push	r28
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    364e:	aa 97       	sbiw	r28, 0x2a	; 42
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	f8 94       	cli
    3654:	de bf       	out	0x3e, r29	; 62
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	cd bf       	out	0x3d, r28	; 61
	/* turn 180 degree  */
	Robot_voidSpeed(60);
    365a:	8c e3       	ldi	r24, 0x3C	; 60
    365c:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <Robot_voidSpeed>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_HIGH);
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	60 e0       	ldi	r22, 0x00	; 0
    3664:	41 e0       	ldi	r20, 0x01	; 1
    3666:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_LOW);
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	61 e0       	ldi	r22, 0x01	; 1
    366e:	40 e0       	ldi	r20, 0x00	; 0
    3670:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_LOW);
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	62 e0       	ldi	r22, 0x02	; 2
    3678:	40 e0       	ldi	r20, 0x00	; 0
    367a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_HIGH);
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	63 e0       	ldi	r22, 0x03	; 3
    3682:	41 e0       	ldi	r20, 0x01	; 1
    3684:	0e 94 fe 11 	call	0x23fc	; 0x23fc <DIO_voidSetPinValue>
	/* value of delay will change by change (voltage and arena) */
    BUZZER_voidBuzzer_Work(BUZZER_ON);
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    368e:	80 e0       	ldi	r24, 0x00	; 0
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	a8 e4       	ldi	r26, 0x48	; 72
    3694:	b3 e4       	ldi	r27, 0x43	; 67
    3696:	8f a3       	std	Y+39, r24	; 0x27
    3698:	98 a7       	std	Y+40, r25	; 0x28
    369a:	a9 a7       	std	Y+41, r26	; 0x29
    369c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    369e:	6f a1       	ldd	r22, Y+39	; 0x27
    36a0:	78 a5       	ldd	r23, Y+40	; 0x28
    36a2:	89 a5       	ldd	r24, Y+41	; 0x29
    36a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	4a ef       	ldi	r20, 0xFA	; 250
    36ac:	54 e4       	ldi	r21, 0x44	; 68
    36ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	8b a3       	std	Y+35, r24	; 0x23
    36b8:	9c a3       	std	Y+36, r25	; 0x24
    36ba:	ad a3       	std	Y+37, r26	; 0x25
    36bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    36be:	6b a1       	ldd	r22, Y+35	; 0x23
    36c0:	7c a1       	ldd	r23, Y+36	; 0x24
    36c2:	8d a1       	ldd	r24, Y+37	; 0x25
    36c4:	9e a1       	ldd	r25, Y+38	; 0x26
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	40 e8       	ldi	r20, 0x80	; 128
    36cc:	5f e3       	ldi	r21, 0x3F	; 63
    36ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36d2:	88 23       	and	r24, r24
    36d4:	2c f4       	brge	.+10     	; 0x36e0 <Robot_voidRevers+0x9a>
		__ticks = 1;
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	9a a3       	std	Y+34, r25	; 0x22
    36dc:	89 a3       	std	Y+33, r24	; 0x21
    36de:	3f c0       	rjmp	.+126    	; 0x375e <Robot_voidRevers+0x118>
	else if (__tmp > 65535)
    36e0:	6b a1       	ldd	r22, Y+35	; 0x23
    36e2:	7c a1       	ldd	r23, Y+36	; 0x24
    36e4:	8d a1       	ldd	r24, Y+37	; 0x25
    36e6:	9e a1       	ldd	r25, Y+38	; 0x26
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	3f ef       	ldi	r19, 0xFF	; 255
    36ec:	4f e7       	ldi	r20, 0x7F	; 127
    36ee:	57 e4       	ldi	r21, 0x47	; 71
    36f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36f4:	18 16       	cp	r1, r24
    36f6:	4c f5       	brge	.+82     	; 0x374a <Robot_voidRevers+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f8:	6f a1       	ldd	r22, Y+39	; 0x27
    36fa:	78 a5       	ldd	r23, Y+40	; 0x28
    36fc:	89 a5       	ldd	r24, Y+41	; 0x29
    36fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	40 e2       	ldi	r20, 0x20	; 32
    3706:	51 e4       	ldi	r21, 0x41	; 65
    3708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	bc 01       	movw	r22, r24
    3712:	cd 01       	movw	r24, r26
    3714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	9a a3       	std	Y+34, r25	; 0x22
    371e:	89 a3       	std	Y+33, r24	; 0x21
    3720:	0f c0       	rjmp	.+30     	; 0x3740 <Robot_voidRevers+0xfa>
    3722:	88 ec       	ldi	r24, 0xC8	; 200
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	98 a3       	std	Y+32, r25	; 0x20
    3728:	8f 8f       	std	Y+31, r24	; 0x1f
    372a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    372c:	98 a1       	ldd	r25, Y+32	; 0x20
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	f1 f7       	brne	.-4      	; 0x372e <Robot_voidRevers+0xe8>
    3732:	98 a3       	std	Y+32, r25	; 0x20
    3734:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3736:	89 a1       	ldd	r24, Y+33	; 0x21
    3738:	9a a1       	ldd	r25, Y+34	; 0x22
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	9a a3       	std	Y+34, r25	; 0x22
    373e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3740:	89 a1       	ldd	r24, Y+33	; 0x21
    3742:	9a a1       	ldd	r25, Y+34	; 0x22
    3744:	00 97       	sbiw	r24, 0x00	; 0
    3746:	69 f7       	brne	.-38     	; 0x3722 <Robot_voidRevers+0xdc>
    3748:	14 c0       	rjmp	.+40     	; 0x3772 <Robot_voidRevers+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    374a:	6b a1       	ldd	r22, Y+35	; 0x23
    374c:	7c a1       	ldd	r23, Y+36	; 0x24
    374e:	8d a1       	ldd	r24, Y+37	; 0x25
    3750:	9e a1       	ldd	r25, Y+38	; 0x26
    3752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	9a a3       	std	Y+34, r25	; 0x22
    375c:	89 a3       	std	Y+33, r24	; 0x21
    375e:	89 a1       	ldd	r24, Y+33	; 0x21
    3760:	9a a1       	ldd	r25, Y+34	; 0x22
    3762:	9e 8f       	std	Y+30, r25	; 0x1e
    3764:	8d 8f       	std	Y+29, r24	; 0x1d
    3766:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3768:	9e 8d       	ldd	r25, Y+30	; 0x1e
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	f1 f7       	brne	.-4      	; 0x376a <Robot_voidRevers+0x124>
    376e:	9e 8f       	std	Y+30, r25	; 0x1e
    3770:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(200);
    BUZZER_voidBuzzer_Work(BUZZER_OFF);
    3772:	80 e0       	ldi	r24, 0x00	; 0
    3774:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	a8 e4       	ldi	r26, 0x48	; 72
    377e:	b3 e4       	ldi	r27, 0x43	; 67
    3780:	89 8f       	std	Y+25, r24	; 0x19
    3782:	9a 8f       	std	Y+26, r25	; 0x1a
    3784:	ab 8f       	std	Y+27, r26	; 0x1b
    3786:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3788:	69 8d       	ldd	r22, Y+25	; 0x19
    378a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    378c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    378e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	4a ef       	ldi	r20, 0xFA	; 250
    3796:	54 e4       	ldi	r21, 0x44	; 68
    3798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	8d 8b       	std	Y+21, r24	; 0x15
    37a2:	9e 8b       	std	Y+22, r25	; 0x16
    37a4:	af 8b       	std	Y+23, r26	; 0x17
    37a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37a8:	6d 89       	ldd	r22, Y+21	; 0x15
    37aa:	7e 89       	ldd	r23, Y+22	; 0x16
    37ac:	8f 89       	ldd	r24, Y+23	; 0x17
    37ae:	98 8d       	ldd	r25, Y+24	; 0x18
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	40 e8       	ldi	r20, 0x80	; 128
    37b6:	5f e3       	ldi	r21, 0x3F	; 63
    37b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37bc:	88 23       	and	r24, r24
    37be:	2c f4       	brge	.+10     	; 0x37ca <Robot_voidRevers+0x184>
		__ticks = 1;
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	9c 8b       	std	Y+20, r25	; 0x14
    37c6:	8b 8b       	std	Y+19, r24	; 0x13
    37c8:	3f c0       	rjmp	.+126    	; 0x3848 <Robot_voidRevers+0x202>
	else if (__tmp > 65535)
    37ca:	6d 89       	ldd	r22, Y+21	; 0x15
    37cc:	7e 89       	ldd	r23, Y+22	; 0x16
    37ce:	8f 89       	ldd	r24, Y+23	; 0x17
    37d0:	98 8d       	ldd	r25, Y+24	; 0x18
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	3f ef       	ldi	r19, 0xFF	; 255
    37d6:	4f e7       	ldi	r20, 0x7F	; 127
    37d8:	57 e4       	ldi	r21, 0x47	; 71
    37da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37de:	18 16       	cp	r1, r24
    37e0:	4c f5       	brge	.+82     	; 0x3834 <Robot_voidRevers+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e2:	69 8d       	ldd	r22, Y+25	; 0x19
    37e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 e2       	ldi	r20, 0x20	; 32
    37f0:	51 e4       	ldi	r21, 0x41	; 65
    37f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	bc 01       	movw	r22, r24
    37fc:	cd 01       	movw	r24, r26
    37fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3802:	dc 01       	movw	r26, r24
    3804:	cb 01       	movw	r24, r22
    3806:	9c 8b       	std	Y+20, r25	; 0x14
    3808:	8b 8b       	std	Y+19, r24	; 0x13
    380a:	0f c0       	rjmp	.+30     	; 0x382a <Robot_voidRevers+0x1e4>
    380c:	88 ec       	ldi	r24, 0xC8	; 200
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	9a 8b       	std	Y+18, r25	; 0x12
    3812:	89 8b       	std	Y+17, r24	; 0x11
    3814:	89 89       	ldd	r24, Y+17	; 0x11
    3816:	9a 89       	ldd	r25, Y+18	; 0x12
    3818:	01 97       	sbiw	r24, 0x01	; 1
    381a:	f1 f7       	brne	.-4      	; 0x3818 <Robot_voidRevers+0x1d2>
    381c:	9a 8b       	std	Y+18, r25	; 0x12
    381e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3820:	8b 89       	ldd	r24, Y+19	; 0x13
    3822:	9c 89       	ldd	r25, Y+20	; 0x14
    3824:	01 97       	sbiw	r24, 0x01	; 1
    3826:	9c 8b       	std	Y+20, r25	; 0x14
    3828:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    382a:	8b 89       	ldd	r24, Y+19	; 0x13
    382c:	9c 89       	ldd	r25, Y+20	; 0x14
    382e:	00 97       	sbiw	r24, 0x00	; 0
    3830:	69 f7       	brne	.-38     	; 0x380c <Robot_voidRevers+0x1c6>
    3832:	14 c0       	rjmp	.+40     	; 0x385c <Robot_voidRevers+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3834:	6d 89       	ldd	r22, Y+21	; 0x15
    3836:	7e 89       	ldd	r23, Y+22	; 0x16
    3838:	8f 89       	ldd	r24, Y+23	; 0x17
    383a:	98 8d       	ldd	r25, Y+24	; 0x18
    383c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3840:	dc 01       	movw	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	9c 8b       	std	Y+20, r25	; 0x14
    3846:	8b 8b       	std	Y+19, r24	; 0x13
    3848:	8b 89       	ldd	r24, Y+19	; 0x13
    384a:	9c 89       	ldd	r25, Y+20	; 0x14
    384c:	98 8b       	std	Y+16, r25	; 0x10
    384e:	8f 87       	std	Y+15, r24	; 0x0f
    3850:	8f 85       	ldd	r24, Y+15	; 0x0f
    3852:	98 89       	ldd	r25, Y+16	; 0x10
    3854:	01 97       	sbiw	r24, 0x01	; 1
    3856:	f1 f7       	brne	.-4      	; 0x3854 <Robot_voidRevers+0x20e>
    3858:	98 8b       	std	Y+16, r25	; 0x10
    385a:	8f 87       	std	Y+15, r24	; 0x0f
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	a6 e9       	ldi	r26, 0x96	; 150
    3862:	b3 e4       	ldi	r27, 0x43	; 67
    3864:	8b 87       	std	Y+11, r24	; 0x0b
    3866:	9c 87       	std	Y+12, r25	; 0x0c
    3868:	ad 87       	std	Y+13, r26	; 0x0d
    386a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386c:	6b 85       	ldd	r22, Y+11	; 0x0b
    386e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3870:	8d 85       	ldd	r24, Y+13	; 0x0d
    3872:	9e 85       	ldd	r25, Y+14	; 0x0e
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	4a ef       	ldi	r20, 0xFA	; 250
    387a:	54 e4       	ldi	r21, 0x44	; 68
    387c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	8f 83       	std	Y+7, r24	; 0x07
    3886:	98 87       	std	Y+8, r25	; 0x08
    3888:	a9 87       	std	Y+9, r26	; 0x09
    388a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    388c:	6f 81       	ldd	r22, Y+7	; 0x07
    388e:	78 85       	ldd	r23, Y+8	; 0x08
    3890:	89 85       	ldd	r24, Y+9	; 0x09
    3892:	9a 85       	ldd	r25, Y+10	; 0x0a
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	40 e8       	ldi	r20, 0x80	; 128
    389a:	5f e3       	ldi	r21, 0x3F	; 63
    389c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38a0:	88 23       	and	r24, r24
    38a2:	2c f4       	brge	.+10     	; 0x38ae <Robot_voidRevers+0x268>
		__ticks = 1;
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	9e 83       	std	Y+6, r25	; 0x06
    38aa:	8d 83       	std	Y+5, r24	; 0x05
    38ac:	3f c0       	rjmp	.+126    	; 0x392c <Robot_voidRevers+0x2e6>
	else if (__tmp > 65535)
    38ae:	6f 81       	ldd	r22, Y+7	; 0x07
    38b0:	78 85       	ldd	r23, Y+8	; 0x08
    38b2:	89 85       	ldd	r24, Y+9	; 0x09
    38b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	3f ef       	ldi	r19, 0xFF	; 255
    38ba:	4f e7       	ldi	r20, 0x7F	; 127
    38bc:	57 e4       	ldi	r21, 0x47	; 71
    38be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38c2:	18 16       	cp	r1, r24
    38c4:	4c f5       	brge	.+82     	; 0x3918 <Robot_voidRevers+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    38ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    38cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	40 e2       	ldi	r20, 0x20	; 32
    38d4:	51 e4       	ldi	r21, 0x41	; 65
    38d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	bc 01       	movw	r22, r24
    38e0:	cd 01       	movw	r24, r26
    38e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	9e 83       	std	Y+6, r25	; 0x06
    38ec:	8d 83       	std	Y+5, r24	; 0x05
    38ee:	0f c0       	rjmp	.+30     	; 0x390e <Robot_voidRevers+0x2c8>
    38f0:	88 ec       	ldi	r24, 0xC8	; 200
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	9c 83       	std	Y+4, r25	; 0x04
    38f6:	8b 83       	std	Y+3, r24	; 0x03
    38f8:	8b 81       	ldd	r24, Y+3	; 0x03
    38fa:	9c 81       	ldd	r25, Y+4	; 0x04
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	f1 f7       	brne	.-4      	; 0x38fc <Robot_voidRevers+0x2b6>
    3900:	9c 83       	std	Y+4, r25	; 0x04
    3902:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3904:	8d 81       	ldd	r24, Y+5	; 0x05
    3906:	9e 81       	ldd	r25, Y+6	; 0x06
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	9e 83       	std	Y+6, r25	; 0x06
    390c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390e:	8d 81       	ldd	r24, Y+5	; 0x05
    3910:	9e 81       	ldd	r25, Y+6	; 0x06
    3912:	00 97       	sbiw	r24, 0x00	; 0
    3914:	69 f7       	brne	.-38     	; 0x38f0 <Robot_voidRevers+0x2aa>
    3916:	14 c0       	rjmp	.+40     	; 0x3940 <Robot_voidRevers+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3918:	6f 81       	ldd	r22, Y+7	; 0x07
    391a:	78 85       	ldd	r23, Y+8	; 0x08
    391c:	89 85       	ldd	r24, Y+9	; 0x09
    391e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	9e 83       	std	Y+6, r25	; 0x06
    392a:	8d 83       	std	Y+5, r24	; 0x05
    392c:	8d 81       	ldd	r24, Y+5	; 0x05
    392e:	9e 81       	ldd	r25, Y+6	; 0x06
    3930:	9a 83       	std	Y+2, r25	; 0x02
    3932:	89 83       	std	Y+1, r24	; 0x01
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	9a 81       	ldd	r25, Y+2	; 0x02
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	f1 f7       	brne	.-4      	; 0x3938 <Robot_voidRevers+0x2f2>
    393c:	9a 83       	std	Y+2, r25	; 0x02
    393e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(200);
	_delay_ms(300);
	Robot_voidStop();
    3940:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <Robot_voidStop>
	Robot_voidSpeed(Robot_u8_INIT_SPEED);
    3944:	8c e3       	ldi	r24, 0x3C	; 60
    3946:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <Robot_voidSpeed>
}
    394a:	aa 96       	adiw	r28, 0x2a	; 42
    394c:	0f b6       	in	r0, 0x3f	; 63
    394e:	f8 94       	cli
    3950:	de bf       	out	0x3e, r29	; 62
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	cd bf       	out	0x3d, r28	; 61
    3956:	cf 91       	pop	r28
    3958:	df 91       	pop	r29
    395a:	08 95       	ret

0000395c <Robot_voidComparisonlogic>:
 *                                                            Robot Modes                                                               *
 ****************************************************************************************************************************************/
/************************************************************ Obstacle Avoiding Mode ******************************************************/
/***************************************************************** Comparison *************************************************************/
void Robot_voidComparisonlogic(u16 Copy_u16LeftObject,u16 Copy_u16RightObject)
{
    395c:	0f 93       	push	r16
    395e:	1f 93       	push	r17
    3960:	df 93       	push	r29
    3962:	cf 93       	push	r28
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
    3968:	cc 5a       	subi	r28, 0xAC	; 172
    396a:	d0 40       	sbci	r29, 0x00	; 0
    396c:	0f b6       	in	r0, 0x3f	; 63
    396e:	f8 94       	cli
    3970:	de bf       	out	0x3e, r29	; 62
    3972:	0f be       	out	0x3f, r0	; 63
    3974:	cd bf       	out	0x3d, r28	; 61
    3976:	fe 01       	movw	r30, r28
    3978:	e7 55       	subi	r30, 0x57	; 87
    397a:	ff 4f       	sbci	r31, 0xFF	; 255
    397c:	91 83       	std	Z+1, r25	; 0x01
    397e:	80 83       	st	Z, r24
    3980:	fe 01       	movw	r30, r28
    3982:	e5 55       	subi	r30, 0x55	; 85
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	71 83       	std	Z+1, r23	; 0x01
    3988:	60 83       	st	Z, r22
	/* Comparison between to direction and set Orientation*/
      if(Copy_u16LeftObject>Copy_u16RightObject)
    398a:	fe 01       	movw	r30, r28
    398c:	e7 55       	subi	r30, 0x57	; 87
    398e:	ff 4f       	sbci	r31, 0xFF	; 255
    3990:	de 01       	movw	r26, r28
    3992:	a5 55       	subi	r26, 0x55	; 85
    3994:	bf 4f       	sbci	r27, 0xFF	; 255
    3996:	20 81       	ld	r18, Z
    3998:	31 81       	ldd	r19, Z+1	; 0x01
    399a:	8d 91       	ld	r24, X+
    399c:	9c 91       	ld	r25, X
    399e:	11 97       	sbiw	r26, 0x01	; 1
    39a0:	82 17       	cp	r24, r18
    39a2:	93 07       	cpc	r25, r19
    39a4:	08 f0       	brcs	.+2      	; 0x39a8 <Robot_voidComparisonlogic+0x4c>
    39a6:	dc c2       	rjmp	.+1464   	; 0x3f60 <Robot_voidComparisonlogic+0x604>
      {
    	    BUZZER_voidBuzzer_Work(BUZZER_ON);
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    39ae:	fe 01       	movw	r30, r28
    39b0:	eb 55       	subi	r30, 0x5B	; 91
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	a8 e4       	ldi	r26, 0x48	; 72
    39ba:	b3 e4       	ldi	r27, 0x43	; 67
    39bc:	80 83       	st	Z, r24
    39be:	91 83       	std	Z+1, r25	; 0x01
    39c0:	a2 83       	std	Z+2, r26	; 0x02
    39c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c4:	8e 01       	movw	r16, r28
    39c6:	0f 55       	subi	r16, 0x5F	; 95
    39c8:	1f 4f       	sbci	r17, 0xFF	; 255
    39ca:	fe 01       	movw	r30, r28
    39cc:	eb 55       	subi	r30, 0x5B	; 91
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	60 81       	ld	r22, Z
    39d2:	71 81       	ldd	r23, Z+1	; 0x01
    39d4:	82 81       	ldd	r24, Z+2	; 0x02
    39d6:	93 81       	ldd	r25, Z+3	; 0x03
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	4a ef       	ldi	r20, 0xFA	; 250
    39de:	54 e4       	ldi	r21, 0x44	; 68
    39e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	f8 01       	movw	r30, r16
    39ea:	80 83       	st	Z, r24
    39ec:	91 83       	std	Z+1, r25	; 0x01
    39ee:	a2 83       	std	Z+2, r26	; 0x02
    39f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39f2:	fe 01       	movw	r30, r28
    39f4:	ef 55       	subi	r30, 0x5F	; 95
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	60 81       	ld	r22, Z
    39fa:	71 81       	ldd	r23, Z+1	; 0x01
    39fc:	82 81       	ldd	r24, Z+2	; 0x02
    39fe:	93 81       	ldd	r25, Z+3	; 0x03
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e8       	ldi	r20, 0x80	; 128
    3a06:	5f e3       	ldi	r21, 0x3F	; 63
    3a08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a0c:	88 23       	and	r24, r24
    3a0e:	44 f4       	brge	.+16     	; 0x3a20 <Robot_voidComparisonlogic+0xc4>
		__ticks = 1;
    3a10:	fe 01       	movw	r30, r28
    3a12:	e1 56       	subi	r30, 0x61	; 97
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	91 83       	std	Z+1, r25	; 0x01
    3a1c:	80 83       	st	Z, r24
    3a1e:	64 c0       	rjmp	.+200    	; 0x3ae8 <Robot_voidComparisonlogic+0x18c>
	else if (__tmp > 65535)
    3a20:	fe 01       	movw	r30, r28
    3a22:	ef 55       	subi	r30, 0x5F	; 95
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	60 81       	ld	r22, Z
    3a28:	71 81       	ldd	r23, Z+1	; 0x01
    3a2a:	82 81       	ldd	r24, Z+2	; 0x02
    3a2c:	93 81       	ldd	r25, Z+3	; 0x03
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	3f ef       	ldi	r19, 0xFF	; 255
    3a32:	4f e7       	ldi	r20, 0x7F	; 127
    3a34:	57 e4       	ldi	r21, 0x47	; 71
    3a36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a3a:	18 16       	cp	r1, r24
    3a3c:	0c f0       	brlt	.+2      	; 0x3a40 <Robot_voidComparisonlogic+0xe4>
    3a3e:	43 c0       	rjmp	.+134    	; 0x3ac6 <Robot_voidComparisonlogic+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a40:	fe 01       	movw	r30, r28
    3a42:	eb 55       	subi	r30, 0x5B	; 91
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	60 81       	ld	r22, Z
    3a48:	71 81       	ldd	r23, Z+1	; 0x01
    3a4a:	82 81       	ldd	r24, Z+2	; 0x02
    3a4c:	93 81       	ldd	r25, Z+3	; 0x03
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e2       	ldi	r20, 0x20	; 32
    3a54:	51 e4       	ldi	r21, 0x41	; 65
    3a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	8e 01       	movw	r16, r28
    3a60:	01 56       	subi	r16, 0x61	; 97
    3a62:	1f 4f       	sbci	r17, 0xFF	; 255
    3a64:	bc 01       	movw	r22, r24
    3a66:	cd 01       	movw	r24, r26
    3a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	f8 01       	movw	r30, r16
    3a72:	91 83       	std	Z+1, r25	; 0x01
    3a74:	80 83       	st	Z, r24
    3a76:	1f c0       	rjmp	.+62     	; 0x3ab6 <Robot_voidComparisonlogic+0x15a>
    3a78:	fe 01       	movw	r30, r28
    3a7a:	e3 56       	subi	r30, 0x63	; 99
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	88 ec       	ldi	r24, 0xC8	; 200
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	91 83       	std	Z+1, r25	; 0x01
    3a84:	80 83       	st	Z, r24
    3a86:	fe 01       	movw	r30, r28
    3a88:	e3 56       	subi	r30, 0x63	; 99
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	80 81       	ld	r24, Z
    3a8e:	91 81       	ldd	r25, Z+1	; 0x01
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	f1 f7       	brne	.-4      	; 0x3a90 <Robot_voidComparisonlogic+0x134>
    3a94:	fe 01       	movw	r30, r28
    3a96:	e3 56       	subi	r30, 0x63	; 99
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	91 83       	std	Z+1, r25	; 0x01
    3a9c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9e:	de 01       	movw	r26, r28
    3aa0:	a1 56       	subi	r26, 0x61	; 97
    3aa2:	bf 4f       	sbci	r27, 0xFF	; 255
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	e1 56       	subi	r30, 0x61	; 97
    3aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aaa:	80 81       	ld	r24, Z
    3aac:	91 81       	ldd	r25, Z+1	; 0x01
    3aae:	01 97       	sbiw	r24, 0x01	; 1
    3ab0:	11 96       	adiw	r26, 0x01	; 1
    3ab2:	9c 93       	st	X, r25
    3ab4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	e1 56       	subi	r30, 0x61	; 97
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	80 81       	ld	r24, Z
    3abe:	91 81       	ldd	r25, Z+1	; 0x01
    3ac0:	00 97       	sbiw	r24, 0x00	; 0
    3ac2:	d1 f6       	brne	.-76     	; 0x3a78 <Robot_voidComparisonlogic+0x11c>
    3ac4:	27 c0       	rjmp	.+78     	; 0x3b14 <Robot_voidComparisonlogic+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac6:	8e 01       	movw	r16, r28
    3ac8:	01 56       	subi	r16, 0x61	; 97
    3aca:	1f 4f       	sbci	r17, 0xFF	; 255
    3acc:	fe 01       	movw	r30, r28
    3ace:	ef 55       	subi	r30, 0x5F	; 95
    3ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad2:	60 81       	ld	r22, Z
    3ad4:	71 81       	ldd	r23, Z+1	; 0x01
    3ad6:	82 81       	ldd	r24, Z+2	; 0x02
    3ad8:	93 81       	ldd	r25, Z+3	; 0x03
    3ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	f8 01       	movw	r30, r16
    3ae4:	91 83       	std	Z+1, r25	; 0x01
    3ae6:	80 83       	st	Z, r24
    3ae8:	de 01       	movw	r26, r28
    3aea:	a5 56       	subi	r26, 0x65	; 101
    3aec:	bf 4f       	sbci	r27, 0xFF	; 255
    3aee:	fe 01       	movw	r30, r28
    3af0:	e1 56       	subi	r30, 0x61	; 97
    3af2:	ff 4f       	sbci	r31, 0xFF	; 255
    3af4:	80 81       	ld	r24, Z
    3af6:	91 81       	ldd	r25, Z+1	; 0x01
    3af8:	8d 93       	st	X+, r24
    3afa:	9c 93       	st	X, r25
    3afc:	fe 01       	movw	r30, r28
    3afe:	e5 56       	subi	r30, 0x65	; 101
    3b00:	ff 4f       	sbci	r31, 0xFF	; 255
    3b02:	80 81       	ld	r24, Z
    3b04:	91 81       	ldd	r25, Z+1	; 0x01
    3b06:	01 97       	sbiw	r24, 0x01	; 1
    3b08:	f1 f7       	brne	.-4      	; 0x3b06 <Robot_voidComparisonlogic+0x1aa>
    3b0a:	fe 01       	movw	r30, r28
    3b0c:	e5 56       	subi	r30, 0x65	; 101
    3b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b10:	91 83       	std	Z+1, r25	; 0x01
    3b12:	80 83       	st	Z, r24
    	    _delay_ms(200);
    	    BUZZER_voidBuzzer_Work(BUZZER_OFF);
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	e9 56       	subi	r30, 0x69	; 105
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	80 e0       	ldi	r24, 0x00	; 0
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	a8 e4       	ldi	r26, 0x48	; 72
    3b26:	b3 e4       	ldi	r27, 0x43	; 67
    3b28:	80 83       	st	Z, r24
    3b2a:	91 83       	std	Z+1, r25	; 0x01
    3b2c:	a2 83       	std	Z+2, r26	; 0x02
    3b2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b30:	8e 01       	movw	r16, r28
    3b32:	0d 56       	subi	r16, 0x6D	; 109
    3b34:	1f 4f       	sbci	r17, 0xFF	; 255
    3b36:	fe 01       	movw	r30, r28
    3b38:	e9 56       	subi	r30, 0x69	; 105
    3b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3c:	60 81       	ld	r22, Z
    3b3e:	71 81       	ldd	r23, Z+1	; 0x01
    3b40:	82 81       	ldd	r24, Z+2	; 0x02
    3b42:	93 81       	ldd	r25, Z+3	; 0x03
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	4a ef       	ldi	r20, 0xFA	; 250
    3b4a:	54 e4       	ldi	r21, 0x44	; 68
    3b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	f8 01       	movw	r30, r16
    3b56:	80 83       	st	Z, r24
    3b58:	91 83       	std	Z+1, r25	; 0x01
    3b5a:	a2 83       	std	Z+2, r26	; 0x02
    3b5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b5e:	fe 01       	movw	r30, r28
    3b60:	ed 56       	subi	r30, 0x6D	; 109
    3b62:	ff 4f       	sbci	r31, 0xFF	; 255
    3b64:	60 81       	ld	r22, Z
    3b66:	71 81       	ldd	r23, Z+1	; 0x01
    3b68:	82 81       	ldd	r24, Z+2	; 0x02
    3b6a:	93 81       	ldd	r25, Z+3	; 0x03
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	40 e8       	ldi	r20, 0x80	; 128
    3b72:	5f e3       	ldi	r21, 0x3F	; 63
    3b74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b78:	88 23       	and	r24, r24
    3b7a:	44 f4       	brge	.+16     	; 0x3b8c <Robot_voidComparisonlogic+0x230>
		__ticks = 1;
    3b7c:	fe 01       	movw	r30, r28
    3b7e:	ef 56       	subi	r30, 0x6F	; 111
    3b80:	ff 4f       	sbci	r31, 0xFF	; 255
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	91 83       	std	Z+1, r25	; 0x01
    3b88:	80 83       	st	Z, r24
    3b8a:	64 c0       	rjmp	.+200    	; 0x3c54 <Robot_voidComparisonlogic+0x2f8>
	else if (__tmp > 65535)
    3b8c:	fe 01       	movw	r30, r28
    3b8e:	ed 56       	subi	r30, 0x6D	; 109
    3b90:	ff 4f       	sbci	r31, 0xFF	; 255
    3b92:	60 81       	ld	r22, Z
    3b94:	71 81       	ldd	r23, Z+1	; 0x01
    3b96:	82 81       	ldd	r24, Z+2	; 0x02
    3b98:	93 81       	ldd	r25, Z+3	; 0x03
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	3f ef       	ldi	r19, 0xFF	; 255
    3b9e:	4f e7       	ldi	r20, 0x7F	; 127
    3ba0:	57 e4       	ldi	r21, 0x47	; 71
    3ba2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ba6:	18 16       	cp	r1, r24
    3ba8:	0c f0       	brlt	.+2      	; 0x3bac <Robot_voidComparisonlogic+0x250>
    3baa:	43 c0       	rjmp	.+134    	; 0x3c32 <Robot_voidComparisonlogic+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bac:	fe 01       	movw	r30, r28
    3bae:	e9 56       	subi	r30, 0x69	; 105
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	60 81       	ld	r22, Z
    3bb4:	71 81       	ldd	r23, Z+1	; 0x01
    3bb6:	82 81       	ldd	r24, Z+2	; 0x02
    3bb8:	93 81       	ldd	r25, Z+3	; 0x03
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	40 e2       	ldi	r20, 0x20	; 32
    3bc0:	51 e4       	ldi	r21, 0x41	; 65
    3bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	8e 01       	movw	r16, r28
    3bcc:	0f 56       	subi	r16, 0x6F	; 111
    3bce:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd0:	bc 01       	movw	r22, r24
    3bd2:	cd 01       	movw	r24, r26
    3bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd8:	dc 01       	movw	r26, r24
    3bda:	cb 01       	movw	r24, r22
    3bdc:	f8 01       	movw	r30, r16
    3bde:	91 83       	std	Z+1, r25	; 0x01
    3be0:	80 83       	st	Z, r24
    3be2:	1f c0       	rjmp	.+62     	; 0x3c22 <Robot_voidComparisonlogic+0x2c6>
    3be4:	fe 01       	movw	r30, r28
    3be6:	e1 57       	subi	r30, 0x71	; 113
    3be8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bea:	88 ec       	ldi	r24, 0xC8	; 200
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	91 83       	std	Z+1, r25	; 0x01
    3bf0:	80 83       	st	Z, r24
    3bf2:	fe 01       	movw	r30, r28
    3bf4:	e1 57       	subi	r30, 0x71	; 113
    3bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf8:	80 81       	ld	r24, Z
    3bfa:	91 81       	ldd	r25, Z+1	; 0x01
    3bfc:	01 97       	sbiw	r24, 0x01	; 1
    3bfe:	f1 f7       	brne	.-4      	; 0x3bfc <Robot_voidComparisonlogic+0x2a0>
    3c00:	fe 01       	movw	r30, r28
    3c02:	e1 57       	subi	r30, 0x71	; 113
    3c04:	ff 4f       	sbci	r31, 0xFF	; 255
    3c06:	91 83       	std	Z+1, r25	; 0x01
    3c08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c0a:	de 01       	movw	r26, r28
    3c0c:	af 56       	subi	r26, 0x6F	; 111
    3c0e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c10:	fe 01       	movw	r30, r28
    3c12:	ef 56       	subi	r30, 0x6F	; 111
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	80 81       	ld	r24, Z
    3c18:	91 81       	ldd	r25, Z+1	; 0x01
    3c1a:	01 97       	sbiw	r24, 0x01	; 1
    3c1c:	11 96       	adiw	r26, 0x01	; 1
    3c1e:	9c 93       	st	X, r25
    3c20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c22:	fe 01       	movw	r30, r28
    3c24:	ef 56       	subi	r30, 0x6F	; 111
    3c26:	ff 4f       	sbci	r31, 0xFF	; 255
    3c28:	80 81       	ld	r24, Z
    3c2a:	91 81       	ldd	r25, Z+1	; 0x01
    3c2c:	00 97       	sbiw	r24, 0x00	; 0
    3c2e:	d1 f6       	brne	.-76     	; 0x3be4 <Robot_voidComparisonlogic+0x288>
    3c30:	27 c0       	rjmp	.+78     	; 0x3c80 <Robot_voidComparisonlogic+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c32:	8e 01       	movw	r16, r28
    3c34:	0f 56       	subi	r16, 0x6F	; 111
    3c36:	1f 4f       	sbci	r17, 0xFF	; 255
    3c38:	fe 01       	movw	r30, r28
    3c3a:	ed 56       	subi	r30, 0x6D	; 109
    3c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3e:	60 81       	ld	r22, Z
    3c40:	71 81       	ldd	r23, Z+1	; 0x01
    3c42:	82 81       	ldd	r24, Z+2	; 0x02
    3c44:	93 81       	ldd	r25, Z+3	; 0x03
    3c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	f8 01       	movw	r30, r16
    3c50:	91 83       	std	Z+1, r25	; 0x01
    3c52:	80 83       	st	Z, r24
    3c54:	de 01       	movw	r26, r28
    3c56:	a3 57       	subi	r26, 0x73	; 115
    3c58:	bf 4f       	sbci	r27, 0xFF	; 255
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	ef 56       	subi	r30, 0x6F	; 111
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	80 81       	ld	r24, Z
    3c62:	91 81       	ldd	r25, Z+1	; 0x01
    3c64:	8d 93       	st	X+, r24
    3c66:	9c 93       	st	X, r25
    3c68:	fe 01       	movw	r30, r28
    3c6a:	e3 57       	subi	r30, 0x73	; 115
    3c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6e:	80 81       	ld	r24, Z
    3c70:	91 81       	ldd	r25, Z+1	; 0x01
    3c72:	01 97       	sbiw	r24, 0x01	; 1
    3c74:	f1 f7       	brne	.-4      	; 0x3c72 <Robot_voidComparisonlogic+0x316>
    3c76:	fe 01       	movw	r30, r28
    3c78:	e3 57       	subi	r30, 0x73	; 115
    3c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7c:	91 83       	std	Z+1, r25	; 0x01
    3c7e:	80 83       	st	Z, r24
    	    _delay_ms(200);

    	  Robot_voidLeft90();
    3c80:	0e 94 98 19 	call	0x3330	; 0x3330 <Robot_voidLeft90>

		    BUZZER_voidBuzzer_Work(BUZZER_ON);
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	e7 57       	subi	r30, 0x77	; 119
    3c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c90:	80 e0       	ldi	r24, 0x00	; 0
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	a8 e4       	ldi	r26, 0x48	; 72
    3c96:	b3 e4       	ldi	r27, 0x43	; 67
    3c98:	80 83       	st	Z, r24
    3c9a:	91 83       	std	Z+1, r25	; 0x01
    3c9c:	a2 83       	std	Z+2, r26	; 0x02
    3c9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ca0:	8e 01       	movw	r16, r28
    3ca2:	0b 57       	subi	r16, 0x7B	; 123
    3ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca6:	fe 01       	movw	r30, r28
    3ca8:	e7 57       	subi	r30, 0x77	; 119
    3caa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cac:	60 81       	ld	r22, Z
    3cae:	71 81       	ldd	r23, Z+1	; 0x01
    3cb0:	82 81       	ldd	r24, Z+2	; 0x02
    3cb2:	93 81       	ldd	r25, Z+3	; 0x03
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	4a ef       	ldi	r20, 0xFA	; 250
    3cba:	54 e4       	ldi	r21, 0x44	; 68
    3cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	f8 01       	movw	r30, r16
    3cc6:	80 83       	st	Z, r24
    3cc8:	91 83       	std	Z+1, r25	; 0x01
    3cca:	a2 83       	std	Z+2, r26	; 0x02
    3ccc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cce:	fe 01       	movw	r30, r28
    3cd0:	eb 57       	subi	r30, 0x7B	; 123
    3cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd4:	60 81       	ld	r22, Z
    3cd6:	71 81       	ldd	r23, Z+1	; 0x01
    3cd8:	82 81       	ldd	r24, Z+2	; 0x02
    3cda:	93 81       	ldd	r25, Z+3	; 0x03
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	40 e8       	ldi	r20, 0x80	; 128
    3ce2:	5f e3       	ldi	r21, 0x3F	; 63
    3ce4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ce8:	88 23       	and	r24, r24
    3cea:	44 f4       	brge	.+16     	; 0x3cfc <Robot_voidComparisonlogic+0x3a0>
		__ticks = 1;
    3cec:	fe 01       	movw	r30, r28
    3cee:	ed 57       	subi	r30, 0x7D	; 125
    3cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf2:	81 e0       	ldi	r24, 0x01	; 1
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	91 83       	std	Z+1, r25	; 0x01
    3cf8:	80 83       	st	Z, r24
    3cfa:	64 c0       	rjmp	.+200    	; 0x3dc4 <Robot_voidComparisonlogic+0x468>
	else if (__tmp > 65535)
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	eb 57       	subi	r30, 0x7B	; 123
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	60 81       	ld	r22, Z
    3d04:	71 81       	ldd	r23, Z+1	; 0x01
    3d06:	82 81       	ldd	r24, Z+2	; 0x02
    3d08:	93 81       	ldd	r25, Z+3	; 0x03
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	3f ef       	ldi	r19, 0xFF	; 255
    3d0e:	4f e7       	ldi	r20, 0x7F	; 127
    3d10:	57 e4       	ldi	r21, 0x47	; 71
    3d12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d16:	18 16       	cp	r1, r24
    3d18:	0c f0       	brlt	.+2      	; 0x3d1c <Robot_voidComparisonlogic+0x3c0>
    3d1a:	43 c0       	rjmp	.+134    	; 0x3da2 <Robot_voidComparisonlogic+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	e7 57       	subi	r30, 0x77	; 119
    3d20:	ff 4f       	sbci	r31, 0xFF	; 255
    3d22:	60 81       	ld	r22, Z
    3d24:	71 81       	ldd	r23, Z+1	; 0x01
    3d26:	82 81       	ldd	r24, Z+2	; 0x02
    3d28:	93 81       	ldd	r25, Z+3	; 0x03
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	40 e2       	ldi	r20, 0x20	; 32
    3d30:	51 e4       	ldi	r21, 0x41	; 65
    3d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d36:	dc 01       	movw	r26, r24
    3d38:	cb 01       	movw	r24, r22
    3d3a:	8e 01       	movw	r16, r28
    3d3c:	0d 57       	subi	r16, 0x7D	; 125
    3d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d40:	bc 01       	movw	r22, r24
    3d42:	cd 01       	movw	r24, r26
    3d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	f8 01       	movw	r30, r16
    3d4e:	91 83       	std	Z+1, r25	; 0x01
    3d50:	80 83       	st	Z, r24
    3d52:	1f c0       	rjmp	.+62     	; 0x3d92 <Robot_voidComparisonlogic+0x436>
    3d54:	fe 01       	movw	r30, r28
    3d56:	ef 57       	subi	r30, 0x7F	; 127
    3d58:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5a:	88 ec       	ldi	r24, 0xC8	; 200
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	91 83       	std	Z+1, r25	; 0x01
    3d60:	80 83       	st	Z, r24
    3d62:	fe 01       	movw	r30, r28
    3d64:	ef 57       	subi	r30, 0x7F	; 127
    3d66:	ff 4f       	sbci	r31, 0xFF	; 255
    3d68:	80 81       	ld	r24, Z
    3d6a:	91 81       	ldd	r25, Z+1	; 0x01
    3d6c:	01 97       	sbiw	r24, 0x01	; 1
    3d6e:	f1 f7       	brne	.-4      	; 0x3d6c <Robot_voidComparisonlogic+0x410>
    3d70:	fe 01       	movw	r30, r28
    3d72:	ef 57       	subi	r30, 0x7F	; 127
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	91 83       	std	Z+1, r25	; 0x01
    3d78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7a:	de 01       	movw	r26, r28
    3d7c:	ad 57       	subi	r26, 0x7D	; 125
    3d7e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d80:	fe 01       	movw	r30, r28
    3d82:	ed 57       	subi	r30, 0x7D	; 125
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	80 81       	ld	r24, Z
    3d88:	91 81       	ldd	r25, Z+1	; 0x01
    3d8a:	01 97       	sbiw	r24, 0x01	; 1
    3d8c:	11 96       	adiw	r26, 0x01	; 1
    3d8e:	9c 93       	st	X, r25
    3d90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d92:	fe 01       	movw	r30, r28
    3d94:	ed 57       	subi	r30, 0x7D	; 125
    3d96:	ff 4f       	sbci	r31, 0xFF	; 255
    3d98:	80 81       	ld	r24, Z
    3d9a:	91 81       	ldd	r25, Z+1	; 0x01
    3d9c:	00 97       	sbiw	r24, 0x00	; 0
    3d9e:	d1 f6       	brne	.-76     	; 0x3d54 <Robot_voidComparisonlogic+0x3f8>
    3da0:	27 c0       	rjmp	.+78     	; 0x3df0 <Robot_voidComparisonlogic+0x494>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3da2:	8e 01       	movw	r16, r28
    3da4:	0d 57       	subi	r16, 0x7D	; 125
    3da6:	1f 4f       	sbci	r17, 0xFF	; 255
    3da8:	fe 01       	movw	r30, r28
    3daa:	eb 57       	subi	r30, 0x7B	; 123
    3dac:	ff 4f       	sbci	r31, 0xFF	; 255
    3dae:	60 81       	ld	r22, Z
    3db0:	71 81       	ldd	r23, Z+1	; 0x01
    3db2:	82 81       	ldd	r24, Z+2	; 0x02
    3db4:	93 81       	ldd	r25, Z+3	; 0x03
    3db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	f8 01       	movw	r30, r16
    3dc0:	91 83       	std	Z+1, r25	; 0x01
    3dc2:	80 83       	st	Z, r24
    3dc4:	de 01       	movw	r26, r28
    3dc6:	a1 58       	subi	r26, 0x81	; 129
    3dc8:	bf 4f       	sbci	r27, 0xFF	; 255
    3dca:	fe 01       	movw	r30, r28
    3dcc:	ed 57       	subi	r30, 0x7D	; 125
    3dce:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd0:	80 81       	ld	r24, Z
    3dd2:	91 81       	ldd	r25, Z+1	; 0x01
    3dd4:	8d 93       	st	X+, r24
    3dd6:	9c 93       	st	X, r25
    3dd8:	fe 01       	movw	r30, r28
    3dda:	e1 58       	subi	r30, 0x81	; 129
    3ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dde:	80 81       	ld	r24, Z
    3de0:	91 81       	ldd	r25, Z+1	; 0x01
    3de2:	01 97       	sbiw	r24, 0x01	; 1
    3de4:	f1 f7       	brne	.-4      	; 0x3de2 <Robot_voidComparisonlogic+0x486>
    3de6:	fe 01       	movw	r30, r28
    3de8:	e1 58       	subi	r30, 0x81	; 129
    3dea:	ff 4f       	sbci	r31, 0xFF	; 255
    3dec:	91 83       	std	Z+1, r25	; 0x01
    3dee:	80 83       	st	Z, r24
		    _delay_ms(200);
		    BUZZER_voidBuzzer_Work(BUZZER_OFF);
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    3df6:	fe 01       	movw	r30, r28
    3df8:	e5 58       	subi	r30, 0x85	; 133
    3dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	a8 e4       	ldi	r26, 0x48	; 72
    3e02:	b3 e4       	ldi	r27, 0x43	; 67
    3e04:	80 83       	st	Z, r24
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	a2 83       	std	Z+2, r26	; 0x02
    3e0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e0c:	8e 01       	movw	r16, r28
    3e0e:	09 58       	subi	r16, 0x89	; 137
    3e10:	1f 4f       	sbci	r17, 0xFF	; 255
    3e12:	fe 01       	movw	r30, r28
    3e14:	e5 58       	subi	r30, 0x85	; 133
    3e16:	ff 4f       	sbci	r31, 0xFF	; 255
    3e18:	60 81       	ld	r22, Z
    3e1a:	71 81       	ldd	r23, Z+1	; 0x01
    3e1c:	82 81       	ldd	r24, Z+2	; 0x02
    3e1e:	93 81       	ldd	r25, Z+3	; 0x03
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	4a ef       	ldi	r20, 0xFA	; 250
    3e26:	54 e4       	ldi	r21, 0x44	; 68
    3e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cb 01       	movw	r24, r22
    3e30:	f8 01       	movw	r30, r16
    3e32:	80 83       	st	Z, r24
    3e34:	91 83       	std	Z+1, r25	; 0x01
    3e36:	a2 83       	std	Z+2, r26	; 0x02
    3e38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	e9 58       	subi	r30, 0x89	; 137
    3e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e40:	60 81       	ld	r22, Z
    3e42:	71 81       	ldd	r23, Z+1	; 0x01
    3e44:	82 81       	ldd	r24, Z+2	; 0x02
    3e46:	93 81       	ldd	r25, Z+3	; 0x03
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	40 e8       	ldi	r20, 0x80	; 128
    3e4e:	5f e3       	ldi	r21, 0x3F	; 63
    3e50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e54:	88 23       	and	r24, r24
    3e56:	44 f4       	brge	.+16     	; 0x3e68 <Robot_voidComparisonlogic+0x50c>
		__ticks = 1;
    3e58:	fe 01       	movw	r30, r28
    3e5a:	eb 58       	subi	r30, 0x8B	; 139
    3e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	91 83       	std	Z+1, r25	; 0x01
    3e64:	80 83       	st	Z, r24
    3e66:	64 c0       	rjmp	.+200    	; 0x3f30 <Robot_voidComparisonlogic+0x5d4>
	else if (__tmp > 65535)
    3e68:	fe 01       	movw	r30, r28
    3e6a:	e9 58       	subi	r30, 0x89	; 137
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	60 81       	ld	r22, Z
    3e70:	71 81       	ldd	r23, Z+1	; 0x01
    3e72:	82 81       	ldd	r24, Z+2	; 0x02
    3e74:	93 81       	ldd	r25, Z+3	; 0x03
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	3f ef       	ldi	r19, 0xFF	; 255
    3e7a:	4f e7       	ldi	r20, 0x7F	; 127
    3e7c:	57 e4       	ldi	r21, 0x47	; 71
    3e7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e82:	18 16       	cp	r1, r24
    3e84:	0c f0       	brlt	.+2      	; 0x3e88 <Robot_voidComparisonlogic+0x52c>
    3e86:	43 c0       	rjmp	.+134    	; 0x3f0e <Robot_voidComparisonlogic+0x5b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e88:	fe 01       	movw	r30, r28
    3e8a:	e5 58       	subi	r30, 0x85	; 133
    3e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8e:	60 81       	ld	r22, Z
    3e90:	71 81       	ldd	r23, Z+1	; 0x01
    3e92:	82 81       	ldd	r24, Z+2	; 0x02
    3e94:	93 81       	ldd	r25, Z+3	; 0x03
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	40 e2       	ldi	r20, 0x20	; 32
    3e9c:	51 e4       	ldi	r21, 0x41	; 65
    3e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	8e 01       	movw	r16, r28
    3ea8:	0b 58       	subi	r16, 0x8B	; 139
    3eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    3eac:	bc 01       	movw	r22, r24
    3eae:	cd 01       	movw	r24, r26
    3eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	f8 01       	movw	r30, r16
    3eba:	91 83       	std	Z+1, r25	; 0x01
    3ebc:	80 83       	st	Z, r24
    3ebe:	1f c0       	rjmp	.+62     	; 0x3efe <Robot_voidComparisonlogic+0x5a2>
    3ec0:	fe 01       	movw	r30, r28
    3ec2:	ed 58       	subi	r30, 0x8D	; 141
    3ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec6:	88 ec       	ldi	r24, 0xC8	; 200
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	91 83       	std	Z+1, r25	; 0x01
    3ecc:	80 83       	st	Z, r24
    3ece:	fe 01       	movw	r30, r28
    3ed0:	ed 58       	subi	r30, 0x8D	; 141
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	80 81       	ld	r24, Z
    3ed6:	91 81       	ldd	r25, Z+1	; 0x01
    3ed8:	01 97       	sbiw	r24, 0x01	; 1
    3eda:	f1 f7       	brne	.-4      	; 0x3ed8 <Robot_voidComparisonlogic+0x57c>
    3edc:	fe 01       	movw	r30, r28
    3ede:	ed 58       	subi	r30, 0x8D	; 141
    3ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee2:	91 83       	std	Z+1, r25	; 0x01
    3ee4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ee6:	de 01       	movw	r26, r28
    3ee8:	ab 58       	subi	r26, 0x8B	; 139
    3eea:	bf 4f       	sbci	r27, 0xFF	; 255
    3eec:	fe 01       	movw	r30, r28
    3eee:	eb 58       	subi	r30, 0x8B	; 139
    3ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef2:	80 81       	ld	r24, Z
    3ef4:	91 81       	ldd	r25, Z+1	; 0x01
    3ef6:	01 97       	sbiw	r24, 0x01	; 1
    3ef8:	11 96       	adiw	r26, 0x01	; 1
    3efa:	9c 93       	st	X, r25
    3efc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3efe:	fe 01       	movw	r30, r28
    3f00:	eb 58       	subi	r30, 0x8B	; 139
    3f02:	ff 4f       	sbci	r31, 0xFF	; 255
    3f04:	80 81       	ld	r24, Z
    3f06:	91 81       	ldd	r25, Z+1	; 0x01
    3f08:	00 97       	sbiw	r24, 0x00	; 0
    3f0a:	d1 f6       	brne	.-76     	; 0x3ec0 <Robot_voidComparisonlogic+0x564>
    3f0c:	cd c4       	rjmp	.+2458   	; 0x48a8 <Robot_voidComparisonlogic+0xf4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f0e:	8e 01       	movw	r16, r28
    3f10:	0b 58       	subi	r16, 0x8B	; 139
    3f12:	1f 4f       	sbci	r17, 0xFF	; 255
    3f14:	fe 01       	movw	r30, r28
    3f16:	e9 58       	subi	r30, 0x89	; 137
    3f18:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1a:	60 81       	ld	r22, Z
    3f1c:	71 81       	ldd	r23, Z+1	; 0x01
    3f1e:	82 81       	ldd	r24, Z+2	; 0x02
    3f20:	93 81       	ldd	r25, Z+3	; 0x03
    3f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	f8 01       	movw	r30, r16
    3f2c:	91 83       	std	Z+1, r25	; 0x01
    3f2e:	80 83       	st	Z, r24
    3f30:	de 01       	movw	r26, r28
    3f32:	af 58       	subi	r26, 0x8F	; 143
    3f34:	bf 4f       	sbci	r27, 0xFF	; 255
    3f36:	fe 01       	movw	r30, r28
    3f38:	eb 58       	subi	r30, 0x8B	; 139
    3f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3c:	80 81       	ld	r24, Z
    3f3e:	91 81       	ldd	r25, Z+1	; 0x01
    3f40:	11 96       	adiw	r26, 0x01	; 1
    3f42:	9c 93       	st	X, r25
    3f44:	8e 93       	st	-X, r24
    3f46:	fe 01       	movw	r30, r28
    3f48:	ef 58       	subi	r30, 0x8F	; 143
    3f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4c:	80 81       	ld	r24, Z
    3f4e:	91 81       	ldd	r25, Z+1	; 0x01
    3f50:	01 97       	sbiw	r24, 0x01	; 1
    3f52:	f1 f7       	brne	.-4      	; 0x3f50 <Robot_voidComparisonlogic+0x5f4>
    3f54:	fe 01       	movw	r30, r28
    3f56:	ef 58       	subi	r30, 0x8F	; 143
    3f58:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5a:	91 83       	std	Z+1, r25	; 0x01
    3f5c:	80 83       	st	Z, r24
    3f5e:	a4 c4       	rjmp	.+2376   	; 0x48a8 <Robot_voidComparisonlogic+0xf4c>
		    _delay_ms(200);
      }
      else if (Copy_u16LeftObject<=Copy_u16RightObject)
    3f60:	fe 01       	movw	r30, r28
    3f62:	e7 55       	subi	r30, 0x57	; 87
    3f64:	ff 4f       	sbci	r31, 0xFF	; 255
    3f66:	de 01       	movw	r26, r28
    3f68:	a5 55       	subi	r26, 0x55	; 85
    3f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f6c:	20 81       	ld	r18, Z
    3f6e:	31 81       	ldd	r19, Z+1	; 0x01
    3f70:	8d 91       	ld	r24, X+
    3f72:	9c 91       	ld	r25, X
    3f74:	11 97       	sbiw	r26, 0x01	; 1
    3f76:	82 17       	cp	r24, r18
    3f78:	93 07       	cpc	r25, r19
    3f7a:	08 f4       	brcc	.+2      	; 0x3f7e <Robot_voidComparisonlogic+0x622>
    3f7c:	ad c2       	rjmp	.+1370   	; 0x44d8 <Robot_voidComparisonlogic+0xb7c>
      {
    	    BUZZER_voidBuzzer_Work(BUZZER_ON);
    3f7e:	81 e0       	ldi	r24, 0x01	; 1
    3f80:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    3f84:	fe 01       	movw	r30, r28
    3f86:	e3 59       	subi	r30, 0x93	; 147
    3f88:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8a:	80 e0       	ldi	r24, 0x00	; 0
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	a8 e4       	ldi	r26, 0x48	; 72
    3f90:	b3 e4       	ldi	r27, 0x43	; 67
    3f92:	80 83       	st	Z, r24
    3f94:	91 83       	std	Z+1, r25	; 0x01
    3f96:	a2 83       	std	Z+2, r26	; 0x02
    3f98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f9a:	8e 01       	movw	r16, r28
    3f9c:	07 59       	subi	r16, 0x97	; 151
    3f9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa0:	fe 01       	movw	r30, r28
    3fa2:	e3 59       	subi	r30, 0x93	; 147
    3fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa6:	60 81       	ld	r22, Z
    3fa8:	71 81       	ldd	r23, Z+1	; 0x01
    3faa:	82 81       	ldd	r24, Z+2	; 0x02
    3fac:	93 81       	ldd	r25, Z+3	; 0x03
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	4a ef       	ldi	r20, 0xFA	; 250
    3fb4:	54 e4       	ldi	r21, 0x44	; 68
    3fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fba:	dc 01       	movw	r26, r24
    3fbc:	cb 01       	movw	r24, r22
    3fbe:	f8 01       	movw	r30, r16
    3fc0:	80 83       	st	Z, r24
    3fc2:	91 83       	std	Z+1, r25	; 0x01
    3fc4:	a2 83       	std	Z+2, r26	; 0x02
    3fc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fc8:	fe 01       	movw	r30, r28
    3fca:	e7 59       	subi	r30, 0x97	; 151
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	60 81       	ld	r22, Z
    3fd0:	71 81       	ldd	r23, Z+1	; 0x01
    3fd2:	82 81       	ldd	r24, Z+2	; 0x02
    3fd4:	93 81       	ldd	r25, Z+3	; 0x03
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	40 e8       	ldi	r20, 0x80	; 128
    3fdc:	5f e3       	ldi	r21, 0x3F	; 63
    3fde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fe2:	88 23       	and	r24, r24
    3fe4:	44 f4       	brge	.+16     	; 0x3ff6 <Robot_voidComparisonlogic+0x69a>
		__ticks = 1;
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	e9 59       	subi	r30, 0x99	; 153
    3fea:	ff 4f       	sbci	r31, 0xFF	; 255
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	91 83       	std	Z+1, r25	; 0x01
    3ff2:	80 83       	st	Z, r24
    3ff4:	64 c0       	rjmp	.+200    	; 0x40be <Robot_voidComparisonlogic+0x762>
	else if (__tmp > 65535)
    3ff6:	fe 01       	movw	r30, r28
    3ff8:	e7 59       	subi	r30, 0x97	; 151
    3ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffc:	60 81       	ld	r22, Z
    3ffe:	71 81       	ldd	r23, Z+1	; 0x01
    4000:	82 81       	ldd	r24, Z+2	; 0x02
    4002:	93 81       	ldd	r25, Z+3	; 0x03
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	3f ef       	ldi	r19, 0xFF	; 255
    4008:	4f e7       	ldi	r20, 0x7F	; 127
    400a:	57 e4       	ldi	r21, 0x47	; 71
    400c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4010:	18 16       	cp	r1, r24
    4012:	0c f0       	brlt	.+2      	; 0x4016 <Robot_voidComparisonlogic+0x6ba>
    4014:	43 c0       	rjmp	.+134    	; 0x409c <Robot_voidComparisonlogic+0x740>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4016:	fe 01       	movw	r30, r28
    4018:	e3 59       	subi	r30, 0x93	; 147
    401a:	ff 4f       	sbci	r31, 0xFF	; 255
    401c:	60 81       	ld	r22, Z
    401e:	71 81       	ldd	r23, Z+1	; 0x01
    4020:	82 81       	ldd	r24, Z+2	; 0x02
    4022:	93 81       	ldd	r25, Z+3	; 0x03
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	40 e2       	ldi	r20, 0x20	; 32
    402a:	51 e4       	ldi	r21, 0x41	; 65
    402c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4030:	dc 01       	movw	r26, r24
    4032:	cb 01       	movw	r24, r22
    4034:	8e 01       	movw	r16, r28
    4036:	09 59       	subi	r16, 0x99	; 153
    4038:	1f 4f       	sbci	r17, 0xFF	; 255
    403a:	bc 01       	movw	r22, r24
    403c:	cd 01       	movw	r24, r26
    403e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4042:	dc 01       	movw	r26, r24
    4044:	cb 01       	movw	r24, r22
    4046:	f8 01       	movw	r30, r16
    4048:	91 83       	std	Z+1, r25	; 0x01
    404a:	80 83       	st	Z, r24
    404c:	1f c0       	rjmp	.+62     	; 0x408c <Robot_voidComparisonlogic+0x730>
    404e:	fe 01       	movw	r30, r28
    4050:	eb 59       	subi	r30, 0x9B	; 155
    4052:	ff 4f       	sbci	r31, 0xFF	; 255
    4054:	88 ec       	ldi	r24, 0xC8	; 200
    4056:	90 e0       	ldi	r25, 0x00	; 0
    4058:	91 83       	std	Z+1, r25	; 0x01
    405a:	80 83       	st	Z, r24
    405c:	fe 01       	movw	r30, r28
    405e:	eb 59       	subi	r30, 0x9B	; 155
    4060:	ff 4f       	sbci	r31, 0xFF	; 255
    4062:	80 81       	ld	r24, Z
    4064:	91 81       	ldd	r25, Z+1	; 0x01
    4066:	01 97       	sbiw	r24, 0x01	; 1
    4068:	f1 f7       	brne	.-4      	; 0x4066 <Robot_voidComparisonlogic+0x70a>
    406a:	fe 01       	movw	r30, r28
    406c:	eb 59       	subi	r30, 0x9B	; 155
    406e:	ff 4f       	sbci	r31, 0xFF	; 255
    4070:	91 83       	std	Z+1, r25	; 0x01
    4072:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4074:	de 01       	movw	r26, r28
    4076:	a9 59       	subi	r26, 0x99	; 153
    4078:	bf 4f       	sbci	r27, 0xFF	; 255
    407a:	fe 01       	movw	r30, r28
    407c:	e9 59       	subi	r30, 0x99	; 153
    407e:	ff 4f       	sbci	r31, 0xFF	; 255
    4080:	80 81       	ld	r24, Z
    4082:	91 81       	ldd	r25, Z+1	; 0x01
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	11 96       	adiw	r26, 0x01	; 1
    4088:	9c 93       	st	X, r25
    408a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    408c:	fe 01       	movw	r30, r28
    408e:	e9 59       	subi	r30, 0x99	; 153
    4090:	ff 4f       	sbci	r31, 0xFF	; 255
    4092:	80 81       	ld	r24, Z
    4094:	91 81       	ldd	r25, Z+1	; 0x01
    4096:	00 97       	sbiw	r24, 0x00	; 0
    4098:	d1 f6       	brne	.-76     	; 0x404e <Robot_voidComparisonlogic+0x6f2>
    409a:	27 c0       	rjmp	.+78     	; 0x40ea <Robot_voidComparisonlogic+0x78e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    409c:	8e 01       	movw	r16, r28
    409e:	09 59       	subi	r16, 0x99	; 153
    40a0:	1f 4f       	sbci	r17, 0xFF	; 255
    40a2:	fe 01       	movw	r30, r28
    40a4:	e7 59       	subi	r30, 0x97	; 151
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	60 81       	ld	r22, Z
    40aa:	71 81       	ldd	r23, Z+1	; 0x01
    40ac:	82 81       	ldd	r24, Z+2	; 0x02
    40ae:	93 81       	ldd	r25, Z+3	; 0x03
    40b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	f8 01       	movw	r30, r16
    40ba:	91 83       	std	Z+1, r25	; 0x01
    40bc:	80 83       	st	Z, r24
    40be:	de 01       	movw	r26, r28
    40c0:	ad 59       	subi	r26, 0x9D	; 157
    40c2:	bf 4f       	sbci	r27, 0xFF	; 255
    40c4:	fe 01       	movw	r30, r28
    40c6:	e9 59       	subi	r30, 0x99	; 153
    40c8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ca:	80 81       	ld	r24, Z
    40cc:	91 81       	ldd	r25, Z+1	; 0x01
    40ce:	8d 93       	st	X+, r24
    40d0:	9c 93       	st	X, r25
    40d2:	fe 01       	movw	r30, r28
    40d4:	ed 59       	subi	r30, 0x9D	; 157
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	80 81       	ld	r24, Z
    40da:	91 81       	ldd	r25, Z+1	; 0x01
    40dc:	01 97       	sbiw	r24, 0x01	; 1
    40de:	f1 f7       	brne	.-4      	; 0x40dc <Robot_voidComparisonlogic+0x780>
    40e0:	fe 01       	movw	r30, r28
    40e2:	ed 59       	subi	r30, 0x9D	; 157
    40e4:	ff 4f       	sbci	r31, 0xFF	; 255
    40e6:	91 83       	std	Z+1, r25	; 0x01
    40e8:	80 83       	st	Z, r24
    	    _delay_ms(200);
    	    BUZZER_voidBuzzer_Work(BUZZER_OFF);
    40ea:	80 e0       	ldi	r24, 0x00	; 0
    40ec:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    40f0:	fe 01       	movw	r30, r28
    40f2:	e1 5a       	subi	r30, 0xA1	; 161
    40f4:	ff 4f       	sbci	r31, 0xFF	; 255
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	a8 e4       	ldi	r26, 0x48	; 72
    40fc:	b3 e4       	ldi	r27, 0x43	; 67
    40fe:	80 83       	st	Z, r24
    4100:	91 83       	std	Z+1, r25	; 0x01
    4102:	a2 83       	std	Z+2, r26	; 0x02
    4104:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4106:	8e 01       	movw	r16, r28
    4108:	05 5a       	subi	r16, 0xA5	; 165
    410a:	1f 4f       	sbci	r17, 0xFF	; 255
    410c:	fe 01       	movw	r30, r28
    410e:	e1 5a       	subi	r30, 0xA1	; 161
    4110:	ff 4f       	sbci	r31, 0xFF	; 255
    4112:	60 81       	ld	r22, Z
    4114:	71 81       	ldd	r23, Z+1	; 0x01
    4116:	82 81       	ldd	r24, Z+2	; 0x02
    4118:	93 81       	ldd	r25, Z+3	; 0x03
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	4a ef       	ldi	r20, 0xFA	; 250
    4120:	54 e4       	ldi	r21, 0x44	; 68
    4122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4126:	dc 01       	movw	r26, r24
    4128:	cb 01       	movw	r24, r22
    412a:	f8 01       	movw	r30, r16
    412c:	80 83       	st	Z, r24
    412e:	91 83       	std	Z+1, r25	; 0x01
    4130:	a2 83       	std	Z+2, r26	; 0x02
    4132:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4134:	fe 01       	movw	r30, r28
    4136:	e5 5a       	subi	r30, 0xA5	; 165
    4138:	ff 4f       	sbci	r31, 0xFF	; 255
    413a:	60 81       	ld	r22, Z
    413c:	71 81       	ldd	r23, Z+1	; 0x01
    413e:	82 81       	ldd	r24, Z+2	; 0x02
    4140:	93 81       	ldd	r25, Z+3	; 0x03
    4142:	20 e0       	ldi	r18, 0x00	; 0
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	40 e8       	ldi	r20, 0x80	; 128
    4148:	5f e3       	ldi	r21, 0x3F	; 63
    414a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    414e:	88 23       	and	r24, r24
    4150:	44 f4       	brge	.+16     	; 0x4162 <Robot_voidComparisonlogic+0x806>
		__ticks = 1;
    4152:	fe 01       	movw	r30, r28
    4154:	e7 5a       	subi	r30, 0xA7	; 167
    4156:	ff 4f       	sbci	r31, 0xFF	; 255
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	91 83       	std	Z+1, r25	; 0x01
    415e:	80 83       	st	Z, r24
    4160:	64 c0       	rjmp	.+200    	; 0x422a <Robot_voidComparisonlogic+0x8ce>
	else if (__tmp > 65535)
    4162:	fe 01       	movw	r30, r28
    4164:	e5 5a       	subi	r30, 0xA5	; 165
    4166:	ff 4f       	sbci	r31, 0xFF	; 255
    4168:	60 81       	ld	r22, Z
    416a:	71 81       	ldd	r23, Z+1	; 0x01
    416c:	82 81       	ldd	r24, Z+2	; 0x02
    416e:	93 81       	ldd	r25, Z+3	; 0x03
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	3f ef       	ldi	r19, 0xFF	; 255
    4174:	4f e7       	ldi	r20, 0x7F	; 127
    4176:	57 e4       	ldi	r21, 0x47	; 71
    4178:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    417c:	18 16       	cp	r1, r24
    417e:	0c f0       	brlt	.+2      	; 0x4182 <Robot_voidComparisonlogic+0x826>
    4180:	43 c0       	rjmp	.+134    	; 0x4208 <Robot_voidComparisonlogic+0x8ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4182:	fe 01       	movw	r30, r28
    4184:	e1 5a       	subi	r30, 0xA1	; 161
    4186:	ff 4f       	sbci	r31, 0xFF	; 255
    4188:	60 81       	ld	r22, Z
    418a:	71 81       	ldd	r23, Z+1	; 0x01
    418c:	82 81       	ldd	r24, Z+2	; 0x02
    418e:	93 81       	ldd	r25, Z+3	; 0x03
    4190:	20 e0       	ldi	r18, 0x00	; 0
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	40 e2       	ldi	r20, 0x20	; 32
    4196:	51 e4       	ldi	r21, 0x41	; 65
    4198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419c:	dc 01       	movw	r26, r24
    419e:	cb 01       	movw	r24, r22
    41a0:	8e 01       	movw	r16, r28
    41a2:	07 5a       	subi	r16, 0xA7	; 167
    41a4:	1f 4f       	sbci	r17, 0xFF	; 255
    41a6:	bc 01       	movw	r22, r24
    41a8:	cd 01       	movw	r24, r26
    41aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	f8 01       	movw	r30, r16
    41b4:	91 83       	std	Z+1, r25	; 0x01
    41b6:	80 83       	st	Z, r24
    41b8:	1f c0       	rjmp	.+62     	; 0x41f8 <Robot_voidComparisonlogic+0x89c>
    41ba:	fe 01       	movw	r30, r28
    41bc:	e9 5a       	subi	r30, 0xA9	; 169
    41be:	ff 4f       	sbci	r31, 0xFF	; 255
    41c0:	88 ec       	ldi	r24, 0xC8	; 200
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	91 83       	std	Z+1, r25	; 0x01
    41c6:	80 83       	st	Z, r24
    41c8:	fe 01       	movw	r30, r28
    41ca:	e9 5a       	subi	r30, 0xA9	; 169
    41cc:	ff 4f       	sbci	r31, 0xFF	; 255
    41ce:	80 81       	ld	r24, Z
    41d0:	91 81       	ldd	r25, Z+1	; 0x01
    41d2:	01 97       	sbiw	r24, 0x01	; 1
    41d4:	f1 f7       	brne	.-4      	; 0x41d2 <Robot_voidComparisonlogic+0x876>
    41d6:	fe 01       	movw	r30, r28
    41d8:	e9 5a       	subi	r30, 0xA9	; 169
    41da:	ff 4f       	sbci	r31, 0xFF	; 255
    41dc:	91 83       	std	Z+1, r25	; 0x01
    41de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e0:	de 01       	movw	r26, r28
    41e2:	a7 5a       	subi	r26, 0xA7	; 167
    41e4:	bf 4f       	sbci	r27, 0xFF	; 255
    41e6:	fe 01       	movw	r30, r28
    41e8:	e7 5a       	subi	r30, 0xA7	; 167
    41ea:	ff 4f       	sbci	r31, 0xFF	; 255
    41ec:	80 81       	ld	r24, Z
    41ee:	91 81       	ldd	r25, Z+1	; 0x01
    41f0:	01 97       	sbiw	r24, 0x01	; 1
    41f2:	11 96       	adiw	r26, 0x01	; 1
    41f4:	9c 93       	st	X, r25
    41f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f8:	fe 01       	movw	r30, r28
    41fa:	e7 5a       	subi	r30, 0xA7	; 167
    41fc:	ff 4f       	sbci	r31, 0xFF	; 255
    41fe:	80 81       	ld	r24, Z
    4200:	91 81       	ldd	r25, Z+1	; 0x01
    4202:	00 97       	sbiw	r24, 0x00	; 0
    4204:	d1 f6       	brne	.-76     	; 0x41ba <Robot_voidComparisonlogic+0x85e>
    4206:	27 c0       	rjmp	.+78     	; 0x4256 <Robot_voidComparisonlogic+0x8fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4208:	8e 01       	movw	r16, r28
    420a:	07 5a       	subi	r16, 0xA7	; 167
    420c:	1f 4f       	sbci	r17, 0xFF	; 255
    420e:	fe 01       	movw	r30, r28
    4210:	e5 5a       	subi	r30, 0xA5	; 165
    4212:	ff 4f       	sbci	r31, 0xFF	; 255
    4214:	60 81       	ld	r22, Z
    4216:	71 81       	ldd	r23, Z+1	; 0x01
    4218:	82 81       	ldd	r24, Z+2	; 0x02
    421a:	93 81       	ldd	r25, Z+3	; 0x03
    421c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4220:	dc 01       	movw	r26, r24
    4222:	cb 01       	movw	r24, r22
    4224:	f8 01       	movw	r30, r16
    4226:	91 83       	std	Z+1, r25	; 0x01
    4228:	80 83       	st	Z, r24
    422a:	de 01       	movw	r26, r28
    422c:	ab 5a       	subi	r26, 0xAB	; 171
    422e:	bf 4f       	sbci	r27, 0xFF	; 255
    4230:	fe 01       	movw	r30, r28
    4232:	e7 5a       	subi	r30, 0xA7	; 167
    4234:	ff 4f       	sbci	r31, 0xFF	; 255
    4236:	80 81       	ld	r24, Z
    4238:	91 81       	ldd	r25, Z+1	; 0x01
    423a:	8d 93       	st	X+, r24
    423c:	9c 93       	st	X, r25
    423e:	fe 01       	movw	r30, r28
    4240:	eb 5a       	subi	r30, 0xAB	; 171
    4242:	ff 4f       	sbci	r31, 0xFF	; 255
    4244:	80 81       	ld	r24, Z
    4246:	91 81       	ldd	r25, Z+1	; 0x01
    4248:	01 97       	sbiw	r24, 0x01	; 1
    424a:	f1 f7       	brne	.-4      	; 0x4248 <Robot_voidComparisonlogic+0x8ec>
    424c:	fe 01       	movw	r30, r28
    424e:	eb 5a       	subi	r30, 0xAB	; 171
    4250:	ff 4f       	sbci	r31, 0xFF	; 255
    4252:	91 83       	std	Z+1, r25	; 0x01
    4254:	80 83       	st	Z, r24
    	    _delay_ms(200);

    	  Robot_voidRight90();
    4256:	0e 94 0d 18 	call	0x301a	; 0x301a <Robot_voidRight90>

    	    BUZZER_voidBuzzer_Work(BUZZER_ON);
    425a:	81 e0       	ldi	r24, 0x01	; 1
    425c:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    4260:	fe 01       	movw	r30, r28
    4262:	ef 5a       	subi	r30, 0xAF	; 175
    4264:	ff 4f       	sbci	r31, 0xFF	; 255
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	a8 e4       	ldi	r26, 0x48	; 72
    426c:	b3 e4       	ldi	r27, 0x43	; 67
    426e:	80 83       	st	Z, r24
    4270:	91 83       	std	Z+1, r25	; 0x01
    4272:	a2 83       	std	Z+2, r26	; 0x02
    4274:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4276:	8e 01       	movw	r16, r28
    4278:	03 5b       	subi	r16, 0xB3	; 179
    427a:	1f 4f       	sbci	r17, 0xFF	; 255
    427c:	fe 01       	movw	r30, r28
    427e:	ef 5a       	subi	r30, 0xAF	; 175
    4280:	ff 4f       	sbci	r31, 0xFF	; 255
    4282:	60 81       	ld	r22, Z
    4284:	71 81       	ldd	r23, Z+1	; 0x01
    4286:	82 81       	ldd	r24, Z+2	; 0x02
    4288:	93 81       	ldd	r25, Z+3	; 0x03
    428a:	20 e0       	ldi	r18, 0x00	; 0
    428c:	30 e0       	ldi	r19, 0x00	; 0
    428e:	4a ef       	ldi	r20, 0xFA	; 250
    4290:	54 e4       	ldi	r21, 0x44	; 68
    4292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4296:	dc 01       	movw	r26, r24
    4298:	cb 01       	movw	r24, r22
    429a:	f8 01       	movw	r30, r16
    429c:	80 83       	st	Z, r24
    429e:	91 83       	std	Z+1, r25	; 0x01
    42a0:	a2 83       	std	Z+2, r26	; 0x02
    42a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42a4:	fe 01       	movw	r30, r28
    42a6:	e3 5b       	subi	r30, 0xB3	; 179
    42a8:	ff 4f       	sbci	r31, 0xFF	; 255
    42aa:	60 81       	ld	r22, Z
    42ac:	71 81       	ldd	r23, Z+1	; 0x01
    42ae:	82 81       	ldd	r24, Z+2	; 0x02
    42b0:	93 81       	ldd	r25, Z+3	; 0x03
    42b2:	20 e0       	ldi	r18, 0x00	; 0
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	40 e8       	ldi	r20, 0x80	; 128
    42b8:	5f e3       	ldi	r21, 0x3F	; 63
    42ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42be:	88 23       	and	r24, r24
    42c0:	44 f4       	brge	.+16     	; 0x42d2 <Robot_voidComparisonlogic+0x976>
		__ticks = 1;
    42c2:	fe 01       	movw	r30, r28
    42c4:	e5 5b       	subi	r30, 0xB5	; 181
    42c6:	ff 4f       	sbci	r31, 0xFF	; 255
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	91 83       	std	Z+1, r25	; 0x01
    42ce:	80 83       	st	Z, r24
    42d0:	64 c0       	rjmp	.+200    	; 0x439a <Robot_voidComparisonlogic+0xa3e>
	else if (__tmp > 65535)
    42d2:	fe 01       	movw	r30, r28
    42d4:	e3 5b       	subi	r30, 0xB3	; 179
    42d6:	ff 4f       	sbci	r31, 0xFF	; 255
    42d8:	60 81       	ld	r22, Z
    42da:	71 81       	ldd	r23, Z+1	; 0x01
    42dc:	82 81       	ldd	r24, Z+2	; 0x02
    42de:	93 81       	ldd	r25, Z+3	; 0x03
    42e0:	20 e0       	ldi	r18, 0x00	; 0
    42e2:	3f ef       	ldi	r19, 0xFF	; 255
    42e4:	4f e7       	ldi	r20, 0x7F	; 127
    42e6:	57 e4       	ldi	r21, 0x47	; 71
    42e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42ec:	18 16       	cp	r1, r24
    42ee:	0c f0       	brlt	.+2      	; 0x42f2 <Robot_voidComparisonlogic+0x996>
    42f0:	43 c0       	rjmp	.+134    	; 0x4378 <Robot_voidComparisonlogic+0xa1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f2:	fe 01       	movw	r30, r28
    42f4:	ef 5a       	subi	r30, 0xAF	; 175
    42f6:	ff 4f       	sbci	r31, 0xFF	; 255
    42f8:	60 81       	ld	r22, Z
    42fa:	71 81       	ldd	r23, Z+1	; 0x01
    42fc:	82 81       	ldd	r24, Z+2	; 0x02
    42fe:	93 81       	ldd	r25, Z+3	; 0x03
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	40 e2       	ldi	r20, 0x20	; 32
    4306:	51 e4       	ldi	r21, 0x41	; 65
    4308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430c:	dc 01       	movw	r26, r24
    430e:	cb 01       	movw	r24, r22
    4310:	8e 01       	movw	r16, r28
    4312:	05 5b       	subi	r16, 0xB5	; 181
    4314:	1f 4f       	sbci	r17, 0xFF	; 255
    4316:	bc 01       	movw	r22, r24
    4318:	cd 01       	movw	r24, r26
    431a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    431e:	dc 01       	movw	r26, r24
    4320:	cb 01       	movw	r24, r22
    4322:	f8 01       	movw	r30, r16
    4324:	91 83       	std	Z+1, r25	; 0x01
    4326:	80 83       	st	Z, r24
    4328:	1f c0       	rjmp	.+62     	; 0x4368 <Robot_voidComparisonlogic+0xa0c>
    432a:	fe 01       	movw	r30, r28
    432c:	e7 5b       	subi	r30, 0xB7	; 183
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	88 ec       	ldi	r24, 0xC8	; 200
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	91 83       	std	Z+1, r25	; 0x01
    4336:	80 83       	st	Z, r24
    4338:	fe 01       	movw	r30, r28
    433a:	e7 5b       	subi	r30, 0xB7	; 183
    433c:	ff 4f       	sbci	r31, 0xFF	; 255
    433e:	80 81       	ld	r24, Z
    4340:	91 81       	ldd	r25, Z+1	; 0x01
    4342:	01 97       	sbiw	r24, 0x01	; 1
    4344:	f1 f7       	brne	.-4      	; 0x4342 <Robot_voidComparisonlogic+0x9e6>
    4346:	fe 01       	movw	r30, r28
    4348:	e7 5b       	subi	r30, 0xB7	; 183
    434a:	ff 4f       	sbci	r31, 0xFF	; 255
    434c:	91 83       	std	Z+1, r25	; 0x01
    434e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4350:	de 01       	movw	r26, r28
    4352:	a5 5b       	subi	r26, 0xB5	; 181
    4354:	bf 4f       	sbci	r27, 0xFF	; 255
    4356:	fe 01       	movw	r30, r28
    4358:	e5 5b       	subi	r30, 0xB5	; 181
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	80 81       	ld	r24, Z
    435e:	91 81       	ldd	r25, Z+1	; 0x01
    4360:	01 97       	sbiw	r24, 0x01	; 1
    4362:	11 96       	adiw	r26, 0x01	; 1
    4364:	9c 93       	st	X, r25
    4366:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4368:	fe 01       	movw	r30, r28
    436a:	e5 5b       	subi	r30, 0xB5	; 181
    436c:	ff 4f       	sbci	r31, 0xFF	; 255
    436e:	80 81       	ld	r24, Z
    4370:	91 81       	ldd	r25, Z+1	; 0x01
    4372:	00 97       	sbiw	r24, 0x00	; 0
    4374:	d1 f6       	brne	.-76     	; 0x432a <Robot_voidComparisonlogic+0x9ce>
    4376:	27 c0       	rjmp	.+78     	; 0x43c6 <Robot_voidComparisonlogic+0xa6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4378:	8e 01       	movw	r16, r28
    437a:	05 5b       	subi	r16, 0xB5	; 181
    437c:	1f 4f       	sbci	r17, 0xFF	; 255
    437e:	fe 01       	movw	r30, r28
    4380:	e3 5b       	subi	r30, 0xB3	; 179
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	60 81       	ld	r22, Z
    4386:	71 81       	ldd	r23, Z+1	; 0x01
    4388:	82 81       	ldd	r24, Z+2	; 0x02
    438a:	93 81       	ldd	r25, Z+3	; 0x03
    438c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4390:	dc 01       	movw	r26, r24
    4392:	cb 01       	movw	r24, r22
    4394:	f8 01       	movw	r30, r16
    4396:	91 83       	std	Z+1, r25	; 0x01
    4398:	80 83       	st	Z, r24
    439a:	de 01       	movw	r26, r28
    439c:	a9 5b       	subi	r26, 0xB9	; 185
    439e:	bf 4f       	sbci	r27, 0xFF	; 255
    43a0:	fe 01       	movw	r30, r28
    43a2:	e5 5b       	subi	r30, 0xB5	; 181
    43a4:	ff 4f       	sbci	r31, 0xFF	; 255
    43a6:	80 81       	ld	r24, Z
    43a8:	91 81       	ldd	r25, Z+1	; 0x01
    43aa:	8d 93       	st	X+, r24
    43ac:	9c 93       	st	X, r25
    43ae:	fe 01       	movw	r30, r28
    43b0:	e9 5b       	subi	r30, 0xB9	; 185
    43b2:	ff 4f       	sbci	r31, 0xFF	; 255
    43b4:	80 81       	ld	r24, Z
    43b6:	91 81       	ldd	r25, Z+1	; 0x01
    43b8:	01 97       	sbiw	r24, 0x01	; 1
    43ba:	f1 f7       	brne	.-4      	; 0x43b8 <Robot_voidComparisonlogic+0xa5c>
    43bc:	fe 01       	movw	r30, r28
    43be:	e9 5b       	subi	r30, 0xB9	; 185
    43c0:	ff 4f       	sbci	r31, 0xFF	; 255
    43c2:	91 83       	std	Z+1, r25	; 0x01
    43c4:	80 83       	st	Z, r24
    	    _delay_ms(200);
    	    BUZZER_voidBuzzer_Work(BUZZER_OFF);
    43c6:	80 e0       	ldi	r24, 0x00	; 0
    43c8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    43cc:	fe 01       	movw	r30, r28
    43ce:	ed 5b       	subi	r30, 0xBD	; 189
    43d0:	ff 4f       	sbci	r31, 0xFF	; 255
    43d2:	80 e0       	ldi	r24, 0x00	; 0
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	a8 e4       	ldi	r26, 0x48	; 72
    43d8:	b3 e4       	ldi	r27, 0x43	; 67
    43da:	80 83       	st	Z, r24
    43dc:	91 83       	std	Z+1, r25	; 0x01
    43de:	a2 83       	std	Z+2, r26	; 0x02
    43e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43e2:	8e 01       	movw	r16, r28
    43e4:	01 5c       	subi	r16, 0xC1	; 193
    43e6:	1f 4f       	sbci	r17, 0xFF	; 255
    43e8:	fe 01       	movw	r30, r28
    43ea:	ed 5b       	subi	r30, 0xBD	; 189
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	60 81       	ld	r22, Z
    43f0:	71 81       	ldd	r23, Z+1	; 0x01
    43f2:	82 81       	ldd	r24, Z+2	; 0x02
    43f4:	93 81       	ldd	r25, Z+3	; 0x03
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	4a ef       	ldi	r20, 0xFA	; 250
    43fc:	54 e4       	ldi	r21, 0x44	; 68
    43fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4402:	dc 01       	movw	r26, r24
    4404:	cb 01       	movw	r24, r22
    4406:	f8 01       	movw	r30, r16
    4408:	80 83       	st	Z, r24
    440a:	91 83       	std	Z+1, r25	; 0x01
    440c:	a2 83       	std	Z+2, r26	; 0x02
    440e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4410:	fe 01       	movw	r30, r28
    4412:	ff 96       	adiw	r30, 0x3f	; 63
    4414:	60 81       	ld	r22, Z
    4416:	71 81       	ldd	r23, Z+1	; 0x01
    4418:	82 81       	ldd	r24, Z+2	; 0x02
    441a:	93 81       	ldd	r25, Z+3	; 0x03
    441c:	20 e0       	ldi	r18, 0x00	; 0
    441e:	30 e0       	ldi	r19, 0x00	; 0
    4420:	40 e8       	ldi	r20, 0x80	; 128
    4422:	5f e3       	ldi	r21, 0x3F	; 63
    4424:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4428:	88 23       	and	r24, r24
    442a:	2c f4       	brge	.+10     	; 0x4436 <Robot_voidComparisonlogic+0xada>
		__ticks = 1;
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	9e af       	std	Y+62, r25	; 0x3e
    4432:	8d af       	std	Y+61, r24	; 0x3d
    4434:	46 c0       	rjmp	.+140    	; 0x44c2 <Robot_voidComparisonlogic+0xb66>
	else if (__tmp > 65535)
    4436:	fe 01       	movw	r30, r28
    4438:	ff 96       	adiw	r30, 0x3f	; 63
    443a:	60 81       	ld	r22, Z
    443c:	71 81       	ldd	r23, Z+1	; 0x01
    443e:	82 81       	ldd	r24, Z+2	; 0x02
    4440:	93 81       	ldd	r25, Z+3	; 0x03
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	3f ef       	ldi	r19, 0xFF	; 255
    4446:	4f e7       	ldi	r20, 0x7F	; 127
    4448:	57 e4       	ldi	r21, 0x47	; 71
    444a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    444e:	18 16       	cp	r1, r24
    4450:	64 f5       	brge	.+88     	; 0x44aa <Robot_voidComparisonlogic+0xb4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4452:	fe 01       	movw	r30, r28
    4454:	ed 5b       	subi	r30, 0xBD	; 189
    4456:	ff 4f       	sbci	r31, 0xFF	; 255
    4458:	60 81       	ld	r22, Z
    445a:	71 81       	ldd	r23, Z+1	; 0x01
    445c:	82 81       	ldd	r24, Z+2	; 0x02
    445e:	93 81       	ldd	r25, Z+3	; 0x03
    4460:	20 e0       	ldi	r18, 0x00	; 0
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	40 e2       	ldi	r20, 0x20	; 32
    4466:	51 e4       	ldi	r21, 0x41	; 65
    4468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    446c:	dc 01       	movw	r26, r24
    446e:	cb 01       	movw	r24, r22
    4470:	bc 01       	movw	r22, r24
    4472:	cd 01       	movw	r24, r26
    4474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4478:	dc 01       	movw	r26, r24
    447a:	cb 01       	movw	r24, r22
    447c:	9e af       	std	Y+62, r25	; 0x3e
    447e:	8d af       	std	Y+61, r24	; 0x3d
    4480:	0f c0       	rjmp	.+30     	; 0x44a0 <Robot_voidComparisonlogic+0xb44>
    4482:	88 ec       	ldi	r24, 0xC8	; 200
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	9c af       	std	Y+60, r25	; 0x3c
    4488:	8b af       	std	Y+59, r24	; 0x3b
    448a:	8b ad       	ldd	r24, Y+59	; 0x3b
    448c:	9c ad       	ldd	r25, Y+60	; 0x3c
    448e:	01 97       	sbiw	r24, 0x01	; 1
    4490:	f1 f7       	brne	.-4      	; 0x448e <Robot_voidComparisonlogic+0xb32>
    4492:	9c af       	std	Y+60, r25	; 0x3c
    4494:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4496:	8d ad       	ldd	r24, Y+61	; 0x3d
    4498:	9e ad       	ldd	r25, Y+62	; 0x3e
    449a:	01 97       	sbiw	r24, 0x01	; 1
    449c:	9e af       	std	Y+62, r25	; 0x3e
    449e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    44a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    44a4:	00 97       	sbiw	r24, 0x00	; 0
    44a6:	69 f7       	brne	.-38     	; 0x4482 <Robot_voidComparisonlogic+0xb26>
    44a8:	ff c1       	rjmp	.+1022   	; 0x48a8 <Robot_voidComparisonlogic+0xf4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44aa:	fe 01       	movw	r30, r28
    44ac:	ff 96       	adiw	r30, 0x3f	; 63
    44ae:	60 81       	ld	r22, Z
    44b0:	71 81       	ldd	r23, Z+1	; 0x01
    44b2:	82 81       	ldd	r24, Z+2	; 0x02
    44b4:	93 81       	ldd	r25, Z+3	; 0x03
    44b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ba:	dc 01       	movw	r26, r24
    44bc:	cb 01       	movw	r24, r22
    44be:	9e af       	std	Y+62, r25	; 0x3e
    44c0:	8d af       	std	Y+61, r24	; 0x3d
    44c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    44c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    44c6:	9a af       	std	Y+58, r25	; 0x3a
    44c8:	89 af       	std	Y+57, r24	; 0x39
    44ca:	89 ad       	ldd	r24, Y+57	; 0x39
    44cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    44ce:	01 97       	sbiw	r24, 0x01	; 1
    44d0:	f1 f7       	brne	.-4      	; 0x44ce <Robot_voidComparisonlogic+0xb72>
    44d2:	9a af       	std	Y+58, r25	; 0x3a
    44d4:	89 af       	std	Y+57, r24	; 0x39
    44d6:	e8 c1       	rjmp	.+976    	; 0x48a8 <Robot_voidComparisonlogic+0xf4c>
    	    _delay_ms(200);
      }
      else if (Copy_u16LeftObject < 10 && Copy_u16RightObject < 10)
    44d8:	fe 01       	movw	r30, r28
    44da:	e7 55       	subi	r30, 0x57	; 87
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	80 81       	ld	r24, Z
    44e0:	91 81       	ldd	r25, Z+1	; 0x01
    44e2:	8a 30       	cpi	r24, 0x0A	; 10
    44e4:	91 05       	cpc	r25, r1
    44e6:	08 f0       	brcs	.+2      	; 0x44ea <Robot_voidComparisonlogic+0xb8e>
    44e8:	df c1       	rjmp	.+958    	; 0x48a8 <Robot_voidComparisonlogic+0xf4c>
    44ea:	fe 01       	movw	r30, r28
    44ec:	e5 55       	subi	r30, 0x55	; 85
    44ee:	ff 4f       	sbci	r31, 0xFF	; 255
    44f0:	80 81       	ld	r24, Z
    44f2:	91 81       	ldd	r25, Z+1	; 0x01
    44f4:	8a 30       	cpi	r24, 0x0A	; 10
    44f6:	91 05       	cpc	r25, r1
    44f8:	08 f0       	brcs	.+2      	; 0x44fc <Robot_voidComparisonlogic+0xba0>
    44fa:	d6 c1       	rjmp	.+940    	; 0x48a8 <Robot_voidComparisonlogic+0xf4c>
      {
    	    BUZZER_voidBuzzer_Work(BUZZER_ON);
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	a8 e4       	ldi	r26, 0x48	; 72
    4508:	b3 e4       	ldi	r27, 0x43	; 67
    450a:	8d ab       	std	Y+53, r24	; 0x35
    450c:	9e ab       	std	Y+54, r25	; 0x36
    450e:	af ab       	std	Y+55, r26	; 0x37
    4510:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4512:	6d a9       	ldd	r22, Y+53	; 0x35
    4514:	7e a9       	ldd	r23, Y+54	; 0x36
    4516:	8f a9       	ldd	r24, Y+55	; 0x37
    4518:	98 ad       	ldd	r25, Y+56	; 0x38
    451a:	20 e0       	ldi	r18, 0x00	; 0
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	4a ef       	ldi	r20, 0xFA	; 250
    4520:	54 e4       	ldi	r21, 0x44	; 68
    4522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4526:	dc 01       	movw	r26, r24
    4528:	cb 01       	movw	r24, r22
    452a:	89 ab       	std	Y+49, r24	; 0x31
    452c:	9a ab       	std	Y+50, r25	; 0x32
    452e:	ab ab       	std	Y+51, r26	; 0x33
    4530:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4532:	69 a9       	ldd	r22, Y+49	; 0x31
    4534:	7a a9       	ldd	r23, Y+50	; 0x32
    4536:	8b a9       	ldd	r24, Y+51	; 0x33
    4538:	9c a9       	ldd	r25, Y+52	; 0x34
    453a:	20 e0       	ldi	r18, 0x00	; 0
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	40 e8       	ldi	r20, 0x80	; 128
    4540:	5f e3       	ldi	r21, 0x3F	; 63
    4542:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4546:	88 23       	and	r24, r24
    4548:	2c f4       	brge	.+10     	; 0x4554 <Robot_voidComparisonlogic+0xbf8>
		__ticks = 1;
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	98 ab       	std	Y+48, r25	; 0x30
    4550:	8f a7       	std	Y+47, r24	; 0x2f
    4552:	3f c0       	rjmp	.+126    	; 0x45d2 <Robot_voidComparisonlogic+0xc76>
	else if (__tmp > 65535)
    4554:	69 a9       	ldd	r22, Y+49	; 0x31
    4556:	7a a9       	ldd	r23, Y+50	; 0x32
    4558:	8b a9       	ldd	r24, Y+51	; 0x33
    455a:	9c a9       	ldd	r25, Y+52	; 0x34
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	3f ef       	ldi	r19, 0xFF	; 255
    4560:	4f e7       	ldi	r20, 0x7F	; 127
    4562:	57 e4       	ldi	r21, 0x47	; 71
    4564:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4568:	18 16       	cp	r1, r24
    456a:	4c f5       	brge	.+82     	; 0x45be <Robot_voidComparisonlogic+0xc62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    456c:	6d a9       	ldd	r22, Y+53	; 0x35
    456e:	7e a9       	ldd	r23, Y+54	; 0x36
    4570:	8f a9       	ldd	r24, Y+55	; 0x37
    4572:	98 ad       	ldd	r25, Y+56	; 0x38
    4574:	20 e0       	ldi	r18, 0x00	; 0
    4576:	30 e0       	ldi	r19, 0x00	; 0
    4578:	40 e2       	ldi	r20, 0x20	; 32
    457a:	51 e4       	ldi	r21, 0x41	; 65
    457c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4580:	dc 01       	movw	r26, r24
    4582:	cb 01       	movw	r24, r22
    4584:	bc 01       	movw	r22, r24
    4586:	cd 01       	movw	r24, r26
    4588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	98 ab       	std	Y+48, r25	; 0x30
    4592:	8f a7       	std	Y+47, r24	; 0x2f
    4594:	0f c0       	rjmp	.+30     	; 0x45b4 <Robot_voidComparisonlogic+0xc58>
    4596:	88 ec       	ldi	r24, 0xC8	; 200
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	9e a7       	std	Y+46, r25	; 0x2e
    459c:	8d a7       	std	Y+45, r24	; 0x2d
    459e:	8d a5       	ldd	r24, Y+45	; 0x2d
    45a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    45a2:	01 97       	sbiw	r24, 0x01	; 1
    45a4:	f1 f7       	brne	.-4      	; 0x45a2 <Robot_voidComparisonlogic+0xc46>
    45a6:	9e a7       	std	Y+46, r25	; 0x2e
    45a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    45ac:	98 a9       	ldd	r25, Y+48	; 0x30
    45ae:	01 97       	sbiw	r24, 0x01	; 1
    45b0:	98 ab       	std	Y+48, r25	; 0x30
    45b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    45b6:	98 a9       	ldd	r25, Y+48	; 0x30
    45b8:	00 97       	sbiw	r24, 0x00	; 0
    45ba:	69 f7       	brne	.-38     	; 0x4596 <Robot_voidComparisonlogic+0xc3a>
    45bc:	14 c0       	rjmp	.+40     	; 0x45e6 <Robot_voidComparisonlogic+0xc8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45be:	69 a9       	ldd	r22, Y+49	; 0x31
    45c0:	7a a9       	ldd	r23, Y+50	; 0x32
    45c2:	8b a9       	ldd	r24, Y+51	; 0x33
    45c4:	9c a9       	ldd	r25, Y+52	; 0x34
    45c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ca:	dc 01       	movw	r26, r24
    45cc:	cb 01       	movw	r24, r22
    45ce:	98 ab       	std	Y+48, r25	; 0x30
    45d0:	8f a7       	std	Y+47, r24	; 0x2f
    45d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    45d4:	98 a9       	ldd	r25, Y+48	; 0x30
    45d6:	9c a7       	std	Y+44, r25	; 0x2c
    45d8:	8b a7       	std	Y+43, r24	; 0x2b
    45da:	8b a5       	ldd	r24, Y+43	; 0x2b
    45dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    45de:	01 97       	sbiw	r24, 0x01	; 1
    45e0:	f1 f7       	brne	.-4      	; 0x45de <Robot_voidComparisonlogic+0xc82>
    45e2:	9c a7       	std	Y+44, r25	; 0x2c
    45e4:	8b a7       	std	Y+43, r24	; 0x2b
    	    _delay_ms(200);
    	    BUZZER_voidBuzzer_Work(BUZZER_OFF);
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    45ec:	80 e0       	ldi	r24, 0x00	; 0
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	a8 e4       	ldi	r26, 0x48	; 72
    45f2:	b3 e4       	ldi	r27, 0x43	; 67
    45f4:	8f a3       	std	Y+39, r24	; 0x27
    45f6:	98 a7       	std	Y+40, r25	; 0x28
    45f8:	a9 a7       	std	Y+41, r26	; 0x29
    45fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45fc:	6f a1       	ldd	r22, Y+39	; 0x27
    45fe:	78 a5       	ldd	r23, Y+40	; 0x28
    4600:	89 a5       	ldd	r24, Y+41	; 0x29
    4602:	9a a5       	ldd	r25, Y+42	; 0x2a
    4604:	20 e0       	ldi	r18, 0x00	; 0
    4606:	30 e0       	ldi	r19, 0x00	; 0
    4608:	4a ef       	ldi	r20, 0xFA	; 250
    460a:	54 e4       	ldi	r21, 0x44	; 68
    460c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4610:	dc 01       	movw	r26, r24
    4612:	cb 01       	movw	r24, r22
    4614:	8b a3       	std	Y+35, r24	; 0x23
    4616:	9c a3       	std	Y+36, r25	; 0x24
    4618:	ad a3       	std	Y+37, r26	; 0x25
    461a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    461c:	6b a1       	ldd	r22, Y+35	; 0x23
    461e:	7c a1       	ldd	r23, Y+36	; 0x24
    4620:	8d a1       	ldd	r24, Y+37	; 0x25
    4622:	9e a1       	ldd	r25, Y+38	; 0x26
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	40 e8       	ldi	r20, 0x80	; 128
    462a:	5f e3       	ldi	r21, 0x3F	; 63
    462c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4630:	88 23       	and	r24, r24
    4632:	2c f4       	brge	.+10     	; 0x463e <Robot_voidComparisonlogic+0xce2>
		__ticks = 1;
    4634:	81 e0       	ldi	r24, 0x01	; 1
    4636:	90 e0       	ldi	r25, 0x00	; 0
    4638:	9a a3       	std	Y+34, r25	; 0x22
    463a:	89 a3       	std	Y+33, r24	; 0x21
    463c:	3f c0       	rjmp	.+126    	; 0x46bc <Robot_voidComparisonlogic+0xd60>
	else if (__tmp > 65535)
    463e:	6b a1       	ldd	r22, Y+35	; 0x23
    4640:	7c a1       	ldd	r23, Y+36	; 0x24
    4642:	8d a1       	ldd	r24, Y+37	; 0x25
    4644:	9e a1       	ldd	r25, Y+38	; 0x26
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	3f ef       	ldi	r19, 0xFF	; 255
    464a:	4f e7       	ldi	r20, 0x7F	; 127
    464c:	57 e4       	ldi	r21, 0x47	; 71
    464e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4652:	18 16       	cp	r1, r24
    4654:	4c f5       	brge	.+82     	; 0x46a8 <Robot_voidComparisonlogic+0xd4c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4656:	6f a1       	ldd	r22, Y+39	; 0x27
    4658:	78 a5       	ldd	r23, Y+40	; 0x28
    465a:	89 a5       	ldd	r24, Y+41	; 0x29
    465c:	9a a5       	ldd	r25, Y+42	; 0x2a
    465e:	20 e0       	ldi	r18, 0x00	; 0
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	40 e2       	ldi	r20, 0x20	; 32
    4664:	51 e4       	ldi	r21, 0x41	; 65
    4666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    466a:	dc 01       	movw	r26, r24
    466c:	cb 01       	movw	r24, r22
    466e:	bc 01       	movw	r22, r24
    4670:	cd 01       	movw	r24, r26
    4672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4676:	dc 01       	movw	r26, r24
    4678:	cb 01       	movw	r24, r22
    467a:	9a a3       	std	Y+34, r25	; 0x22
    467c:	89 a3       	std	Y+33, r24	; 0x21
    467e:	0f c0       	rjmp	.+30     	; 0x469e <Robot_voidComparisonlogic+0xd42>
    4680:	88 ec       	ldi	r24, 0xC8	; 200
    4682:	90 e0       	ldi	r25, 0x00	; 0
    4684:	98 a3       	std	Y+32, r25	; 0x20
    4686:	8f 8f       	std	Y+31, r24	; 0x1f
    4688:	8f 8d       	ldd	r24, Y+31	; 0x1f
    468a:	98 a1       	ldd	r25, Y+32	; 0x20
    468c:	01 97       	sbiw	r24, 0x01	; 1
    468e:	f1 f7       	brne	.-4      	; 0x468c <Robot_voidComparisonlogic+0xd30>
    4690:	98 a3       	std	Y+32, r25	; 0x20
    4692:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4694:	89 a1       	ldd	r24, Y+33	; 0x21
    4696:	9a a1       	ldd	r25, Y+34	; 0x22
    4698:	01 97       	sbiw	r24, 0x01	; 1
    469a:	9a a3       	std	Y+34, r25	; 0x22
    469c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    469e:	89 a1       	ldd	r24, Y+33	; 0x21
    46a0:	9a a1       	ldd	r25, Y+34	; 0x22
    46a2:	00 97       	sbiw	r24, 0x00	; 0
    46a4:	69 f7       	brne	.-38     	; 0x4680 <Robot_voidComparisonlogic+0xd24>
    46a6:	14 c0       	rjmp	.+40     	; 0x46d0 <Robot_voidComparisonlogic+0xd74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46a8:	6b a1       	ldd	r22, Y+35	; 0x23
    46aa:	7c a1       	ldd	r23, Y+36	; 0x24
    46ac:	8d a1       	ldd	r24, Y+37	; 0x25
    46ae:	9e a1       	ldd	r25, Y+38	; 0x26
    46b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46b4:	dc 01       	movw	r26, r24
    46b6:	cb 01       	movw	r24, r22
    46b8:	9a a3       	std	Y+34, r25	; 0x22
    46ba:	89 a3       	std	Y+33, r24	; 0x21
    46bc:	89 a1       	ldd	r24, Y+33	; 0x21
    46be:	9a a1       	ldd	r25, Y+34	; 0x22
    46c0:	9e 8f       	std	Y+30, r25	; 0x1e
    46c2:	8d 8f       	std	Y+29, r24	; 0x1d
    46c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46c8:	01 97       	sbiw	r24, 0x01	; 1
    46ca:	f1 f7       	brne	.-4      	; 0x46c8 <Robot_voidComparisonlogic+0xd6c>
    46cc:	9e 8f       	std	Y+30, r25	; 0x1e
    46ce:	8d 8f       	std	Y+29, r24	; 0x1d
    	    _delay_ms(200);

    	  Robot_voidRevers();
    46d0:	0e 94 23 1b 	call	0x3646	; 0x3646 <Robot_voidRevers>

    	    BUZZER_voidBuzzer_Work(BUZZER_ON);
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	a8 e4       	ldi	r26, 0x48	; 72
    46e0:	b3 e4       	ldi	r27, 0x43	; 67
    46e2:	89 8f       	std	Y+25, r24	; 0x19
    46e4:	9a 8f       	std	Y+26, r25	; 0x1a
    46e6:	ab 8f       	std	Y+27, r26	; 0x1b
    46e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ea:	69 8d       	ldd	r22, Y+25	; 0x19
    46ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46f2:	20 e0       	ldi	r18, 0x00	; 0
    46f4:	30 e0       	ldi	r19, 0x00	; 0
    46f6:	4a ef       	ldi	r20, 0xFA	; 250
    46f8:	54 e4       	ldi	r21, 0x44	; 68
    46fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fe:	dc 01       	movw	r26, r24
    4700:	cb 01       	movw	r24, r22
    4702:	8d 8b       	std	Y+21, r24	; 0x15
    4704:	9e 8b       	std	Y+22, r25	; 0x16
    4706:	af 8b       	std	Y+23, r26	; 0x17
    4708:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    470a:	6d 89       	ldd	r22, Y+21	; 0x15
    470c:	7e 89       	ldd	r23, Y+22	; 0x16
    470e:	8f 89       	ldd	r24, Y+23	; 0x17
    4710:	98 8d       	ldd	r25, Y+24	; 0x18
    4712:	20 e0       	ldi	r18, 0x00	; 0
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	40 e8       	ldi	r20, 0x80	; 128
    4718:	5f e3       	ldi	r21, 0x3F	; 63
    471a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    471e:	88 23       	and	r24, r24
    4720:	2c f4       	brge	.+10     	; 0x472c <Robot_voidComparisonlogic+0xdd0>
		__ticks = 1;
    4722:	81 e0       	ldi	r24, 0x01	; 1
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	9c 8b       	std	Y+20, r25	; 0x14
    4728:	8b 8b       	std	Y+19, r24	; 0x13
    472a:	3f c0       	rjmp	.+126    	; 0x47aa <Robot_voidComparisonlogic+0xe4e>
	else if (__tmp > 65535)
    472c:	6d 89       	ldd	r22, Y+21	; 0x15
    472e:	7e 89       	ldd	r23, Y+22	; 0x16
    4730:	8f 89       	ldd	r24, Y+23	; 0x17
    4732:	98 8d       	ldd	r25, Y+24	; 0x18
    4734:	20 e0       	ldi	r18, 0x00	; 0
    4736:	3f ef       	ldi	r19, 0xFF	; 255
    4738:	4f e7       	ldi	r20, 0x7F	; 127
    473a:	57 e4       	ldi	r21, 0x47	; 71
    473c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4740:	18 16       	cp	r1, r24
    4742:	4c f5       	brge	.+82     	; 0x4796 <Robot_voidComparisonlogic+0xe3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4744:	69 8d       	ldd	r22, Y+25	; 0x19
    4746:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    474a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	40 e2       	ldi	r20, 0x20	; 32
    4752:	51 e4       	ldi	r21, 0x41	; 65
    4754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4758:	dc 01       	movw	r26, r24
    475a:	cb 01       	movw	r24, r22
    475c:	bc 01       	movw	r22, r24
    475e:	cd 01       	movw	r24, r26
    4760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4764:	dc 01       	movw	r26, r24
    4766:	cb 01       	movw	r24, r22
    4768:	9c 8b       	std	Y+20, r25	; 0x14
    476a:	8b 8b       	std	Y+19, r24	; 0x13
    476c:	0f c0       	rjmp	.+30     	; 0x478c <Robot_voidComparisonlogic+0xe30>
    476e:	88 ec       	ldi	r24, 0xC8	; 200
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	9a 8b       	std	Y+18, r25	; 0x12
    4774:	89 8b       	std	Y+17, r24	; 0x11
    4776:	89 89       	ldd	r24, Y+17	; 0x11
    4778:	9a 89       	ldd	r25, Y+18	; 0x12
    477a:	01 97       	sbiw	r24, 0x01	; 1
    477c:	f1 f7       	brne	.-4      	; 0x477a <Robot_voidComparisonlogic+0xe1e>
    477e:	9a 8b       	std	Y+18, r25	; 0x12
    4780:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4782:	8b 89       	ldd	r24, Y+19	; 0x13
    4784:	9c 89       	ldd	r25, Y+20	; 0x14
    4786:	01 97       	sbiw	r24, 0x01	; 1
    4788:	9c 8b       	std	Y+20, r25	; 0x14
    478a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    478c:	8b 89       	ldd	r24, Y+19	; 0x13
    478e:	9c 89       	ldd	r25, Y+20	; 0x14
    4790:	00 97       	sbiw	r24, 0x00	; 0
    4792:	69 f7       	brne	.-38     	; 0x476e <Robot_voidComparisonlogic+0xe12>
    4794:	14 c0       	rjmp	.+40     	; 0x47be <Robot_voidComparisonlogic+0xe62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4796:	6d 89       	ldd	r22, Y+21	; 0x15
    4798:	7e 89       	ldd	r23, Y+22	; 0x16
    479a:	8f 89       	ldd	r24, Y+23	; 0x17
    479c:	98 8d       	ldd	r25, Y+24	; 0x18
    479e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47a2:	dc 01       	movw	r26, r24
    47a4:	cb 01       	movw	r24, r22
    47a6:	9c 8b       	std	Y+20, r25	; 0x14
    47a8:	8b 8b       	std	Y+19, r24	; 0x13
    47aa:	8b 89       	ldd	r24, Y+19	; 0x13
    47ac:	9c 89       	ldd	r25, Y+20	; 0x14
    47ae:	98 8b       	std	Y+16, r25	; 0x10
    47b0:	8f 87       	std	Y+15, r24	; 0x0f
    47b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    47b4:	98 89       	ldd	r25, Y+16	; 0x10
    47b6:	01 97       	sbiw	r24, 0x01	; 1
    47b8:	f1 f7       	brne	.-4      	; 0x47b6 <Robot_voidComparisonlogic+0xe5a>
    47ba:	98 8b       	std	Y+16, r25	; 0x10
    47bc:	8f 87       	std	Y+15, r24	; 0x0f
    	    _delay_ms(200);
    	    BUZZER_voidBuzzer_Work(BUZZER_OFF);
    47be:	80 e0       	ldi	r24, 0x00	; 0
    47c0:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    47c4:	80 e0       	ldi	r24, 0x00	; 0
    47c6:	90 e0       	ldi	r25, 0x00	; 0
    47c8:	a8 e4       	ldi	r26, 0x48	; 72
    47ca:	b3 e4       	ldi	r27, 0x43	; 67
    47cc:	8b 87       	std	Y+11, r24	; 0x0b
    47ce:	9c 87       	std	Y+12, r25	; 0x0c
    47d0:	ad 87       	std	Y+13, r26	; 0x0d
    47d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    47d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    47d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    47da:	9e 85       	ldd	r25, Y+14	; 0x0e
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	4a ef       	ldi	r20, 0xFA	; 250
    47e2:	54 e4       	ldi	r21, 0x44	; 68
    47e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e8:	dc 01       	movw	r26, r24
    47ea:	cb 01       	movw	r24, r22
    47ec:	8f 83       	std	Y+7, r24	; 0x07
    47ee:	98 87       	std	Y+8, r25	; 0x08
    47f0:	a9 87       	std	Y+9, r26	; 0x09
    47f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47f4:	6f 81       	ldd	r22, Y+7	; 0x07
    47f6:	78 85       	ldd	r23, Y+8	; 0x08
    47f8:	89 85       	ldd	r24, Y+9	; 0x09
    47fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    47fc:	20 e0       	ldi	r18, 0x00	; 0
    47fe:	30 e0       	ldi	r19, 0x00	; 0
    4800:	40 e8       	ldi	r20, 0x80	; 128
    4802:	5f e3       	ldi	r21, 0x3F	; 63
    4804:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4808:	88 23       	and	r24, r24
    480a:	2c f4       	brge	.+10     	; 0x4816 <Robot_voidComparisonlogic+0xeba>
		__ticks = 1;
    480c:	81 e0       	ldi	r24, 0x01	; 1
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	9e 83       	std	Y+6, r25	; 0x06
    4812:	8d 83       	std	Y+5, r24	; 0x05
    4814:	3f c0       	rjmp	.+126    	; 0x4894 <Robot_voidComparisonlogic+0xf38>
	else if (__tmp > 65535)
    4816:	6f 81       	ldd	r22, Y+7	; 0x07
    4818:	78 85       	ldd	r23, Y+8	; 0x08
    481a:	89 85       	ldd	r24, Y+9	; 0x09
    481c:	9a 85       	ldd	r25, Y+10	; 0x0a
    481e:	20 e0       	ldi	r18, 0x00	; 0
    4820:	3f ef       	ldi	r19, 0xFF	; 255
    4822:	4f e7       	ldi	r20, 0x7F	; 127
    4824:	57 e4       	ldi	r21, 0x47	; 71
    4826:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    482a:	18 16       	cp	r1, r24
    482c:	4c f5       	brge	.+82     	; 0x4880 <Robot_voidComparisonlogic+0xf24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    482e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4830:	7c 85       	ldd	r23, Y+12	; 0x0c
    4832:	8d 85       	ldd	r24, Y+13	; 0x0d
    4834:	9e 85       	ldd	r25, Y+14	; 0x0e
    4836:	20 e0       	ldi	r18, 0x00	; 0
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	40 e2       	ldi	r20, 0x20	; 32
    483c:	51 e4       	ldi	r21, 0x41	; 65
    483e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4842:	dc 01       	movw	r26, r24
    4844:	cb 01       	movw	r24, r22
    4846:	bc 01       	movw	r22, r24
    4848:	cd 01       	movw	r24, r26
    484a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    484e:	dc 01       	movw	r26, r24
    4850:	cb 01       	movw	r24, r22
    4852:	9e 83       	std	Y+6, r25	; 0x06
    4854:	8d 83       	std	Y+5, r24	; 0x05
    4856:	0f c0       	rjmp	.+30     	; 0x4876 <Robot_voidComparisonlogic+0xf1a>
    4858:	88 ec       	ldi	r24, 0xC8	; 200
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	9c 83       	std	Y+4, r25	; 0x04
    485e:	8b 83       	std	Y+3, r24	; 0x03
    4860:	8b 81       	ldd	r24, Y+3	; 0x03
    4862:	9c 81       	ldd	r25, Y+4	; 0x04
    4864:	01 97       	sbiw	r24, 0x01	; 1
    4866:	f1 f7       	brne	.-4      	; 0x4864 <Robot_voidComparisonlogic+0xf08>
    4868:	9c 83       	std	Y+4, r25	; 0x04
    486a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    486c:	8d 81       	ldd	r24, Y+5	; 0x05
    486e:	9e 81       	ldd	r25, Y+6	; 0x06
    4870:	01 97       	sbiw	r24, 0x01	; 1
    4872:	9e 83       	std	Y+6, r25	; 0x06
    4874:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4876:	8d 81       	ldd	r24, Y+5	; 0x05
    4878:	9e 81       	ldd	r25, Y+6	; 0x06
    487a:	00 97       	sbiw	r24, 0x00	; 0
    487c:	69 f7       	brne	.-38     	; 0x4858 <Robot_voidComparisonlogic+0xefc>
    487e:	14 c0       	rjmp	.+40     	; 0x48a8 <Robot_voidComparisonlogic+0xf4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4880:	6f 81       	ldd	r22, Y+7	; 0x07
    4882:	78 85       	ldd	r23, Y+8	; 0x08
    4884:	89 85       	ldd	r24, Y+9	; 0x09
    4886:	9a 85       	ldd	r25, Y+10	; 0x0a
    4888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    488c:	dc 01       	movw	r26, r24
    488e:	cb 01       	movw	r24, r22
    4890:	9e 83       	std	Y+6, r25	; 0x06
    4892:	8d 83       	std	Y+5, r24	; 0x05
    4894:	8d 81       	ldd	r24, Y+5	; 0x05
    4896:	9e 81       	ldd	r25, Y+6	; 0x06
    4898:	9a 83       	std	Y+2, r25	; 0x02
    489a:	89 83       	std	Y+1, r24	; 0x01
    489c:	89 81       	ldd	r24, Y+1	; 0x01
    489e:	9a 81       	ldd	r25, Y+2	; 0x02
    48a0:	01 97       	sbiw	r24, 0x01	; 1
    48a2:	f1 f7       	brne	.-4      	; 0x48a0 <Robot_voidComparisonlogic+0xf44>
    48a4:	9a 83       	std	Y+2, r25	; 0x02
    48a6:	89 83       	std	Y+1, r24	; 0x01
    	    _delay_ms(200);
      }
}
    48a8:	c4 55       	subi	r28, 0x54	; 84
    48aa:	df 4f       	sbci	r29, 0xFF	; 255
    48ac:	0f b6       	in	r0, 0x3f	; 63
    48ae:	f8 94       	cli
    48b0:	de bf       	out	0x3e, r29	; 62
    48b2:	0f be       	out	0x3f, r0	; 63
    48b4:	cd bf       	out	0x3d, r28	; 61
    48b6:	cf 91       	pop	r28
    48b8:	df 91       	pop	r29
    48ba:	1f 91       	pop	r17
    48bc:	0f 91       	pop	r16
    48be:	08 95       	ret

000048c0 <Robot_voidObstacleAvoidingMode>:
void Robot_voidObstacleAvoidingMode(void)
{
    48c0:	0f 93       	push	r16
    48c2:	1f 93       	push	r17
    48c4:	df 93       	push	r29
    48c6:	cf 93       	push	r28
    48c8:	cd b7       	in	r28, 0x3d	; 61
    48ca:	de b7       	in	r29, 0x3e	; 62
    48cc:	c0 51       	subi	r28, 0x10	; 16
    48ce:	d1 40       	sbci	r29, 0x01	; 1
    48d0:	0f b6       	in	r0, 0x3f	; 63
    48d2:	f8 94       	cli
    48d4:	de bf       	out	0x3e, r29	; 62
    48d6:	0f be       	out	0x3f, r0	; 63
    48d8:	cd bf       	out	0x3d, r28	; 61
    u16 Local_u16LeftObject=0,Local_u16RightObject=0,Local_u16DistanceObject=0;
    48da:	fe 01       	movw	r30, r28
    48dc:	e1 5f       	subi	r30, 0xF1	; 241
    48de:	fe 4f       	sbci	r31, 0xFE	; 254
    48e0:	11 82       	std	Z+1, r1	; 0x01
    48e2:	10 82       	st	Z, r1
    48e4:	fe 01       	movw	r30, r28
    48e6:	e3 5f       	subi	r30, 0xF3	; 243
    48e8:	fe 4f       	sbci	r31, 0xFE	; 254
    48ea:	11 82       	std	Z+1, r1	; 0x01
    48ec:	10 82       	st	Z, r1
    48ee:	fe 01       	movw	r30, r28
    48f0:	e5 5f       	subi	r30, 0xF5	; 245
    48f2:	fe 4f       	sbci	r31, 0xFE	; 254
    48f4:	11 82       	std	Z+1, r1	; 0x01
    48f6:	10 82       	st	Z, r1
	Robot_voidSpeed(Robot_u8_ObstacleAvoidingMode_SPEED);
    48f8:	8c e3       	ldi	r24, 0x3C	; 60
    48fa:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <Robot_voidSpeed>

	while(1)
	{
		/* Read distance -->if no object go forward */
	    Local_u16DistanceObject = ULTRASONIC_u16GetDistance();
    48fe:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <ULTRASONIC_u16GetDistance>
    4902:	fe 01       	movw	r30, r28
    4904:	e5 5f       	subi	r30, 0xF5	; 245
    4906:	fe 4f       	sbci	r31, 0xFE	; 254
    4908:	91 83       	std	Z+1, r25	; 0x01
    490a:	80 83       	st	Z, r24

	    if (Local_u16DistanceObject==0)
    490c:	fe 01       	movw	r30, r28
    490e:	e5 5f       	subi	r30, 0xF5	; 245
    4910:	fe 4f       	sbci	r31, 0xFE	; 254
    4912:	80 81       	ld	r24, Z
    4914:	91 81       	ldd	r25, Z+1	; 0x01
    4916:	00 97       	sbiw	r24, 0x00	; 0
    4918:	39 f4       	brne	.+14     	; 0x4928 <Robot_voidObstacleAvoidingMode+0x68>
	    {
		    Local_u16DistanceObject=250;
    491a:	fe 01       	movw	r30, r28
    491c:	e5 5f       	subi	r30, 0xF5	; 245
    491e:	fe 4f       	sbci	r31, 0xFE	; 254
    4920:	8a ef       	ldi	r24, 0xFA	; 250
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	91 83       	std	Z+1, r25	; 0x01
    4926:	80 83       	st	Z, r24
	    }
	    /*********************************************************************************************/
	    /* */
        if(Local_u16DistanceObject<=15)
    4928:	fe 01       	movw	r30, r28
    492a:	e5 5f       	subi	r30, 0xF5	; 245
    492c:	fe 4f       	sbci	r31, 0xFE	; 254
    492e:	80 81       	ld	r24, Z
    4930:	91 81       	ldd	r25, Z+1	; 0x01
    4932:	80 31       	cpi	r24, 0x10	; 16
    4934:	91 05       	cpc	r25, r1
    4936:	10 f0       	brcs	.+4      	; 0x493c <Robot_voidObstacleAvoidingMode+0x7c>
    4938:	0c 94 3a 30 	jmp	0x6074	; 0x6074 <Robot_voidObstacleAvoidingMode+0x17b4>
	    {
        	/* if find object stop
        	 * Read left and right
        	 * and Orientation to open road
        	 *   */
        	BUZZER_voidBuzzer_Work(BUZZER_ON);
    493c:	81 e0       	ldi	r24, 0x01	; 1
    493e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    4942:	fe 01       	movw	r30, r28
    4944:	e9 5f       	subi	r30, 0xF9	; 249
    4946:	fe 4f       	sbci	r31, 0xFE	; 254
    4948:	80 e0       	ldi	r24, 0x00	; 0
    494a:	90 e0       	ldi	r25, 0x00	; 0
    494c:	a8 e4       	ldi	r26, 0x48	; 72
    494e:	b3 e4       	ldi	r27, 0x43	; 67
    4950:	80 83       	st	Z, r24
    4952:	91 83       	std	Z+1, r25	; 0x01
    4954:	a2 83       	std	Z+2, r26	; 0x02
    4956:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4958:	8e 01       	movw	r16, r28
    495a:	0d 5f       	subi	r16, 0xFD	; 253
    495c:	1e 4f       	sbci	r17, 0xFE	; 254
    495e:	fe 01       	movw	r30, r28
    4960:	e9 5f       	subi	r30, 0xF9	; 249
    4962:	fe 4f       	sbci	r31, 0xFE	; 254
    4964:	60 81       	ld	r22, Z
    4966:	71 81       	ldd	r23, Z+1	; 0x01
    4968:	82 81       	ldd	r24, Z+2	; 0x02
    496a:	93 81       	ldd	r25, Z+3	; 0x03
    496c:	20 e0       	ldi	r18, 0x00	; 0
    496e:	30 e0       	ldi	r19, 0x00	; 0
    4970:	4a ef       	ldi	r20, 0xFA	; 250
    4972:	54 e4       	ldi	r21, 0x44	; 68
    4974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4978:	dc 01       	movw	r26, r24
    497a:	cb 01       	movw	r24, r22
    497c:	f8 01       	movw	r30, r16
    497e:	80 83       	st	Z, r24
    4980:	91 83       	std	Z+1, r25	; 0x01
    4982:	a2 83       	std	Z+2, r26	; 0x02
    4984:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4986:	fe 01       	movw	r30, r28
    4988:	ed 5f       	subi	r30, 0xFD	; 253
    498a:	fe 4f       	sbci	r31, 0xFE	; 254
    498c:	60 81       	ld	r22, Z
    498e:	71 81       	ldd	r23, Z+1	; 0x01
    4990:	82 81       	ldd	r24, Z+2	; 0x02
    4992:	93 81       	ldd	r25, Z+3	; 0x03
    4994:	20 e0       	ldi	r18, 0x00	; 0
    4996:	30 e0       	ldi	r19, 0x00	; 0
    4998:	40 e8       	ldi	r20, 0x80	; 128
    499a:	5f e3       	ldi	r21, 0x3F	; 63
    499c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49a0:	88 23       	and	r24, r24
    49a2:	44 f4       	brge	.+16     	; 0x49b4 <Robot_voidObstacleAvoidingMode+0xf4>
		__ticks = 1;
    49a4:	fe 01       	movw	r30, r28
    49a6:	ef 5f       	subi	r30, 0xFF	; 255
    49a8:	fe 4f       	sbci	r31, 0xFE	; 254
    49aa:	81 e0       	ldi	r24, 0x01	; 1
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	91 83       	std	Z+1, r25	; 0x01
    49b0:	80 83       	st	Z, r24
    49b2:	64 c0       	rjmp	.+200    	; 0x4a7c <Robot_voidObstacleAvoidingMode+0x1bc>
	else if (__tmp > 65535)
    49b4:	fe 01       	movw	r30, r28
    49b6:	ed 5f       	subi	r30, 0xFD	; 253
    49b8:	fe 4f       	sbci	r31, 0xFE	; 254
    49ba:	60 81       	ld	r22, Z
    49bc:	71 81       	ldd	r23, Z+1	; 0x01
    49be:	82 81       	ldd	r24, Z+2	; 0x02
    49c0:	93 81       	ldd	r25, Z+3	; 0x03
    49c2:	20 e0       	ldi	r18, 0x00	; 0
    49c4:	3f ef       	ldi	r19, 0xFF	; 255
    49c6:	4f e7       	ldi	r20, 0x7F	; 127
    49c8:	57 e4       	ldi	r21, 0x47	; 71
    49ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49ce:	18 16       	cp	r1, r24
    49d0:	0c f0       	brlt	.+2      	; 0x49d4 <Robot_voidObstacleAvoidingMode+0x114>
    49d2:	43 c0       	rjmp	.+134    	; 0x4a5a <Robot_voidObstacleAvoidingMode+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49d4:	fe 01       	movw	r30, r28
    49d6:	e9 5f       	subi	r30, 0xF9	; 249
    49d8:	fe 4f       	sbci	r31, 0xFE	; 254
    49da:	60 81       	ld	r22, Z
    49dc:	71 81       	ldd	r23, Z+1	; 0x01
    49de:	82 81       	ldd	r24, Z+2	; 0x02
    49e0:	93 81       	ldd	r25, Z+3	; 0x03
    49e2:	20 e0       	ldi	r18, 0x00	; 0
    49e4:	30 e0       	ldi	r19, 0x00	; 0
    49e6:	40 e2       	ldi	r20, 0x20	; 32
    49e8:	51 e4       	ldi	r21, 0x41	; 65
    49ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ee:	dc 01       	movw	r26, r24
    49f0:	cb 01       	movw	r24, r22
    49f2:	8e 01       	movw	r16, r28
    49f4:	0f 5f       	subi	r16, 0xFF	; 255
    49f6:	1e 4f       	sbci	r17, 0xFE	; 254
    49f8:	bc 01       	movw	r22, r24
    49fa:	cd 01       	movw	r24, r26
    49fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a00:	dc 01       	movw	r26, r24
    4a02:	cb 01       	movw	r24, r22
    4a04:	f8 01       	movw	r30, r16
    4a06:	91 83       	std	Z+1, r25	; 0x01
    4a08:	80 83       	st	Z, r24
    4a0a:	1f c0       	rjmp	.+62     	; 0x4a4a <Robot_voidObstacleAvoidingMode+0x18a>
    4a0c:	fe 01       	movw	r30, r28
    4a0e:	e1 50       	subi	r30, 0x01	; 1
    4a10:	ff 4f       	sbci	r31, 0xFF	; 255
    4a12:	88 ec       	ldi	r24, 0xC8	; 200
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	91 83       	std	Z+1, r25	; 0x01
    4a18:	80 83       	st	Z, r24
    4a1a:	fe 01       	movw	r30, r28
    4a1c:	e1 50       	subi	r30, 0x01	; 1
    4a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a20:	80 81       	ld	r24, Z
    4a22:	91 81       	ldd	r25, Z+1	; 0x01
    4a24:	01 97       	sbiw	r24, 0x01	; 1
    4a26:	f1 f7       	brne	.-4      	; 0x4a24 <Robot_voidObstacleAvoidingMode+0x164>
    4a28:	fe 01       	movw	r30, r28
    4a2a:	e1 50       	subi	r30, 0x01	; 1
    4a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2e:	91 83       	std	Z+1, r25	; 0x01
    4a30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a32:	de 01       	movw	r26, r28
    4a34:	af 5f       	subi	r26, 0xFF	; 255
    4a36:	be 4f       	sbci	r27, 0xFE	; 254
    4a38:	fe 01       	movw	r30, r28
    4a3a:	ef 5f       	subi	r30, 0xFF	; 255
    4a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    4a3e:	80 81       	ld	r24, Z
    4a40:	91 81       	ldd	r25, Z+1	; 0x01
    4a42:	01 97       	sbiw	r24, 0x01	; 1
    4a44:	11 96       	adiw	r26, 0x01	; 1
    4a46:	9c 93       	st	X, r25
    4a48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a4a:	fe 01       	movw	r30, r28
    4a4c:	ef 5f       	subi	r30, 0xFF	; 255
    4a4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4a50:	80 81       	ld	r24, Z
    4a52:	91 81       	ldd	r25, Z+1	; 0x01
    4a54:	00 97       	sbiw	r24, 0x00	; 0
    4a56:	d1 f6       	brne	.-76     	; 0x4a0c <Robot_voidObstacleAvoidingMode+0x14c>
    4a58:	27 c0       	rjmp	.+78     	; 0x4aa8 <Robot_voidObstacleAvoidingMode+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a5a:	8e 01       	movw	r16, r28
    4a5c:	0f 5f       	subi	r16, 0xFF	; 255
    4a5e:	1e 4f       	sbci	r17, 0xFE	; 254
    4a60:	fe 01       	movw	r30, r28
    4a62:	ed 5f       	subi	r30, 0xFD	; 253
    4a64:	fe 4f       	sbci	r31, 0xFE	; 254
    4a66:	60 81       	ld	r22, Z
    4a68:	71 81       	ldd	r23, Z+1	; 0x01
    4a6a:	82 81       	ldd	r24, Z+2	; 0x02
    4a6c:	93 81       	ldd	r25, Z+3	; 0x03
    4a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a72:	dc 01       	movw	r26, r24
    4a74:	cb 01       	movw	r24, r22
    4a76:	f8 01       	movw	r30, r16
    4a78:	91 83       	std	Z+1, r25	; 0x01
    4a7a:	80 83       	st	Z, r24
    4a7c:	de 01       	movw	r26, r28
    4a7e:	a3 50       	subi	r26, 0x03	; 3
    4a80:	bf 4f       	sbci	r27, 0xFF	; 255
    4a82:	fe 01       	movw	r30, r28
    4a84:	ef 5f       	subi	r30, 0xFF	; 255
    4a86:	fe 4f       	sbci	r31, 0xFE	; 254
    4a88:	80 81       	ld	r24, Z
    4a8a:	91 81       	ldd	r25, Z+1	; 0x01
    4a8c:	8d 93       	st	X+, r24
    4a8e:	9c 93       	st	X, r25
    4a90:	fe 01       	movw	r30, r28
    4a92:	e3 50       	subi	r30, 0x03	; 3
    4a94:	ff 4f       	sbci	r31, 0xFF	; 255
    4a96:	80 81       	ld	r24, Z
    4a98:	91 81       	ldd	r25, Z+1	; 0x01
    4a9a:	01 97       	sbiw	r24, 0x01	; 1
    4a9c:	f1 f7       	brne	.-4      	; 0x4a9a <Robot_voidObstacleAvoidingMode+0x1da>
    4a9e:	fe 01       	movw	r30, r28
    4aa0:	e3 50       	subi	r30, 0x03	; 3
    4aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa4:	91 83       	std	Z+1, r25	; 0x01
    4aa6:	80 83       	st	Z, r24
        	_delay_ms(200);
        	BUZZER_voidBuzzer_Work(BUZZER_OFF);
    4aa8:	80 e0       	ldi	r24, 0x00	; 0
    4aaa:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
	        Robot_voidBackward();
    4aae:	0e 94 32 17 	call	0x2e64	; 0x2e64 <Robot_voidBackward>
	        BUZZER_voidBuzzer_Work(BUZZER_ON);
    4ab2:	81 e0       	ldi	r24, 0x01	; 1
    4ab4:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    4ab8:	fe 01       	movw	r30, r28
    4aba:	e7 50       	subi	r30, 0x07	; 7
    4abc:	ff 4f       	sbci	r31, 0xFF	; 255
    4abe:	80 e0       	ldi	r24, 0x00	; 0
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	a8 e4       	ldi	r26, 0x48	; 72
    4ac4:	b3 e4       	ldi	r27, 0x43	; 67
    4ac6:	80 83       	st	Z, r24
    4ac8:	91 83       	std	Z+1, r25	; 0x01
    4aca:	a2 83       	std	Z+2, r26	; 0x02
    4acc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ace:	8e 01       	movw	r16, r28
    4ad0:	0b 50       	subi	r16, 0x0B	; 11
    4ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad4:	fe 01       	movw	r30, r28
    4ad6:	e7 50       	subi	r30, 0x07	; 7
    4ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ada:	60 81       	ld	r22, Z
    4adc:	71 81       	ldd	r23, Z+1	; 0x01
    4ade:	82 81       	ldd	r24, Z+2	; 0x02
    4ae0:	93 81       	ldd	r25, Z+3	; 0x03
    4ae2:	20 e0       	ldi	r18, 0x00	; 0
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	4a ef       	ldi	r20, 0xFA	; 250
    4ae8:	54 e4       	ldi	r21, 0x44	; 68
    4aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aee:	dc 01       	movw	r26, r24
    4af0:	cb 01       	movw	r24, r22
    4af2:	f8 01       	movw	r30, r16
    4af4:	80 83       	st	Z, r24
    4af6:	91 83       	std	Z+1, r25	; 0x01
    4af8:	a2 83       	std	Z+2, r26	; 0x02
    4afa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4afc:	fe 01       	movw	r30, r28
    4afe:	eb 50       	subi	r30, 0x0B	; 11
    4b00:	ff 4f       	sbci	r31, 0xFF	; 255
    4b02:	60 81       	ld	r22, Z
    4b04:	71 81       	ldd	r23, Z+1	; 0x01
    4b06:	82 81       	ldd	r24, Z+2	; 0x02
    4b08:	93 81       	ldd	r25, Z+3	; 0x03
    4b0a:	20 e0       	ldi	r18, 0x00	; 0
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	40 e8       	ldi	r20, 0x80	; 128
    4b10:	5f e3       	ldi	r21, 0x3F	; 63
    4b12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b16:	88 23       	and	r24, r24
    4b18:	44 f4       	brge	.+16     	; 0x4b2a <Robot_voidObstacleAvoidingMode+0x26a>
		__ticks = 1;
    4b1a:	fe 01       	movw	r30, r28
    4b1c:	ed 50       	subi	r30, 0x0D	; 13
    4b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b20:	81 e0       	ldi	r24, 0x01	; 1
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	91 83       	std	Z+1, r25	; 0x01
    4b26:	80 83       	st	Z, r24
    4b28:	64 c0       	rjmp	.+200    	; 0x4bf2 <Robot_voidObstacleAvoidingMode+0x332>
	else if (__tmp > 65535)
    4b2a:	fe 01       	movw	r30, r28
    4b2c:	eb 50       	subi	r30, 0x0B	; 11
    4b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b30:	60 81       	ld	r22, Z
    4b32:	71 81       	ldd	r23, Z+1	; 0x01
    4b34:	82 81       	ldd	r24, Z+2	; 0x02
    4b36:	93 81       	ldd	r25, Z+3	; 0x03
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	3f ef       	ldi	r19, 0xFF	; 255
    4b3c:	4f e7       	ldi	r20, 0x7F	; 127
    4b3e:	57 e4       	ldi	r21, 0x47	; 71
    4b40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b44:	18 16       	cp	r1, r24
    4b46:	0c f0       	brlt	.+2      	; 0x4b4a <Robot_voidObstacleAvoidingMode+0x28a>
    4b48:	43 c0       	rjmp	.+134    	; 0x4bd0 <Robot_voidObstacleAvoidingMode+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b4a:	fe 01       	movw	r30, r28
    4b4c:	e7 50       	subi	r30, 0x07	; 7
    4b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b50:	60 81       	ld	r22, Z
    4b52:	71 81       	ldd	r23, Z+1	; 0x01
    4b54:	82 81       	ldd	r24, Z+2	; 0x02
    4b56:	93 81       	ldd	r25, Z+3	; 0x03
    4b58:	20 e0       	ldi	r18, 0x00	; 0
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	40 e2       	ldi	r20, 0x20	; 32
    4b5e:	51 e4       	ldi	r21, 0x41	; 65
    4b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b64:	dc 01       	movw	r26, r24
    4b66:	cb 01       	movw	r24, r22
    4b68:	8e 01       	movw	r16, r28
    4b6a:	0d 50       	subi	r16, 0x0D	; 13
    4b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    4b6e:	bc 01       	movw	r22, r24
    4b70:	cd 01       	movw	r24, r26
    4b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b76:	dc 01       	movw	r26, r24
    4b78:	cb 01       	movw	r24, r22
    4b7a:	f8 01       	movw	r30, r16
    4b7c:	91 83       	std	Z+1, r25	; 0x01
    4b7e:	80 83       	st	Z, r24
    4b80:	1f c0       	rjmp	.+62     	; 0x4bc0 <Robot_voidObstacleAvoidingMode+0x300>
    4b82:	fe 01       	movw	r30, r28
    4b84:	ef 50       	subi	r30, 0x0F	; 15
    4b86:	ff 4f       	sbci	r31, 0xFF	; 255
    4b88:	88 ec       	ldi	r24, 0xC8	; 200
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	91 83       	std	Z+1, r25	; 0x01
    4b8e:	80 83       	st	Z, r24
    4b90:	fe 01       	movw	r30, r28
    4b92:	ef 50       	subi	r30, 0x0F	; 15
    4b94:	ff 4f       	sbci	r31, 0xFF	; 255
    4b96:	80 81       	ld	r24, Z
    4b98:	91 81       	ldd	r25, Z+1	; 0x01
    4b9a:	01 97       	sbiw	r24, 0x01	; 1
    4b9c:	f1 f7       	brne	.-4      	; 0x4b9a <Robot_voidObstacleAvoidingMode+0x2da>
    4b9e:	fe 01       	movw	r30, r28
    4ba0:	ef 50       	subi	r30, 0x0F	; 15
    4ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba4:	91 83       	std	Z+1, r25	; 0x01
    4ba6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ba8:	de 01       	movw	r26, r28
    4baa:	ad 50       	subi	r26, 0x0D	; 13
    4bac:	bf 4f       	sbci	r27, 0xFF	; 255
    4bae:	fe 01       	movw	r30, r28
    4bb0:	ed 50       	subi	r30, 0x0D	; 13
    4bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb4:	80 81       	ld	r24, Z
    4bb6:	91 81       	ldd	r25, Z+1	; 0x01
    4bb8:	01 97       	sbiw	r24, 0x01	; 1
    4bba:	11 96       	adiw	r26, 0x01	; 1
    4bbc:	9c 93       	st	X, r25
    4bbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bc0:	fe 01       	movw	r30, r28
    4bc2:	ed 50       	subi	r30, 0x0D	; 13
    4bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc6:	80 81       	ld	r24, Z
    4bc8:	91 81       	ldd	r25, Z+1	; 0x01
    4bca:	00 97       	sbiw	r24, 0x00	; 0
    4bcc:	d1 f6       	brne	.-76     	; 0x4b82 <Robot_voidObstacleAvoidingMode+0x2c2>
    4bce:	27 c0       	rjmp	.+78     	; 0x4c1e <Robot_voidObstacleAvoidingMode+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bd0:	8e 01       	movw	r16, r28
    4bd2:	0d 50       	subi	r16, 0x0D	; 13
    4bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    4bd6:	fe 01       	movw	r30, r28
    4bd8:	eb 50       	subi	r30, 0x0B	; 11
    4bda:	ff 4f       	sbci	r31, 0xFF	; 255
    4bdc:	60 81       	ld	r22, Z
    4bde:	71 81       	ldd	r23, Z+1	; 0x01
    4be0:	82 81       	ldd	r24, Z+2	; 0x02
    4be2:	93 81       	ldd	r25, Z+3	; 0x03
    4be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be8:	dc 01       	movw	r26, r24
    4bea:	cb 01       	movw	r24, r22
    4bec:	f8 01       	movw	r30, r16
    4bee:	91 83       	std	Z+1, r25	; 0x01
    4bf0:	80 83       	st	Z, r24
    4bf2:	de 01       	movw	r26, r28
    4bf4:	a1 51       	subi	r26, 0x11	; 17
    4bf6:	bf 4f       	sbci	r27, 0xFF	; 255
    4bf8:	fe 01       	movw	r30, r28
    4bfa:	ed 50       	subi	r30, 0x0D	; 13
    4bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfe:	80 81       	ld	r24, Z
    4c00:	91 81       	ldd	r25, Z+1	; 0x01
    4c02:	8d 93       	st	X+, r24
    4c04:	9c 93       	st	X, r25
    4c06:	fe 01       	movw	r30, r28
    4c08:	e1 51       	subi	r30, 0x11	; 17
    4c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0c:	80 81       	ld	r24, Z
    4c0e:	91 81       	ldd	r25, Z+1	; 0x01
    4c10:	01 97       	sbiw	r24, 0x01	; 1
    4c12:	f1 f7       	brne	.-4      	; 0x4c10 <Robot_voidObstacleAvoidingMode+0x350>
    4c14:	fe 01       	movw	r30, r28
    4c16:	e1 51       	subi	r30, 0x11	; 17
    4c18:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1a:	91 83       	std	Z+1, r25	; 0x01
    4c1c:	80 83       	st	Z, r24
	        _delay_ms(200);
	        BUZZER_voidBuzzer_Work(BUZZER_OFF);
    4c1e:	80 e0       	ldi	r24, 0x00	; 0
    4c20:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    4c24:	fe 01       	movw	r30, r28
    4c26:	e5 51       	subi	r30, 0x15	; 21
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	80 e0       	ldi	r24, 0x00	; 0
    4c2c:	90 e0       	ldi	r25, 0x00	; 0
    4c2e:	a6 e9       	ldi	r26, 0x96	; 150
    4c30:	b3 e4       	ldi	r27, 0x43	; 67
    4c32:	80 83       	st	Z, r24
    4c34:	91 83       	std	Z+1, r25	; 0x01
    4c36:	a2 83       	std	Z+2, r26	; 0x02
    4c38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c3a:	8e 01       	movw	r16, r28
    4c3c:	09 51       	subi	r16, 0x19	; 25
    4c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c40:	fe 01       	movw	r30, r28
    4c42:	e5 51       	subi	r30, 0x15	; 21
    4c44:	ff 4f       	sbci	r31, 0xFF	; 255
    4c46:	60 81       	ld	r22, Z
    4c48:	71 81       	ldd	r23, Z+1	; 0x01
    4c4a:	82 81       	ldd	r24, Z+2	; 0x02
    4c4c:	93 81       	ldd	r25, Z+3	; 0x03
    4c4e:	20 e0       	ldi	r18, 0x00	; 0
    4c50:	30 e0       	ldi	r19, 0x00	; 0
    4c52:	4a ef       	ldi	r20, 0xFA	; 250
    4c54:	54 e4       	ldi	r21, 0x44	; 68
    4c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c5a:	dc 01       	movw	r26, r24
    4c5c:	cb 01       	movw	r24, r22
    4c5e:	f8 01       	movw	r30, r16
    4c60:	80 83       	st	Z, r24
    4c62:	91 83       	std	Z+1, r25	; 0x01
    4c64:	a2 83       	std	Z+2, r26	; 0x02
    4c66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c68:	fe 01       	movw	r30, r28
    4c6a:	e9 51       	subi	r30, 0x19	; 25
    4c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6e:	60 81       	ld	r22, Z
    4c70:	71 81       	ldd	r23, Z+1	; 0x01
    4c72:	82 81       	ldd	r24, Z+2	; 0x02
    4c74:	93 81       	ldd	r25, Z+3	; 0x03
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	40 e8       	ldi	r20, 0x80	; 128
    4c7c:	5f e3       	ldi	r21, 0x3F	; 63
    4c7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c82:	88 23       	and	r24, r24
    4c84:	44 f4       	brge	.+16     	; 0x4c96 <Robot_voidObstacleAvoidingMode+0x3d6>
		__ticks = 1;
    4c86:	fe 01       	movw	r30, r28
    4c88:	eb 51       	subi	r30, 0x1B	; 27
    4c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8c:	81 e0       	ldi	r24, 0x01	; 1
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	91 83       	std	Z+1, r25	; 0x01
    4c92:	80 83       	st	Z, r24
    4c94:	64 c0       	rjmp	.+200    	; 0x4d5e <Robot_voidObstacleAvoidingMode+0x49e>
	else if (__tmp > 65535)
    4c96:	fe 01       	movw	r30, r28
    4c98:	e9 51       	subi	r30, 0x19	; 25
    4c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9c:	60 81       	ld	r22, Z
    4c9e:	71 81       	ldd	r23, Z+1	; 0x01
    4ca0:	82 81       	ldd	r24, Z+2	; 0x02
    4ca2:	93 81       	ldd	r25, Z+3	; 0x03
    4ca4:	20 e0       	ldi	r18, 0x00	; 0
    4ca6:	3f ef       	ldi	r19, 0xFF	; 255
    4ca8:	4f e7       	ldi	r20, 0x7F	; 127
    4caa:	57 e4       	ldi	r21, 0x47	; 71
    4cac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cb0:	18 16       	cp	r1, r24
    4cb2:	0c f0       	brlt	.+2      	; 0x4cb6 <Robot_voidObstacleAvoidingMode+0x3f6>
    4cb4:	43 c0       	rjmp	.+134    	; 0x4d3c <Robot_voidObstacleAvoidingMode+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	e5 51       	subi	r30, 0x15	; 21
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	60 81       	ld	r22, Z
    4cbe:	71 81       	ldd	r23, Z+1	; 0x01
    4cc0:	82 81       	ldd	r24, Z+2	; 0x02
    4cc2:	93 81       	ldd	r25, Z+3	; 0x03
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	40 e2       	ldi	r20, 0x20	; 32
    4cca:	51 e4       	ldi	r21, 0x41	; 65
    4ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cd0:	dc 01       	movw	r26, r24
    4cd2:	cb 01       	movw	r24, r22
    4cd4:	8e 01       	movw	r16, r28
    4cd6:	0b 51       	subi	r16, 0x1B	; 27
    4cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4cda:	bc 01       	movw	r22, r24
    4cdc:	cd 01       	movw	r24, r26
    4cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	f8 01       	movw	r30, r16
    4ce8:	91 83       	std	Z+1, r25	; 0x01
    4cea:	80 83       	st	Z, r24
    4cec:	1f c0       	rjmp	.+62     	; 0x4d2c <Robot_voidObstacleAvoidingMode+0x46c>
    4cee:	fe 01       	movw	r30, r28
    4cf0:	ed 51       	subi	r30, 0x1D	; 29
    4cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf4:	88 ec       	ldi	r24, 0xC8	; 200
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	91 83       	std	Z+1, r25	; 0x01
    4cfa:	80 83       	st	Z, r24
    4cfc:	fe 01       	movw	r30, r28
    4cfe:	ed 51       	subi	r30, 0x1D	; 29
    4d00:	ff 4f       	sbci	r31, 0xFF	; 255
    4d02:	80 81       	ld	r24, Z
    4d04:	91 81       	ldd	r25, Z+1	; 0x01
    4d06:	01 97       	sbiw	r24, 0x01	; 1
    4d08:	f1 f7       	brne	.-4      	; 0x4d06 <Robot_voidObstacleAvoidingMode+0x446>
    4d0a:	fe 01       	movw	r30, r28
    4d0c:	ed 51       	subi	r30, 0x1D	; 29
    4d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d10:	91 83       	std	Z+1, r25	; 0x01
    4d12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d14:	de 01       	movw	r26, r28
    4d16:	ab 51       	subi	r26, 0x1B	; 27
    4d18:	bf 4f       	sbci	r27, 0xFF	; 255
    4d1a:	fe 01       	movw	r30, r28
    4d1c:	eb 51       	subi	r30, 0x1B	; 27
    4d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d20:	80 81       	ld	r24, Z
    4d22:	91 81       	ldd	r25, Z+1	; 0x01
    4d24:	01 97       	sbiw	r24, 0x01	; 1
    4d26:	11 96       	adiw	r26, 0x01	; 1
    4d28:	9c 93       	st	X, r25
    4d2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d2c:	fe 01       	movw	r30, r28
    4d2e:	eb 51       	subi	r30, 0x1B	; 27
    4d30:	ff 4f       	sbci	r31, 0xFF	; 255
    4d32:	80 81       	ld	r24, Z
    4d34:	91 81       	ldd	r25, Z+1	; 0x01
    4d36:	00 97       	sbiw	r24, 0x00	; 0
    4d38:	d1 f6       	brne	.-76     	; 0x4cee <Robot_voidObstacleAvoidingMode+0x42e>
    4d3a:	27 c0       	rjmp	.+78     	; 0x4d8a <Robot_voidObstacleAvoidingMode+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d3c:	8e 01       	movw	r16, r28
    4d3e:	0b 51       	subi	r16, 0x1B	; 27
    4d40:	1f 4f       	sbci	r17, 0xFF	; 255
    4d42:	fe 01       	movw	r30, r28
    4d44:	e9 51       	subi	r30, 0x19	; 25
    4d46:	ff 4f       	sbci	r31, 0xFF	; 255
    4d48:	60 81       	ld	r22, Z
    4d4a:	71 81       	ldd	r23, Z+1	; 0x01
    4d4c:	82 81       	ldd	r24, Z+2	; 0x02
    4d4e:	93 81       	ldd	r25, Z+3	; 0x03
    4d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d54:	dc 01       	movw	r26, r24
    4d56:	cb 01       	movw	r24, r22
    4d58:	f8 01       	movw	r30, r16
    4d5a:	91 83       	std	Z+1, r25	; 0x01
    4d5c:	80 83       	st	Z, r24
    4d5e:	de 01       	movw	r26, r28
    4d60:	af 51       	subi	r26, 0x1F	; 31
    4d62:	bf 4f       	sbci	r27, 0xFF	; 255
    4d64:	fe 01       	movw	r30, r28
    4d66:	eb 51       	subi	r30, 0x1B	; 27
    4d68:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6a:	80 81       	ld	r24, Z
    4d6c:	91 81       	ldd	r25, Z+1	; 0x01
    4d6e:	8d 93       	st	X+, r24
    4d70:	9c 93       	st	X, r25
    4d72:	fe 01       	movw	r30, r28
    4d74:	ef 51       	subi	r30, 0x1F	; 31
    4d76:	ff 4f       	sbci	r31, 0xFF	; 255
    4d78:	80 81       	ld	r24, Z
    4d7a:	91 81       	ldd	r25, Z+1	; 0x01
    4d7c:	01 97       	sbiw	r24, 0x01	; 1
    4d7e:	f1 f7       	brne	.-4      	; 0x4d7c <Robot_voidObstacleAvoidingMode+0x4bc>
    4d80:	fe 01       	movw	r30, r28
    4d82:	ef 51       	subi	r30, 0x1F	; 31
    4d84:	ff 4f       	sbci	r31, 0xFF	; 255
    4d86:	91 83       	std	Z+1, r25	; 0x01
    4d88:	80 83       	st	Z, r24
		    _delay_ms(300);
		    /* Stop motors*/
			Robot_voidStop();
    4d8a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <Robot_voidStop>
			BUZZER_voidBuzzer_Work(BUZZER_ON);
    4d8e:	81 e0       	ldi	r24, 0x01	; 1
    4d90:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    4d94:	fe 01       	movw	r30, r28
    4d96:	e3 52       	subi	r30, 0x23	; 35
    4d98:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9a:	80 e0       	ldi	r24, 0x00	; 0
    4d9c:	90 e0       	ldi	r25, 0x00	; 0
    4d9e:	a8 e4       	ldi	r26, 0x48	; 72
    4da0:	b3 e4       	ldi	r27, 0x43	; 67
    4da2:	80 83       	st	Z, r24
    4da4:	91 83       	std	Z+1, r25	; 0x01
    4da6:	a2 83       	std	Z+2, r26	; 0x02
    4da8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4daa:	8e 01       	movw	r16, r28
    4dac:	07 52       	subi	r16, 0x27	; 39
    4dae:	1f 4f       	sbci	r17, 0xFF	; 255
    4db0:	fe 01       	movw	r30, r28
    4db2:	e3 52       	subi	r30, 0x23	; 35
    4db4:	ff 4f       	sbci	r31, 0xFF	; 255
    4db6:	60 81       	ld	r22, Z
    4db8:	71 81       	ldd	r23, Z+1	; 0x01
    4dba:	82 81       	ldd	r24, Z+2	; 0x02
    4dbc:	93 81       	ldd	r25, Z+3	; 0x03
    4dbe:	20 e0       	ldi	r18, 0x00	; 0
    4dc0:	30 e0       	ldi	r19, 0x00	; 0
    4dc2:	4a ef       	ldi	r20, 0xFA	; 250
    4dc4:	54 e4       	ldi	r21, 0x44	; 68
    4dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dca:	dc 01       	movw	r26, r24
    4dcc:	cb 01       	movw	r24, r22
    4dce:	f8 01       	movw	r30, r16
    4dd0:	80 83       	st	Z, r24
    4dd2:	91 83       	std	Z+1, r25	; 0x01
    4dd4:	a2 83       	std	Z+2, r26	; 0x02
    4dd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4dd8:	fe 01       	movw	r30, r28
    4dda:	e7 52       	subi	r30, 0x27	; 39
    4ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dde:	60 81       	ld	r22, Z
    4de0:	71 81       	ldd	r23, Z+1	; 0x01
    4de2:	82 81       	ldd	r24, Z+2	; 0x02
    4de4:	93 81       	ldd	r25, Z+3	; 0x03
    4de6:	20 e0       	ldi	r18, 0x00	; 0
    4de8:	30 e0       	ldi	r19, 0x00	; 0
    4dea:	40 e8       	ldi	r20, 0x80	; 128
    4dec:	5f e3       	ldi	r21, 0x3F	; 63
    4dee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4df2:	88 23       	and	r24, r24
    4df4:	44 f4       	brge	.+16     	; 0x4e06 <Robot_voidObstacleAvoidingMode+0x546>
		__ticks = 1;
    4df6:	fe 01       	movw	r30, r28
    4df8:	e9 52       	subi	r30, 0x29	; 41
    4dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfc:	81 e0       	ldi	r24, 0x01	; 1
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	91 83       	std	Z+1, r25	; 0x01
    4e02:	80 83       	st	Z, r24
    4e04:	64 c0       	rjmp	.+200    	; 0x4ece <Robot_voidObstacleAvoidingMode+0x60e>
	else if (__tmp > 65535)
    4e06:	fe 01       	movw	r30, r28
    4e08:	e7 52       	subi	r30, 0x27	; 39
    4e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0c:	60 81       	ld	r22, Z
    4e0e:	71 81       	ldd	r23, Z+1	; 0x01
    4e10:	82 81       	ldd	r24, Z+2	; 0x02
    4e12:	93 81       	ldd	r25, Z+3	; 0x03
    4e14:	20 e0       	ldi	r18, 0x00	; 0
    4e16:	3f ef       	ldi	r19, 0xFF	; 255
    4e18:	4f e7       	ldi	r20, 0x7F	; 127
    4e1a:	57 e4       	ldi	r21, 0x47	; 71
    4e1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e20:	18 16       	cp	r1, r24
    4e22:	0c f0       	brlt	.+2      	; 0x4e26 <Robot_voidObstacleAvoidingMode+0x566>
    4e24:	43 c0       	rjmp	.+134    	; 0x4eac <Robot_voidObstacleAvoidingMode+0x5ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e26:	fe 01       	movw	r30, r28
    4e28:	e3 52       	subi	r30, 0x23	; 35
    4e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2c:	60 81       	ld	r22, Z
    4e2e:	71 81       	ldd	r23, Z+1	; 0x01
    4e30:	82 81       	ldd	r24, Z+2	; 0x02
    4e32:	93 81       	ldd	r25, Z+3	; 0x03
    4e34:	20 e0       	ldi	r18, 0x00	; 0
    4e36:	30 e0       	ldi	r19, 0x00	; 0
    4e38:	40 e2       	ldi	r20, 0x20	; 32
    4e3a:	51 e4       	ldi	r21, 0x41	; 65
    4e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e40:	dc 01       	movw	r26, r24
    4e42:	cb 01       	movw	r24, r22
    4e44:	8e 01       	movw	r16, r28
    4e46:	09 52       	subi	r16, 0x29	; 41
    4e48:	1f 4f       	sbci	r17, 0xFF	; 255
    4e4a:	bc 01       	movw	r22, r24
    4e4c:	cd 01       	movw	r24, r26
    4e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e52:	dc 01       	movw	r26, r24
    4e54:	cb 01       	movw	r24, r22
    4e56:	f8 01       	movw	r30, r16
    4e58:	91 83       	std	Z+1, r25	; 0x01
    4e5a:	80 83       	st	Z, r24
    4e5c:	1f c0       	rjmp	.+62     	; 0x4e9c <Robot_voidObstacleAvoidingMode+0x5dc>
    4e5e:	fe 01       	movw	r30, r28
    4e60:	eb 52       	subi	r30, 0x2B	; 43
    4e62:	ff 4f       	sbci	r31, 0xFF	; 255
    4e64:	88 ec       	ldi	r24, 0xC8	; 200
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	91 83       	std	Z+1, r25	; 0x01
    4e6a:	80 83       	st	Z, r24
    4e6c:	fe 01       	movw	r30, r28
    4e6e:	eb 52       	subi	r30, 0x2B	; 43
    4e70:	ff 4f       	sbci	r31, 0xFF	; 255
    4e72:	80 81       	ld	r24, Z
    4e74:	91 81       	ldd	r25, Z+1	; 0x01
    4e76:	01 97       	sbiw	r24, 0x01	; 1
    4e78:	f1 f7       	brne	.-4      	; 0x4e76 <Robot_voidObstacleAvoidingMode+0x5b6>
    4e7a:	fe 01       	movw	r30, r28
    4e7c:	eb 52       	subi	r30, 0x2B	; 43
    4e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e80:	91 83       	std	Z+1, r25	; 0x01
    4e82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e84:	de 01       	movw	r26, r28
    4e86:	a9 52       	subi	r26, 0x29	; 41
    4e88:	bf 4f       	sbci	r27, 0xFF	; 255
    4e8a:	fe 01       	movw	r30, r28
    4e8c:	e9 52       	subi	r30, 0x29	; 41
    4e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e90:	80 81       	ld	r24, Z
    4e92:	91 81       	ldd	r25, Z+1	; 0x01
    4e94:	01 97       	sbiw	r24, 0x01	; 1
    4e96:	11 96       	adiw	r26, 0x01	; 1
    4e98:	9c 93       	st	X, r25
    4e9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e9c:	fe 01       	movw	r30, r28
    4e9e:	e9 52       	subi	r30, 0x29	; 41
    4ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea2:	80 81       	ld	r24, Z
    4ea4:	91 81       	ldd	r25, Z+1	; 0x01
    4ea6:	00 97       	sbiw	r24, 0x00	; 0
    4ea8:	d1 f6       	brne	.-76     	; 0x4e5e <Robot_voidObstacleAvoidingMode+0x59e>
    4eaa:	27 c0       	rjmp	.+78     	; 0x4efa <Robot_voidObstacleAvoidingMode+0x63a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eac:	8e 01       	movw	r16, r28
    4eae:	09 52       	subi	r16, 0x29	; 41
    4eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    4eb2:	fe 01       	movw	r30, r28
    4eb4:	e7 52       	subi	r30, 0x27	; 39
    4eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb8:	60 81       	ld	r22, Z
    4eba:	71 81       	ldd	r23, Z+1	; 0x01
    4ebc:	82 81       	ldd	r24, Z+2	; 0x02
    4ebe:	93 81       	ldd	r25, Z+3	; 0x03
    4ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ec4:	dc 01       	movw	r26, r24
    4ec6:	cb 01       	movw	r24, r22
    4ec8:	f8 01       	movw	r30, r16
    4eca:	91 83       	std	Z+1, r25	; 0x01
    4ecc:	80 83       	st	Z, r24
    4ece:	de 01       	movw	r26, r28
    4ed0:	ad 52       	subi	r26, 0x2D	; 45
    4ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    4ed4:	fe 01       	movw	r30, r28
    4ed6:	e9 52       	subi	r30, 0x29	; 41
    4ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eda:	80 81       	ld	r24, Z
    4edc:	91 81       	ldd	r25, Z+1	; 0x01
    4ede:	8d 93       	st	X+, r24
    4ee0:	9c 93       	st	X, r25
    4ee2:	fe 01       	movw	r30, r28
    4ee4:	ed 52       	subi	r30, 0x2D	; 45
    4ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee8:	80 81       	ld	r24, Z
    4eea:	91 81       	ldd	r25, Z+1	; 0x01
    4eec:	01 97       	sbiw	r24, 0x01	; 1
    4eee:	f1 f7       	brne	.-4      	; 0x4eec <Robot_voidObstacleAvoidingMode+0x62c>
    4ef0:	fe 01       	movw	r30, r28
    4ef2:	ed 52       	subi	r30, 0x2D	; 45
    4ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef6:	91 83       	std	Z+1, r25	; 0x01
    4ef8:	80 83       	st	Z, r24
			_delay_ms(200);
			BUZZER_voidBuzzer_Work(BUZZER_OFF);
    4efa:	80 e0       	ldi	r24, 0x00	; 0
    4efc:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    4f00:	fe 01       	movw	r30, r28
    4f02:	e1 53       	subi	r30, 0x31	; 49
    4f04:	ff 4f       	sbci	r31, 0xFF	; 255
    4f06:	80 e0       	ldi	r24, 0x00	; 0
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	a6 e9       	ldi	r26, 0x96	; 150
    4f0c:	b3 e4       	ldi	r27, 0x43	; 67
    4f0e:	80 83       	st	Z, r24
    4f10:	91 83       	std	Z+1, r25	; 0x01
    4f12:	a2 83       	std	Z+2, r26	; 0x02
    4f14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f16:	8e 01       	movw	r16, r28
    4f18:	05 53       	subi	r16, 0x35	; 53
    4f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f1c:	fe 01       	movw	r30, r28
    4f1e:	e1 53       	subi	r30, 0x31	; 49
    4f20:	ff 4f       	sbci	r31, 0xFF	; 255
    4f22:	60 81       	ld	r22, Z
    4f24:	71 81       	ldd	r23, Z+1	; 0x01
    4f26:	82 81       	ldd	r24, Z+2	; 0x02
    4f28:	93 81       	ldd	r25, Z+3	; 0x03
    4f2a:	20 e0       	ldi	r18, 0x00	; 0
    4f2c:	30 e0       	ldi	r19, 0x00	; 0
    4f2e:	4a ef       	ldi	r20, 0xFA	; 250
    4f30:	54 e4       	ldi	r21, 0x44	; 68
    4f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f36:	dc 01       	movw	r26, r24
    4f38:	cb 01       	movw	r24, r22
    4f3a:	f8 01       	movw	r30, r16
    4f3c:	80 83       	st	Z, r24
    4f3e:	91 83       	std	Z+1, r25	; 0x01
    4f40:	a2 83       	std	Z+2, r26	; 0x02
    4f42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f44:	fe 01       	movw	r30, r28
    4f46:	e5 53       	subi	r30, 0x35	; 53
    4f48:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4a:	60 81       	ld	r22, Z
    4f4c:	71 81       	ldd	r23, Z+1	; 0x01
    4f4e:	82 81       	ldd	r24, Z+2	; 0x02
    4f50:	93 81       	ldd	r25, Z+3	; 0x03
    4f52:	20 e0       	ldi	r18, 0x00	; 0
    4f54:	30 e0       	ldi	r19, 0x00	; 0
    4f56:	40 e8       	ldi	r20, 0x80	; 128
    4f58:	5f e3       	ldi	r21, 0x3F	; 63
    4f5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f5e:	88 23       	and	r24, r24
    4f60:	44 f4       	brge	.+16     	; 0x4f72 <Robot_voidObstacleAvoidingMode+0x6b2>
		__ticks = 1;
    4f62:	fe 01       	movw	r30, r28
    4f64:	e7 53       	subi	r30, 0x37	; 55
    4f66:	ff 4f       	sbci	r31, 0xFF	; 255
    4f68:	81 e0       	ldi	r24, 0x01	; 1
    4f6a:	90 e0       	ldi	r25, 0x00	; 0
    4f6c:	91 83       	std	Z+1, r25	; 0x01
    4f6e:	80 83       	st	Z, r24
    4f70:	64 c0       	rjmp	.+200    	; 0x503a <Robot_voidObstacleAvoidingMode+0x77a>
	else if (__tmp > 65535)
    4f72:	fe 01       	movw	r30, r28
    4f74:	e5 53       	subi	r30, 0x35	; 53
    4f76:	ff 4f       	sbci	r31, 0xFF	; 255
    4f78:	60 81       	ld	r22, Z
    4f7a:	71 81       	ldd	r23, Z+1	; 0x01
    4f7c:	82 81       	ldd	r24, Z+2	; 0x02
    4f7e:	93 81       	ldd	r25, Z+3	; 0x03
    4f80:	20 e0       	ldi	r18, 0x00	; 0
    4f82:	3f ef       	ldi	r19, 0xFF	; 255
    4f84:	4f e7       	ldi	r20, 0x7F	; 127
    4f86:	57 e4       	ldi	r21, 0x47	; 71
    4f88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f8c:	18 16       	cp	r1, r24
    4f8e:	0c f0       	brlt	.+2      	; 0x4f92 <Robot_voidObstacleAvoidingMode+0x6d2>
    4f90:	43 c0       	rjmp	.+134    	; 0x5018 <Robot_voidObstacleAvoidingMode+0x758>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f92:	fe 01       	movw	r30, r28
    4f94:	e1 53       	subi	r30, 0x31	; 49
    4f96:	ff 4f       	sbci	r31, 0xFF	; 255
    4f98:	60 81       	ld	r22, Z
    4f9a:	71 81       	ldd	r23, Z+1	; 0x01
    4f9c:	82 81       	ldd	r24, Z+2	; 0x02
    4f9e:	93 81       	ldd	r25, Z+3	; 0x03
    4fa0:	20 e0       	ldi	r18, 0x00	; 0
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	40 e2       	ldi	r20, 0x20	; 32
    4fa6:	51 e4       	ldi	r21, 0x41	; 65
    4fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fac:	dc 01       	movw	r26, r24
    4fae:	cb 01       	movw	r24, r22
    4fb0:	8e 01       	movw	r16, r28
    4fb2:	07 53       	subi	r16, 0x37	; 55
    4fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    4fb6:	bc 01       	movw	r22, r24
    4fb8:	cd 01       	movw	r24, r26
    4fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fbe:	dc 01       	movw	r26, r24
    4fc0:	cb 01       	movw	r24, r22
    4fc2:	f8 01       	movw	r30, r16
    4fc4:	91 83       	std	Z+1, r25	; 0x01
    4fc6:	80 83       	st	Z, r24
    4fc8:	1f c0       	rjmp	.+62     	; 0x5008 <Robot_voidObstacleAvoidingMode+0x748>
    4fca:	fe 01       	movw	r30, r28
    4fcc:	e9 53       	subi	r30, 0x39	; 57
    4fce:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd0:	88 ec       	ldi	r24, 0xC8	; 200
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	91 83       	std	Z+1, r25	; 0x01
    4fd6:	80 83       	st	Z, r24
    4fd8:	fe 01       	movw	r30, r28
    4fda:	e9 53       	subi	r30, 0x39	; 57
    4fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4fde:	80 81       	ld	r24, Z
    4fe0:	91 81       	ldd	r25, Z+1	; 0x01
    4fe2:	01 97       	sbiw	r24, 0x01	; 1
    4fe4:	f1 f7       	brne	.-4      	; 0x4fe2 <Robot_voidObstacleAvoidingMode+0x722>
    4fe6:	fe 01       	movw	r30, r28
    4fe8:	e9 53       	subi	r30, 0x39	; 57
    4fea:	ff 4f       	sbci	r31, 0xFF	; 255
    4fec:	91 83       	std	Z+1, r25	; 0x01
    4fee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ff0:	de 01       	movw	r26, r28
    4ff2:	a7 53       	subi	r26, 0x37	; 55
    4ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    4ff6:	fe 01       	movw	r30, r28
    4ff8:	e7 53       	subi	r30, 0x37	; 55
    4ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffc:	80 81       	ld	r24, Z
    4ffe:	91 81       	ldd	r25, Z+1	; 0x01
    5000:	01 97       	sbiw	r24, 0x01	; 1
    5002:	11 96       	adiw	r26, 0x01	; 1
    5004:	9c 93       	st	X, r25
    5006:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5008:	fe 01       	movw	r30, r28
    500a:	e7 53       	subi	r30, 0x37	; 55
    500c:	ff 4f       	sbci	r31, 0xFF	; 255
    500e:	80 81       	ld	r24, Z
    5010:	91 81       	ldd	r25, Z+1	; 0x01
    5012:	00 97       	sbiw	r24, 0x00	; 0
    5014:	d1 f6       	brne	.-76     	; 0x4fca <Robot_voidObstacleAvoidingMode+0x70a>
    5016:	27 c0       	rjmp	.+78     	; 0x5066 <Robot_voidObstacleAvoidingMode+0x7a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5018:	8e 01       	movw	r16, r28
    501a:	07 53       	subi	r16, 0x37	; 55
    501c:	1f 4f       	sbci	r17, 0xFF	; 255
    501e:	fe 01       	movw	r30, r28
    5020:	e5 53       	subi	r30, 0x35	; 53
    5022:	ff 4f       	sbci	r31, 0xFF	; 255
    5024:	60 81       	ld	r22, Z
    5026:	71 81       	ldd	r23, Z+1	; 0x01
    5028:	82 81       	ldd	r24, Z+2	; 0x02
    502a:	93 81       	ldd	r25, Z+3	; 0x03
    502c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5030:	dc 01       	movw	r26, r24
    5032:	cb 01       	movw	r24, r22
    5034:	f8 01       	movw	r30, r16
    5036:	91 83       	std	Z+1, r25	; 0x01
    5038:	80 83       	st	Z, r24
    503a:	de 01       	movw	r26, r28
    503c:	ab 53       	subi	r26, 0x3B	; 59
    503e:	bf 4f       	sbci	r27, 0xFF	; 255
    5040:	fe 01       	movw	r30, r28
    5042:	e7 53       	subi	r30, 0x37	; 55
    5044:	ff 4f       	sbci	r31, 0xFF	; 255
    5046:	80 81       	ld	r24, Z
    5048:	91 81       	ldd	r25, Z+1	; 0x01
    504a:	8d 93       	st	X+, r24
    504c:	9c 93       	st	X, r25
    504e:	fe 01       	movw	r30, r28
    5050:	eb 53       	subi	r30, 0x3B	; 59
    5052:	ff 4f       	sbci	r31, 0xFF	; 255
    5054:	80 81       	ld	r24, Z
    5056:	91 81       	ldd	r25, Z+1	; 0x01
    5058:	01 97       	sbiw	r24, 0x01	; 1
    505a:	f1 f7       	brne	.-4      	; 0x5058 <Robot_voidObstacleAvoidingMode+0x798>
    505c:	fe 01       	movw	r30, r28
    505e:	eb 53       	subi	r30, 0x3B	; 59
    5060:	ff 4f       	sbci	r31, 0xFF	; 255
    5062:	91 83       	std	Z+1, r25	; 0x01
    5064:	80 83       	st	Z, r24
			_delay_ms(300);
			/* Servo turn to Left (180) then read distance*/
			BUZZER_voidBuzzer_Work(BUZZER_ON);
    5066:	81 e0       	ldi	r24, 0x01	; 1
    5068:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    506c:	fe 01       	movw	r30, r28
    506e:	ef 53       	subi	r30, 0x3F	; 63
    5070:	ff 4f       	sbci	r31, 0xFF	; 255
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	a8 e4       	ldi	r26, 0x48	; 72
    5078:	b3 e4       	ldi	r27, 0x43	; 67
    507a:	80 83       	st	Z, r24
    507c:	91 83       	std	Z+1, r25	; 0x01
    507e:	a2 83       	std	Z+2, r26	; 0x02
    5080:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5082:	8e 01       	movw	r16, r28
    5084:	03 54       	subi	r16, 0x43	; 67
    5086:	1f 4f       	sbci	r17, 0xFF	; 255
    5088:	fe 01       	movw	r30, r28
    508a:	ef 53       	subi	r30, 0x3F	; 63
    508c:	ff 4f       	sbci	r31, 0xFF	; 255
    508e:	60 81       	ld	r22, Z
    5090:	71 81       	ldd	r23, Z+1	; 0x01
    5092:	82 81       	ldd	r24, Z+2	; 0x02
    5094:	93 81       	ldd	r25, Z+3	; 0x03
    5096:	20 e0       	ldi	r18, 0x00	; 0
    5098:	30 e0       	ldi	r19, 0x00	; 0
    509a:	4a ef       	ldi	r20, 0xFA	; 250
    509c:	54 e4       	ldi	r21, 0x44	; 68
    509e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50a2:	dc 01       	movw	r26, r24
    50a4:	cb 01       	movw	r24, r22
    50a6:	f8 01       	movw	r30, r16
    50a8:	80 83       	st	Z, r24
    50aa:	91 83       	std	Z+1, r25	; 0x01
    50ac:	a2 83       	std	Z+2, r26	; 0x02
    50ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50b0:	fe 01       	movw	r30, r28
    50b2:	e3 54       	subi	r30, 0x43	; 67
    50b4:	ff 4f       	sbci	r31, 0xFF	; 255
    50b6:	60 81       	ld	r22, Z
    50b8:	71 81       	ldd	r23, Z+1	; 0x01
    50ba:	82 81       	ldd	r24, Z+2	; 0x02
    50bc:	93 81       	ldd	r25, Z+3	; 0x03
    50be:	20 e0       	ldi	r18, 0x00	; 0
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	40 e8       	ldi	r20, 0x80	; 128
    50c4:	5f e3       	ldi	r21, 0x3F	; 63
    50c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50ca:	88 23       	and	r24, r24
    50cc:	44 f4       	brge	.+16     	; 0x50de <Robot_voidObstacleAvoidingMode+0x81e>
		__ticks = 1;
    50ce:	fe 01       	movw	r30, r28
    50d0:	e5 54       	subi	r30, 0x45	; 69
    50d2:	ff 4f       	sbci	r31, 0xFF	; 255
    50d4:	81 e0       	ldi	r24, 0x01	; 1
    50d6:	90 e0       	ldi	r25, 0x00	; 0
    50d8:	91 83       	std	Z+1, r25	; 0x01
    50da:	80 83       	st	Z, r24
    50dc:	64 c0       	rjmp	.+200    	; 0x51a6 <Robot_voidObstacleAvoidingMode+0x8e6>
	else if (__tmp > 65535)
    50de:	fe 01       	movw	r30, r28
    50e0:	e3 54       	subi	r30, 0x43	; 67
    50e2:	ff 4f       	sbci	r31, 0xFF	; 255
    50e4:	60 81       	ld	r22, Z
    50e6:	71 81       	ldd	r23, Z+1	; 0x01
    50e8:	82 81       	ldd	r24, Z+2	; 0x02
    50ea:	93 81       	ldd	r25, Z+3	; 0x03
    50ec:	20 e0       	ldi	r18, 0x00	; 0
    50ee:	3f ef       	ldi	r19, 0xFF	; 255
    50f0:	4f e7       	ldi	r20, 0x7F	; 127
    50f2:	57 e4       	ldi	r21, 0x47	; 71
    50f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50f8:	18 16       	cp	r1, r24
    50fa:	0c f0       	brlt	.+2      	; 0x50fe <Robot_voidObstacleAvoidingMode+0x83e>
    50fc:	43 c0       	rjmp	.+134    	; 0x5184 <Robot_voidObstacleAvoidingMode+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50fe:	fe 01       	movw	r30, r28
    5100:	ef 53       	subi	r30, 0x3F	; 63
    5102:	ff 4f       	sbci	r31, 0xFF	; 255
    5104:	60 81       	ld	r22, Z
    5106:	71 81       	ldd	r23, Z+1	; 0x01
    5108:	82 81       	ldd	r24, Z+2	; 0x02
    510a:	93 81       	ldd	r25, Z+3	; 0x03
    510c:	20 e0       	ldi	r18, 0x00	; 0
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	40 e2       	ldi	r20, 0x20	; 32
    5112:	51 e4       	ldi	r21, 0x41	; 65
    5114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5118:	dc 01       	movw	r26, r24
    511a:	cb 01       	movw	r24, r22
    511c:	8e 01       	movw	r16, r28
    511e:	05 54       	subi	r16, 0x45	; 69
    5120:	1f 4f       	sbci	r17, 0xFF	; 255
    5122:	bc 01       	movw	r22, r24
    5124:	cd 01       	movw	r24, r26
    5126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    512a:	dc 01       	movw	r26, r24
    512c:	cb 01       	movw	r24, r22
    512e:	f8 01       	movw	r30, r16
    5130:	91 83       	std	Z+1, r25	; 0x01
    5132:	80 83       	st	Z, r24
    5134:	1f c0       	rjmp	.+62     	; 0x5174 <Robot_voidObstacleAvoidingMode+0x8b4>
    5136:	fe 01       	movw	r30, r28
    5138:	e7 54       	subi	r30, 0x47	; 71
    513a:	ff 4f       	sbci	r31, 0xFF	; 255
    513c:	88 ec       	ldi	r24, 0xC8	; 200
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	91 83       	std	Z+1, r25	; 0x01
    5142:	80 83       	st	Z, r24
    5144:	fe 01       	movw	r30, r28
    5146:	e7 54       	subi	r30, 0x47	; 71
    5148:	ff 4f       	sbci	r31, 0xFF	; 255
    514a:	80 81       	ld	r24, Z
    514c:	91 81       	ldd	r25, Z+1	; 0x01
    514e:	01 97       	sbiw	r24, 0x01	; 1
    5150:	f1 f7       	brne	.-4      	; 0x514e <Robot_voidObstacleAvoidingMode+0x88e>
    5152:	fe 01       	movw	r30, r28
    5154:	e7 54       	subi	r30, 0x47	; 71
    5156:	ff 4f       	sbci	r31, 0xFF	; 255
    5158:	91 83       	std	Z+1, r25	; 0x01
    515a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    515c:	de 01       	movw	r26, r28
    515e:	a5 54       	subi	r26, 0x45	; 69
    5160:	bf 4f       	sbci	r27, 0xFF	; 255
    5162:	fe 01       	movw	r30, r28
    5164:	e5 54       	subi	r30, 0x45	; 69
    5166:	ff 4f       	sbci	r31, 0xFF	; 255
    5168:	80 81       	ld	r24, Z
    516a:	91 81       	ldd	r25, Z+1	; 0x01
    516c:	01 97       	sbiw	r24, 0x01	; 1
    516e:	11 96       	adiw	r26, 0x01	; 1
    5170:	9c 93       	st	X, r25
    5172:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5174:	fe 01       	movw	r30, r28
    5176:	e5 54       	subi	r30, 0x45	; 69
    5178:	ff 4f       	sbci	r31, 0xFF	; 255
    517a:	80 81       	ld	r24, Z
    517c:	91 81       	ldd	r25, Z+1	; 0x01
    517e:	00 97       	sbiw	r24, 0x00	; 0
    5180:	d1 f6       	brne	.-76     	; 0x5136 <Robot_voidObstacleAvoidingMode+0x876>
    5182:	27 c0       	rjmp	.+78     	; 0x51d2 <Robot_voidObstacleAvoidingMode+0x912>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5184:	8e 01       	movw	r16, r28
    5186:	05 54       	subi	r16, 0x45	; 69
    5188:	1f 4f       	sbci	r17, 0xFF	; 255
    518a:	fe 01       	movw	r30, r28
    518c:	e3 54       	subi	r30, 0x43	; 67
    518e:	ff 4f       	sbci	r31, 0xFF	; 255
    5190:	60 81       	ld	r22, Z
    5192:	71 81       	ldd	r23, Z+1	; 0x01
    5194:	82 81       	ldd	r24, Z+2	; 0x02
    5196:	93 81       	ldd	r25, Z+3	; 0x03
    5198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    519c:	dc 01       	movw	r26, r24
    519e:	cb 01       	movw	r24, r22
    51a0:	f8 01       	movw	r30, r16
    51a2:	91 83       	std	Z+1, r25	; 0x01
    51a4:	80 83       	st	Z, r24
    51a6:	de 01       	movw	r26, r28
    51a8:	a9 54       	subi	r26, 0x49	; 73
    51aa:	bf 4f       	sbci	r27, 0xFF	; 255
    51ac:	fe 01       	movw	r30, r28
    51ae:	e5 54       	subi	r30, 0x45	; 69
    51b0:	ff 4f       	sbci	r31, 0xFF	; 255
    51b2:	80 81       	ld	r24, Z
    51b4:	91 81       	ldd	r25, Z+1	; 0x01
    51b6:	8d 93       	st	X+, r24
    51b8:	9c 93       	st	X, r25
    51ba:	fe 01       	movw	r30, r28
    51bc:	e9 54       	subi	r30, 0x49	; 73
    51be:	ff 4f       	sbci	r31, 0xFF	; 255
    51c0:	80 81       	ld	r24, Z
    51c2:	91 81       	ldd	r25, Z+1	; 0x01
    51c4:	01 97       	sbiw	r24, 0x01	; 1
    51c6:	f1 f7       	brne	.-4      	; 0x51c4 <Robot_voidObstacleAvoidingMode+0x904>
    51c8:	fe 01       	movw	r30, r28
    51ca:	e9 54       	subi	r30, 0x49	; 73
    51cc:	ff 4f       	sbci	r31, 0xFF	; 255
    51ce:	91 83       	std	Z+1, r25	; 0x01
    51d0:	80 83       	st	Z, r24
			_delay_ms(200);
			BUZZER_voidBuzzer_Work(BUZZER_OFF);
    51d2:	80 e0       	ldi	r24, 0x00	; 0
    51d4:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
			SERVO_voidTimer1ServoSetAngleOCR1B(180);
    51d8:	64 eb       	ldi	r22, 0xB4	; 180
    51da:	70 e0       	ldi	r23, 0x00	; 0
    51dc:	80 e0       	ldi	r24, 0x00	; 0
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	0e 94 6f 16 	call	0x2cde	; 0x2cde <SERVO_voidTimer1ServoSetAngleOCR1B>
    51e4:	fe 01       	movw	r30, r28
    51e6:	ed 54       	subi	r30, 0x4D	; 77
    51e8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ea:	80 e0       	ldi	r24, 0x00	; 0
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	a6 e9       	ldi	r26, 0x96	; 150
    51f0:	b3 e4       	ldi	r27, 0x43	; 67
    51f2:	80 83       	st	Z, r24
    51f4:	91 83       	std	Z+1, r25	; 0x01
    51f6:	a2 83       	std	Z+2, r26	; 0x02
    51f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51fa:	8e 01       	movw	r16, r28
    51fc:	01 55       	subi	r16, 0x51	; 81
    51fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5200:	fe 01       	movw	r30, r28
    5202:	ed 54       	subi	r30, 0x4D	; 77
    5204:	ff 4f       	sbci	r31, 0xFF	; 255
    5206:	60 81       	ld	r22, Z
    5208:	71 81       	ldd	r23, Z+1	; 0x01
    520a:	82 81       	ldd	r24, Z+2	; 0x02
    520c:	93 81       	ldd	r25, Z+3	; 0x03
    520e:	20 e0       	ldi	r18, 0x00	; 0
    5210:	30 e0       	ldi	r19, 0x00	; 0
    5212:	4a ef       	ldi	r20, 0xFA	; 250
    5214:	54 e4       	ldi	r21, 0x44	; 68
    5216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    521a:	dc 01       	movw	r26, r24
    521c:	cb 01       	movw	r24, r22
    521e:	f8 01       	movw	r30, r16
    5220:	80 83       	st	Z, r24
    5222:	91 83       	std	Z+1, r25	; 0x01
    5224:	a2 83       	std	Z+2, r26	; 0x02
    5226:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5228:	fe 01       	movw	r30, r28
    522a:	e1 55       	subi	r30, 0x51	; 81
    522c:	ff 4f       	sbci	r31, 0xFF	; 255
    522e:	60 81       	ld	r22, Z
    5230:	71 81       	ldd	r23, Z+1	; 0x01
    5232:	82 81       	ldd	r24, Z+2	; 0x02
    5234:	93 81       	ldd	r25, Z+3	; 0x03
    5236:	20 e0       	ldi	r18, 0x00	; 0
    5238:	30 e0       	ldi	r19, 0x00	; 0
    523a:	40 e8       	ldi	r20, 0x80	; 128
    523c:	5f e3       	ldi	r21, 0x3F	; 63
    523e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5242:	88 23       	and	r24, r24
    5244:	44 f4       	brge	.+16     	; 0x5256 <Robot_voidObstacleAvoidingMode+0x996>
		__ticks = 1;
    5246:	fe 01       	movw	r30, r28
    5248:	e3 55       	subi	r30, 0x53	; 83
    524a:	ff 4f       	sbci	r31, 0xFF	; 255
    524c:	81 e0       	ldi	r24, 0x01	; 1
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	91 83       	std	Z+1, r25	; 0x01
    5252:	80 83       	st	Z, r24
    5254:	64 c0       	rjmp	.+200    	; 0x531e <Robot_voidObstacleAvoidingMode+0xa5e>
	else if (__tmp > 65535)
    5256:	fe 01       	movw	r30, r28
    5258:	e1 55       	subi	r30, 0x51	; 81
    525a:	ff 4f       	sbci	r31, 0xFF	; 255
    525c:	60 81       	ld	r22, Z
    525e:	71 81       	ldd	r23, Z+1	; 0x01
    5260:	82 81       	ldd	r24, Z+2	; 0x02
    5262:	93 81       	ldd	r25, Z+3	; 0x03
    5264:	20 e0       	ldi	r18, 0x00	; 0
    5266:	3f ef       	ldi	r19, 0xFF	; 255
    5268:	4f e7       	ldi	r20, 0x7F	; 127
    526a:	57 e4       	ldi	r21, 0x47	; 71
    526c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5270:	18 16       	cp	r1, r24
    5272:	0c f0       	brlt	.+2      	; 0x5276 <Robot_voidObstacleAvoidingMode+0x9b6>
    5274:	43 c0       	rjmp	.+134    	; 0x52fc <Robot_voidObstacleAvoidingMode+0xa3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5276:	fe 01       	movw	r30, r28
    5278:	ed 54       	subi	r30, 0x4D	; 77
    527a:	ff 4f       	sbci	r31, 0xFF	; 255
    527c:	60 81       	ld	r22, Z
    527e:	71 81       	ldd	r23, Z+1	; 0x01
    5280:	82 81       	ldd	r24, Z+2	; 0x02
    5282:	93 81       	ldd	r25, Z+3	; 0x03
    5284:	20 e0       	ldi	r18, 0x00	; 0
    5286:	30 e0       	ldi	r19, 0x00	; 0
    5288:	40 e2       	ldi	r20, 0x20	; 32
    528a:	51 e4       	ldi	r21, 0x41	; 65
    528c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5290:	dc 01       	movw	r26, r24
    5292:	cb 01       	movw	r24, r22
    5294:	8e 01       	movw	r16, r28
    5296:	03 55       	subi	r16, 0x53	; 83
    5298:	1f 4f       	sbci	r17, 0xFF	; 255
    529a:	bc 01       	movw	r22, r24
    529c:	cd 01       	movw	r24, r26
    529e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a2:	dc 01       	movw	r26, r24
    52a4:	cb 01       	movw	r24, r22
    52a6:	f8 01       	movw	r30, r16
    52a8:	91 83       	std	Z+1, r25	; 0x01
    52aa:	80 83       	st	Z, r24
    52ac:	1f c0       	rjmp	.+62     	; 0x52ec <Robot_voidObstacleAvoidingMode+0xa2c>
    52ae:	fe 01       	movw	r30, r28
    52b0:	e5 55       	subi	r30, 0x55	; 85
    52b2:	ff 4f       	sbci	r31, 0xFF	; 255
    52b4:	88 ec       	ldi	r24, 0xC8	; 200
    52b6:	90 e0       	ldi	r25, 0x00	; 0
    52b8:	91 83       	std	Z+1, r25	; 0x01
    52ba:	80 83       	st	Z, r24
    52bc:	fe 01       	movw	r30, r28
    52be:	e5 55       	subi	r30, 0x55	; 85
    52c0:	ff 4f       	sbci	r31, 0xFF	; 255
    52c2:	80 81       	ld	r24, Z
    52c4:	91 81       	ldd	r25, Z+1	; 0x01
    52c6:	01 97       	sbiw	r24, 0x01	; 1
    52c8:	f1 f7       	brne	.-4      	; 0x52c6 <Robot_voidObstacleAvoidingMode+0xa06>
    52ca:	fe 01       	movw	r30, r28
    52cc:	e5 55       	subi	r30, 0x55	; 85
    52ce:	ff 4f       	sbci	r31, 0xFF	; 255
    52d0:	91 83       	std	Z+1, r25	; 0x01
    52d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52d4:	de 01       	movw	r26, r28
    52d6:	a3 55       	subi	r26, 0x53	; 83
    52d8:	bf 4f       	sbci	r27, 0xFF	; 255
    52da:	fe 01       	movw	r30, r28
    52dc:	e3 55       	subi	r30, 0x53	; 83
    52de:	ff 4f       	sbci	r31, 0xFF	; 255
    52e0:	80 81       	ld	r24, Z
    52e2:	91 81       	ldd	r25, Z+1	; 0x01
    52e4:	01 97       	sbiw	r24, 0x01	; 1
    52e6:	11 96       	adiw	r26, 0x01	; 1
    52e8:	9c 93       	st	X, r25
    52ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52ec:	fe 01       	movw	r30, r28
    52ee:	e3 55       	subi	r30, 0x53	; 83
    52f0:	ff 4f       	sbci	r31, 0xFF	; 255
    52f2:	80 81       	ld	r24, Z
    52f4:	91 81       	ldd	r25, Z+1	; 0x01
    52f6:	00 97       	sbiw	r24, 0x00	; 0
    52f8:	d1 f6       	brne	.-76     	; 0x52ae <Robot_voidObstacleAvoidingMode+0x9ee>
    52fa:	27 c0       	rjmp	.+78     	; 0x534a <Robot_voidObstacleAvoidingMode+0xa8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52fc:	8e 01       	movw	r16, r28
    52fe:	03 55       	subi	r16, 0x53	; 83
    5300:	1f 4f       	sbci	r17, 0xFF	; 255
    5302:	fe 01       	movw	r30, r28
    5304:	e1 55       	subi	r30, 0x51	; 81
    5306:	ff 4f       	sbci	r31, 0xFF	; 255
    5308:	60 81       	ld	r22, Z
    530a:	71 81       	ldd	r23, Z+1	; 0x01
    530c:	82 81       	ldd	r24, Z+2	; 0x02
    530e:	93 81       	ldd	r25, Z+3	; 0x03
    5310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5314:	dc 01       	movw	r26, r24
    5316:	cb 01       	movw	r24, r22
    5318:	f8 01       	movw	r30, r16
    531a:	91 83       	std	Z+1, r25	; 0x01
    531c:	80 83       	st	Z, r24
    531e:	de 01       	movw	r26, r28
    5320:	a7 55       	subi	r26, 0x57	; 87
    5322:	bf 4f       	sbci	r27, 0xFF	; 255
    5324:	fe 01       	movw	r30, r28
    5326:	e3 55       	subi	r30, 0x53	; 83
    5328:	ff 4f       	sbci	r31, 0xFF	; 255
    532a:	80 81       	ld	r24, Z
    532c:	91 81       	ldd	r25, Z+1	; 0x01
    532e:	8d 93       	st	X+, r24
    5330:	9c 93       	st	X, r25
    5332:	fe 01       	movw	r30, r28
    5334:	e7 55       	subi	r30, 0x57	; 87
    5336:	ff 4f       	sbci	r31, 0xFF	; 255
    5338:	80 81       	ld	r24, Z
    533a:	91 81       	ldd	r25, Z+1	; 0x01
    533c:	01 97       	sbiw	r24, 0x01	; 1
    533e:	f1 f7       	brne	.-4      	; 0x533c <Robot_voidObstacleAvoidingMode+0xa7c>
    5340:	fe 01       	movw	r30, r28
    5342:	e7 55       	subi	r30, 0x57	; 87
    5344:	ff 4f       	sbci	r31, 0xFF	; 255
    5346:	91 83       	std	Z+1, r25	; 0x01
    5348:	80 83       	st	Z, r24
			_delay_ms(300);
			BUZZER_voidBuzzer_Work(BUZZER_ON);
    534a:	81 e0       	ldi	r24, 0x01	; 1
    534c:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    5350:	fe 01       	movw	r30, r28
    5352:	eb 55       	subi	r30, 0x5B	; 91
    5354:	ff 4f       	sbci	r31, 0xFF	; 255
    5356:	80 e0       	ldi	r24, 0x00	; 0
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	a8 e4       	ldi	r26, 0x48	; 72
    535c:	b3 e4       	ldi	r27, 0x43	; 67
    535e:	80 83       	st	Z, r24
    5360:	91 83       	std	Z+1, r25	; 0x01
    5362:	a2 83       	std	Z+2, r26	; 0x02
    5364:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5366:	8e 01       	movw	r16, r28
    5368:	0f 55       	subi	r16, 0x5F	; 95
    536a:	1f 4f       	sbci	r17, 0xFF	; 255
    536c:	fe 01       	movw	r30, r28
    536e:	eb 55       	subi	r30, 0x5B	; 91
    5370:	ff 4f       	sbci	r31, 0xFF	; 255
    5372:	60 81       	ld	r22, Z
    5374:	71 81       	ldd	r23, Z+1	; 0x01
    5376:	82 81       	ldd	r24, Z+2	; 0x02
    5378:	93 81       	ldd	r25, Z+3	; 0x03
    537a:	20 e0       	ldi	r18, 0x00	; 0
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	4a ef       	ldi	r20, 0xFA	; 250
    5380:	54 e4       	ldi	r21, 0x44	; 68
    5382:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5386:	dc 01       	movw	r26, r24
    5388:	cb 01       	movw	r24, r22
    538a:	f8 01       	movw	r30, r16
    538c:	80 83       	st	Z, r24
    538e:	91 83       	std	Z+1, r25	; 0x01
    5390:	a2 83       	std	Z+2, r26	; 0x02
    5392:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5394:	fe 01       	movw	r30, r28
    5396:	ef 55       	subi	r30, 0x5F	; 95
    5398:	ff 4f       	sbci	r31, 0xFF	; 255
    539a:	60 81       	ld	r22, Z
    539c:	71 81       	ldd	r23, Z+1	; 0x01
    539e:	82 81       	ldd	r24, Z+2	; 0x02
    53a0:	93 81       	ldd	r25, Z+3	; 0x03
    53a2:	20 e0       	ldi	r18, 0x00	; 0
    53a4:	30 e0       	ldi	r19, 0x00	; 0
    53a6:	40 e8       	ldi	r20, 0x80	; 128
    53a8:	5f e3       	ldi	r21, 0x3F	; 63
    53aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53ae:	88 23       	and	r24, r24
    53b0:	44 f4       	brge	.+16     	; 0x53c2 <Robot_voidObstacleAvoidingMode+0xb02>
		__ticks = 1;
    53b2:	fe 01       	movw	r30, r28
    53b4:	e1 56       	subi	r30, 0x61	; 97
    53b6:	ff 4f       	sbci	r31, 0xFF	; 255
    53b8:	81 e0       	ldi	r24, 0x01	; 1
    53ba:	90 e0       	ldi	r25, 0x00	; 0
    53bc:	91 83       	std	Z+1, r25	; 0x01
    53be:	80 83       	st	Z, r24
    53c0:	64 c0       	rjmp	.+200    	; 0x548a <Robot_voidObstacleAvoidingMode+0xbca>
	else if (__tmp > 65535)
    53c2:	fe 01       	movw	r30, r28
    53c4:	ef 55       	subi	r30, 0x5F	; 95
    53c6:	ff 4f       	sbci	r31, 0xFF	; 255
    53c8:	60 81       	ld	r22, Z
    53ca:	71 81       	ldd	r23, Z+1	; 0x01
    53cc:	82 81       	ldd	r24, Z+2	; 0x02
    53ce:	93 81       	ldd	r25, Z+3	; 0x03
    53d0:	20 e0       	ldi	r18, 0x00	; 0
    53d2:	3f ef       	ldi	r19, 0xFF	; 255
    53d4:	4f e7       	ldi	r20, 0x7F	; 127
    53d6:	57 e4       	ldi	r21, 0x47	; 71
    53d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53dc:	18 16       	cp	r1, r24
    53de:	0c f0       	brlt	.+2      	; 0x53e2 <Robot_voidObstacleAvoidingMode+0xb22>
    53e0:	43 c0       	rjmp	.+134    	; 0x5468 <Robot_voidObstacleAvoidingMode+0xba8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53e2:	fe 01       	movw	r30, r28
    53e4:	eb 55       	subi	r30, 0x5B	; 91
    53e6:	ff 4f       	sbci	r31, 0xFF	; 255
    53e8:	60 81       	ld	r22, Z
    53ea:	71 81       	ldd	r23, Z+1	; 0x01
    53ec:	82 81       	ldd	r24, Z+2	; 0x02
    53ee:	93 81       	ldd	r25, Z+3	; 0x03
    53f0:	20 e0       	ldi	r18, 0x00	; 0
    53f2:	30 e0       	ldi	r19, 0x00	; 0
    53f4:	40 e2       	ldi	r20, 0x20	; 32
    53f6:	51 e4       	ldi	r21, 0x41	; 65
    53f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53fc:	dc 01       	movw	r26, r24
    53fe:	cb 01       	movw	r24, r22
    5400:	8e 01       	movw	r16, r28
    5402:	01 56       	subi	r16, 0x61	; 97
    5404:	1f 4f       	sbci	r17, 0xFF	; 255
    5406:	bc 01       	movw	r22, r24
    5408:	cd 01       	movw	r24, r26
    540a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    540e:	dc 01       	movw	r26, r24
    5410:	cb 01       	movw	r24, r22
    5412:	f8 01       	movw	r30, r16
    5414:	91 83       	std	Z+1, r25	; 0x01
    5416:	80 83       	st	Z, r24
    5418:	1f c0       	rjmp	.+62     	; 0x5458 <Robot_voidObstacleAvoidingMode+0xb98>
    541a:	fe 01       	movw	r30, r28
    541c:	e3 56       	subi	r30, 0x63	; 99
    541e:	ff 4f       	sbci	r31, 0xFF	; 255
    5420:	88 ec       	ldi	r24, 0xC8	; 200
    5422:	90 e0       	ldi	r25, 0x00	; 0
    5424:	91 83       	std	Z+1, r25	; 0x01
    5426:	80 83       	st	Z, r24
    5428:	fe 01       	movw	r30, r28
    542a:	e3 56       	subi	r30, 0x63	; 99
    542c:	ff 4f       	sbci	r31, 0xFF	; 255
    542e:	80 81       	ld	r24, Z
    5430:	91 81       	ldd	r25, Z+1	; 0x01
    5432:	01 97       	sbiw	r24, 0x01	; 1
    5434:	f1 f7       	brne	.-4      	; 0x5432 <Robot_voidObstacleAvoidingMode+0xb72>
    5436:	fe 01       	movw	r30, r28
    5438:	e3 56       	subi	r30, 0x63	; 99
    543a:	ff 4f       	sbci	r31, 0xFF	; 255
    543c:	91 83       	std	Z+1, r25	; 0x01
    543e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5440:	de 01       	movw	r26, r28
    5442:	a1 56       	subi	r26, 0x61	; 97
    5444:	bf 4f       	sbci	r27, 0xFF	; 255
    5446:	fe 01       	movw	r30, r28
    5448:	e1 56       	subi	r30, 0x61	; 97
    544a:	ff 4f       	sbci	r31, 0xFF	; 255
    544c:	80 81       	ld	r24, Z
    544e:	91 81       	ldd	r25, Z+1	; 0x01
    5450:	01 97       	sbiw	r24, 0x01	; 1
    5452:	11 96       	adiw	r26, 0x01	; 1
    5454:	9c 93       	st	X, r25
    5456:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5458:	fe 01       	movw	r30, r28
    545a:	e1 56       	subi	r30, 0x61	; 97
    545c:	ff 4f       	sbci	r31, 0xFF	; 255
    545e:	80 81       	ld	r24, Z
    5460:	91 81       	ldd	r25, Z+1	; 0x01
    5462:	00 97       	sbiw	r24, 0x00	; 0
    5464:	d1 f6       	brne	.-76     	; 0x541a <Robot_voidObstacleAvoidingMode+0xb5a>
    5466:	27 c0       	rjmp	.+78     	; 0x54b6 <Robot_voidObstacleAvoidingMode+0xbf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5468:	8e 01       	movw	r16, r28
    546a:	01 56       	subi	r16, 0x61	; 97
    546c:	1f 4f       	sbci	r17, 0xFF	; 255
    546e:	fe 01       	movw	r30, r28
    5470:	ef 55       	subi	r30, 0x5F	; 95
    5472:	ff 4f       	sbci	r31, 0xFF	; 255
    5474:	60 81       	ld	r22, Z
    5476:	71 81       	ldd	r23, Z+1	; 0x01
    5478:	82 81       	ldd	r24, Z+2	; 0x02
    547a:	93 81       	ldd	r25, Z+3	; 0x03
    547c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5480:	dc 01       	movw	r26, r24
    5482:	cb 01       	movw	r24, r22
    5484:	f8 01       	movw	r30, r16
    5486:	91 83       	std	Z+1, r25	; 0x01
    5488:	80 83       	st	Z, r24
    548a:	de 01       	movw	r26, r28
    548c:	a5 56       	subi	r26, 0x65	; 101
    548e:	bf 4f       	sbci	r27, 0xFF	; 255
    5490:	fe 01       	movw	r30, r28
    5492:	e1 56       	subi	r30, 0x61	; 97
    5494:	ff 4f       	sbci	r31, 0xFF	; 255
    5496:	80 81       	ld	r24, Z
    5498:	91 81       	ldd	r25, Z+1	; 0x01
    549a:	8d 93       	st	X+, r24
    549c:	9c 93       	st	X, r25
    549e:	fe 01       	movw	r30, r28
    54a0:	e5 56       	subi	r30, 0x65	; 101
    54a2:	ff 4f       	sbci	r31, 0xFF	; 255
    54a4:	80 81       	ld	r24, Z
    54a6:	91 81       	ldd	r25, Z+1	; 0x01
    54a8:	01 97       	sbiw	r24, 0x01	; 1
    54aa:	f1 f7       	brne	.-4      	; 0x54a8 <Robot_voidObstacleAvoidingMode+0xbe8>
    54ac:	fe 01       	movw	r30, r28
    54ae:	e5 56       	subi	r30, 0x65	; 101
    54b0:	ff 4f       	sbci	r31, 0xFF	; 255
    54b2:	91 83       	std	Z+1, r25	; 0x01
    54b4:	80 83       	st	Z, r24
			_delay_ms(200);
			BUZZER_voidBuzzer_Work(BUZZER_OFF);
    54b6:	80 e0       	ldi	r24, 0x00	; 0
    54b8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
			Local_u16LeftObject = ULTRASONIC_u16GetDistance();
    54bc:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <ULTRASONIC_u16GetDistance>
    54c0:	fe 01       	movw	r30, r28
    54c2:	e1 5f       	subi	r30, 0xF1	; 241
    54c4:	fe 4f       	sbci	r31, 0xFE	; 254
    54c6:	91 83       	std	Z+1, r25	; 0x01
    54c8:	80 83       	st	Z, r24
    54ca:	fe 01       	movw	r30, r28
    54cc:	e9 56       	subi	r30, 0x69	; 105
    54ce:	ff 4f       	sbci	r31, 0xFF	; 255
    54d0:	80 e0       	ldi	r24, 0x00	; 0
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	a6 e9       	ldi	r26, 0x96	; 150
    54d6:	b3 e4       	ldi	r27, 0x43	; 67
    54d8:	80 83       	st	Z, r24
    54da:	91 83       	std	Z+1, r25	; 0x01
    54dc:	a2 83       	std	Z+2, r26	; 0x02
    54de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54e0:	8e 01       	movw	r16, r28
    54e2:	0d 56       	subi	r16, 0x6D	; 109
    54e4:	1f 4f       	sbci	r17, 0xFF	; 255
    54e6:	fe 01       	movw	r30, r28
    54e8:	e9 56       	subi	r30, 0x69	; 105
    54ea:	ff 4f       	sbci	r31, 0xFF	; 255
    54ec:	60 81       	ld	r22, Z
    54ee:	71 81       	ldd	r23, Z+1	; 0x01
    54f0:	82 81       	ldd	r24, Z+2	; 0x02
    54f2:	93 81       	ldd	r25, Z+3	; 0x03
    54f4:	20 e0       	ldi	r18, 0x00	; 0
    54f6:	30 e0       	ldi	r19, 0x00	; 0
    54f8:	4a ef       	ldi	r20, 0xFA	; 250
    54fa:	54 e4       	ldi	r21, 0x44	; 68
    54fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5500:	dc 01       	movw	r26, r24
    5502:	cb 01       	movw	r24, r22
    5504:	f8 01       	movw	r30, r16
    5506:	80 83       	st	Z, r24
    5508:	91 83       	std	Z+1, r25	; 0x01
    550a:	a2 83       	std	Z+2, r26	; 0x02
    550c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    550e:	fe 01       	movw	r30, r28
    5510:	ed 56       	subi	r30, 0x6D	; 109
    5512:	ff 4f       	sbci	r31, 0xFF	; 255
    5514:	60 81       	ld	r22, Z
    5516:	71 81       	ldd	r23, Z+1	; 0x01
    5518:	82 81       	ldd	r24, Z+2	; 0x02
    551a:	93 81       	ldd	r25, Z+3	; 0x03
    551c:	20 e0       	ldi	r18, 0x00	; 0
    551e:	30 e0       	ldi	r19, 0x00	; 0
    5520:	40 e8       	ldi	r20, 0x80	; 128
    5522:	5f e3       	ldi	r21, 0x3F	; 63
    5524:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5528:	88 23       	and	r24, r24
    552a:	44 f4       	brge	.+16     	; 0x553c <Robot_voidObstacleAvoidingMode+0xc7c>
		__ticks = 1;
    552c:	fe 01       	movw	r30, r28
    552e:	ef 56       	subi	r30, 0x6F	; 111
    5530:	ff 4f       	sbci	r31, 0xFF	; 255
    5532:	81 e0       	ldi	r24, 0x01	; 1
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	91 83       	std	Z+1, r25	; 0x01
    5538:	80 83       	st	Z, r24
    553a:	64 c0       	rjmp	.+200    	; 0x5604 <Robot_voidObstacleAvoidingMode+0xd44>
	else if (__tmp > 65535)
    553c:	fe 01       	movw	r30, r28
    553e:	ed 56       	subi	r30, 0x6D	; 109
    5540:	ff 4f       	sbci	r31, 0xFF	; 255
    5542:	60 81       	ld	r22, Z
    5544:	71 81       	ldd	r23, Z+1	; 0x01
    5546:	82 81       	ldd	r24, Z+2	; 0x02
    5548:	93 81       	ldd	r25, Z+3	; 0x03
    554a:	20 e0       	ldi	r18, 0x00	; 0
    554c:	3f ef       	ldi	r19, 0xFF	; 255
    554e:	4f e7       	ldi	r20, 0x7F	; 127
    5550:	57 e4       	ldi	r21, 0x47	; 71
    5552:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5556:	18 16       	cp	r1, r24
    5558:	0c f0       	brlt	.+2      	; 0x555c <Robot_voidObstacleAvoidingMode+0xc9c>
    555a:	43 c0       	rjmp	.+134    	; 0x55e2 <Robot_voidObstacleAvoidingMode+0xd22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    555c:	fe 01       	movw	r30, r28
    555e:	e9 56       	subi	r30, 0x69	; 105
    5560:	ff 4f       	sbci	r31, 0xFF	; 255
    5562:	60 81       	ld	r22, Z
    5564:	71 81       	ldd	r23, Z+1	; 0x01
    5566:	82 81       	ldd	r24, Z+2	; 0x02
    5568:	93 81       	ldd	r25, Z+3	; 0x03
    556a:	20 e0       	ldi	r18, 0x00	; 0
    556c:	30 e0       	ldi	r19, 0x00	; 0
    556e:	40 e2       	ldi	r20, 0x20	; 32
    5570:	51 e4       	ldi	r21, 0x41	; 65
    5572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5576:	dc 01       	movw	r26, r24
    5578:	cb 01       	movw	r24, r22
    557a:	8e 01       	movw	r16, r28
    557c:	0f 56       	subi	r16, 0x6F	; 111
    557e:	1f 4f       	sbci	r17, 0xFF	; 255
    5580:	bc 01       	movw	r22, r24
    5582:	cd 01       	movw	r24, r26
    5584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5588:	dc 01       	movw	r26, r24
    558a:	cb 01       	movw	r24, r22
    558c:	f8 01       	movw	r30, r16
    558e:	91 83       	std	Z+1, r25	; 0x01
    5590:	80 83       	st	Z, r24
    5592:	1f c0       	rjmp	.+62     	; 0x55d2 <Robot_voidObstacleAvoidingMode+0xd12>
    5594:	fe 01       	movw	r30, r28
    5596:	e1 57       	subi	r30, 0x71	; 113
    5598:	ff 4f       	sbci	r31, 0xFF	; 255
    559a:	88 ec       	ldi	r24, 0xC8	; 200
    559c:	90 e0       	ldi	r25, 0x00	; 0
    559e:	91 83       	std	Z+1, r25	; 0x01
    55a0:	80 83       	st	Z, r24
    55a2:	fe 01       	movw	r30, r28
    55a4:	e1 57       	subi	r30, 0x71	; 113
    55a6:	ff 4f       	sbci	r31, 0xFF	; 255
    55a8:	80 81       	ld	r24, Z
    55aa:	91 81       	ldd	r25, Z+1	; 0x01
    55ac:	01 97       	sbiw	r24, 0x01	; 1
    55ae:	f1 f7       	brne	.-4      	; 0x55ac <Robot_voidObstacleAvoidingMode+0xcec>
    55b0:	fe 01       	movw	r30, r28
    55b2:	e1 57       	subi	r30, 0x71	; 113
    55b4:	ff 4f       	sbci	r31, 0xFF	; 255
    55b6:	91 83       	std	Z+1, r25	; 0x01
    55b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ba:	de 01       	movw	r26, r28
    55bc:	af 56       	subi	r26, 0x6F	; 111
    55be:	bf 4f       	sbci	r27, 0xFF	; 255
    55c0:	fe 01       	movw	r30, r28
    55c2:	ef 56       	subi	r30, 0x6F	; 111
    55c4:	ff 4f       	sbci	r31, 0xFF	; 255
    55c6:	80 81       	ld	r24, Z
    55c8:	91 81       	ldd	r25, Z+1	; 0x01
    55ca:	01 97       	sbiw	r24, 0x01	; 1
    55cc:	11 96       	adiw	r26, 0x01	; 1
    55ce:	9c 93       	st	X, r25
    55d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55d2:	fe 01       	movw	r30, r28
    55d4:	ef 56       	subi	r30, 0x6F	; 111
    55d6:	ff 4f       	sbci	r31, 0xFF	; 255
    55d8:	80 81       	ld	r24, Z
    55da:	91 81       	ldd	r25, Z+1	; 0x01
    55dc:	00 97       	sbiw	r24, 0x00	; 0
    55de:	d1 f6       	brne	.-76     	; 0x5594 <Robot_voidObstacleAvoidingMode+0xcd4>
    55e0:	27 c0       	rjmp	.+78     	; 0x5630 <Robot_voidObstacleAvoidingMode+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55e2:	8e 01       	movw	r16, r28
    55e4:	0f 56       	subi	r16, 0x6F	; 111
    55e6:	1f 4f       	sbci	r17, 0xFF	; 255
    55e8:	fe 01       	movw	r30, r28
    55ea:	ed 56       	subi	r30, 0x6D	; 109
    55ec:	ff 4f       	sbci	r31, 0xFF	; 255
    55ee:	60 81       	ld	r22, Z
    55f0:	71 81       	ldd	r23, Z+1	; 0x01
    55f2:	82 81       	ldd	r24, Z+2	; 0x02
    55f4:	93 81       	ldd	r25, Z+3	; 0x03
    55f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55fa:	dc 01       	movw	r26, r24
    55fc:	cb 01       	movw	r24, r22
    55fe:	f8 01       	movw	r30, r16
    5600:	91 83       	std	Z+1, r25	; 0x01
    5602:	80 83       	st	Z, r24
    5604:	de 01       	movw	r26, r28
    5606:	a3 57       	subi	r26, 0x73	; 115
    5608:	bf 4f       	sbci	r27, 0xFF	; 255
    560a:	fe 01       	movw	r30, r28
    560c:	ef 56       	subi	r30, 0x6F	; 111
    560e:	ff 4f       	sbci	r31, 0xFF	; 255
    5610:	80 81       	ld	r24, Z
    5612:	91 81       	ldd	r25, Z+1	; 0x01
    5614:	8d 93       	st	X+, r24
    5616:	9c 93       	st	X, r25
    5618:	fe 01       	movw	r30, r28
    561a:	e3 57       	subi	r30, 0x73	; 115
    561c:	ff 4f       	sbci	r31, 0xFF	; 255
    561e:	80 81       	ld	r24, Z
    5620:	91 81       	ldd	r25, Z+1	; 0x01
    5622:	01 97       	sbiw	r24, 0x01	; 1
    5624:	f1 f7       	brne	.-4      	; 0x5622 <Robot_voidObstacleAvoidingMode+0xd62>
    5626:	fe 01       	movw	r30, r28
    5628:	e3 57       	subi	r30, 0x73	; 115
    562a:	ff 4f       	sbci	r31, 0xFF	; 255
    562c:	91 83       	std	Z+1, r25	; 0x01
    562e:	80 83       	st	Z, r24
			_delay_ms(300);
			/* Servo turn to Right (0) then read distance*/
			BUZZER_voidBuzzer_Work(BUZZER_ON);
    5630:	81 e0       	ldi	r24, 0x01	; 1
    5632:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    5636:	fe 01       	movw	r30, r28
    5638:	e7 57       	subi	r30, 0x77	; 119
    563a:	ff 4f       	sbci	r31, 0xFF	; 255
    563c:	80 e0       	ldi	r24, 0x00	; 0
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	a8 e4       	ldi	r26, 0x48	; 72
    5642:	b3 e4       	ldi	r27, 0x43	; 67
    5644:	80 83       	st	Z, r24
    5646:	91 83       	std	Z+1, r25	; 0x01
    5648:	a2 83       	std	Z+2, r26	; 0x02
    564a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    564c:	8e 01       	movw	r16, r28
    564e:	0b 57       	subi	r16, 0x7B	; 123
    5650:	1f 4f       	sbci	r17, 0xFF	; 255
    5652:	fe 01       	movw	r30, r28
    5654:	e7 57       	subi	r30, 0x77	; 119
    5656:	ff 4f       	sbci	r31, 0xFF	; 255
    5658:	60 81       	ld	r22, Z
    565a:	71 81       	ldd	r23, Z+1	; 0x01
    565c:	82 81       	ldd	r24, Z+2	; 0x02
    565e:	93 81       	ldd	r25, Z+3	; 0x03
    5660:	20 e0       	ldi	r18, 0x00	; 0
    5662:	30 e0       	ldi	r19, 0x00	; 0
    5664:	4a ef       	ldi	r20, 0xFA	; 250
    5666:	54 e4       	ldi	r21, 0x44	; 68
    5668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    566c:	dc 01       	movw	r26, r24
    566e:	cb 01       	movw	r24, r22
    5670:	f8 01       	movw	r30, r16
    5672:	80 83       	st	Z, r24
    5674:	91 83       	std	Z+1, r25	; 0x01
    5676:	a2 83       	std	Z+2, r26	; 0x02
    5678:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    567a:	fe 01       	movw	r30, r28
    567c:	eb 57       	subi	r30, 0x7B	; 123
    567e:	ff 4f       	sbci	r31, 0xFF	; 255
    5680:	60 81       	ld	r22, Z
    5682:	71 81       	ldd	r23, Z+1	; 0x01
    5684:	82 81       	ldd	r24, Z+2	; 0x02
    5686:	93 81       	ldd	r25, Z+3	; 0x03
    5688:	20 e0       	ldi	r18, 0x00	; 0
    568a:	30 e0       	ldi	r19, 0x00	; 0
    568c:	40 e8       	ldi	r20, 0x80	; 128
    568e:	5f e3       	ldi	r21, 0x3F	; 63
    5690:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5694:	88 23       	and	r24, r24
    5696:	44 f4       	brge	.+16     	; 0x56a8 <Robot_voidObstacleAvoidingMode+0xde8>
		__ticks = 1;
    5698:	fe 01       	movw	r30, r28
    569a:	ed 57       	subi	r30, 0x7D	; 125
    569c:	ff 4f       	sbci	r31, 0xFF	; 255
    569e:	81 e0       	ldi	r24, 0x01	; 1
    56a0:	90 e0       	ldi	r25, 0x00	; 0
    56a2:	91 83       	std	Z+1, r25	; 0x01
    56a4:	80 83       	st	Z, r24
    56a6:	64 c0       	rjmp	.+200    	; 0x5770 <Robot_voidObstacleAvoidingMode+0xeb0>
	else if (__tmp > 65535)
    56a8:	fe 01       	movw	r30, r28
    56aa:	eb 57       	subi	r30, 0x7B	; 123
    56ac:	ff 4f       	sbci	r31, 0xFF	; 255
    56ae:	60 81       	ld	r22, Z
    56b0:	71 81       	ldd	r23, Z+1	; 0x01
    56b2:	82 81       	ldd	r24, Z+2	; 0x02
    56b4:	93 81       	ldd	r25, Z+3	; 0x03
    56b6:	20 e0       	ldi	r18, 0x00	; 0
    56b8:	3f ef       	ldi	r19, 0xFF	; 255
    56ba:	4f e7       	ldi	r20, 0x7F	; 127
    56bc:	57 e4       	ldi	r21, 0x47	; 71
    56be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56c2:	18 16       	cp	r1, r24
    56c4:	0c f0       	brlt	.+2      	; 0x56c8 <Robot_voidObstacleAvoidingMode+0xe08>
    56c6:	43 c0       	rjmp	.+134    	; 0x574e <Robot_voidObstacleAvoidingMode+0xe8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56c8:	fe 01       	movw	r30, r28
    56ca:	e7 57       	subi	r30, 0x77	; 119
    56cc:	ff 4f       	sbci	r31, 0xFF	; 255
    56ce:	60 81       	ld	r22, Z
    56d0:	71 81       	ldd	r23, Z+1	; 0x01
    56d2:	82 81       	ldd	r24, Z+2	; 0x02
    56d4:	93 81       	ldd	r25, Z+3	; 0x03
    56d6:	20 e0       	ldi	r18, 0x00	; 0
    56d8:	30 e0       	ldi	r19, 0x00	; 0
    56da:	40 e2       	ldi	r20, 0x20	; 32
    56dc:	51 e4       	ldi	r21, 0x41	; 65
    56de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56e2:	dc 01       	movw	r26, r24
    56e4:	cb 01       	movw	r24, r22
    56e6:	8e 01       	movw	r16, r28
    56e8:	0d 57       	subi	r16, 0x7D	; 125
    56ea:	1f 4f       	sbci	r17, 0xFF	; 255
    56ec:	bc 01       	movw	r22, r24
    56ee:	cd 01       	movw	r24, r26
    56f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56f4:	dc 01       	movw	r26, r24
    56f6:	cb 01       	movw	r24, r22
    56f8:	f8 01       	movw	r30, r16
    56fa:	91 83       	std	Z+1, r25	; 0x01
    56fc:	80 83       	st	Z, r24
    56fe:	1f c0       	rjmp	.+62     	; 0x573e <Robot_voidObstacleAvoidingMode+0xe7e>
    5700:	fe 01       	movw	r30, r28
    5702:	ef 57       	subi	r30, 0x7F	; 127
    5704:	ff 4f       	sbci	r31, 0xFF	; 255
    5706:	88 ec       	ldi	r24, 0xC8	; 200
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	91 83       	std	Z+1, r25	; 0x01
    570c:	80 83       	st	Z, r24
    570e:	fe 01       	movw	r30, r28
    5710:	ef 57       	subi	r30, 0x7F	; 127
    5712:	ff 4f       	sbci	r31, 0xFF	; 255
    5714:	80 81       	ld	r24, Z
    5716:	91 81       	ldd	r25, Z+1	; 0x01
    5718:	01 97       	sbiw	r24, 0x01	; 1
    571a:	f1 f7       	brne	.-4      	; 0x5718 <Robot_voidObstacleAvoidingMode+0xe58>
    571c:	fe 01       	movw	r30, r28
    571e:	ef 57       	subi	r30, 0x7F	; 127
    5720:	ff 4f       	sbci	r31, 0xFF	; 255
    5722:	91 83       	std	Z+1, r25	; 0x01
    5724:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5726:	de 01       	movw	r26, r28
    5728:	ad 57       	subi	r26, 0x7D	; 125
    572a:	bf 4f       	sbci	r27, 0xFF	; 255
    572c:	fe 01       	movw	r30, r28
    572e:	ed 57       	subi	r30, 0x7D	; 125
    5730:	ff 4f       	sbci	r31, 0xFF	; 255
    5732:	80 81       	ld	r24, Z
    5734:	91 81       	ldd	r25, Z+1	; 0x01
    5736:	01 97       	sbiw	r24, 0x01	; 1
    5738:	11 96       	adiw	r26, 0x01	; 1
    573a:	9c 93       	st	X, r25
    573c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    573e:	fe 01       	movw	r30, r28
    5740:	ed 57       	subi	r30, 0x7D	; 125
    5742:	ff 4f       	sbci	r31, 0xFF	; 255
    5744:	80 81       	ld	r24, Z
    5746:	91 81       	ldd	r25, Z+1	; 0x01
    5748:	00 97       	sbiw	r24, 0x00	; 0
    574a:	d1 f6       	brne	.-76     	; 0x5700 <Robot_voidObstacleAvoidingMode+0xe40>
    574c:	27 c0       	rjmp	.+78     	; 0x579c <Robot_voidObstacleAvoidingMode+0xedc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    574e:	8e 01       	movw	r16, r28
    5750:	0d 57       	subi	r16, 0x7D	; 125
    5752:	1f 4f       	sbci	r17, 0xFF	; 255
    5754:	fe 01       	movw	r30, r28
    5756:	eb 57       	subi	r30, 0x7B	; 123
    5758:	ff 4f       	sbci	r31, 0xFF	; 255
    575a:	60 81       	ld	r22, Z
    575c:	71 81       	ldd	r23, Z+1	; 0x01
    575e:	82 81       	ldd	r24, Z+2	; 0x02
    5760:	93 81       	ldd	r25, Z+3	; 0x03
    5762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5766:	dc 01       	movw	r26, r24
    5768:	cb 01       	movw	r24, r22
    576a:	f8 01       	movw	r30, r16
    576c:	91 83       	std	Z+1, r25	; 0x01
    576e:	80 83       	st	Z, r24
    5770:	de 01       	movw	r26, r28
    5772:	a1 58       	subi	r26, 0x81	; 129
    5774:	bf 4f       	sbci	r27, 0xFF	; 255
    5776:	fe 01       	movw	r30, r28
    5778:	ed 57       	subi	r30, 0x7D	; 125
    577a:	ff 4f       	sbci	r31, 0xFF	; 255
    577c:	80 81       	ld	r24, Z
    577e:	91 81       	ldd	r25, Z+1	; 0x01
    5780:	8d 93       	st	X+, r24
    5782:	9c 93       	st	X, r25
    5784:	fe 01       	movw	r30, r28
    5786:	e1 58       	subi	r30, 0x81	; 129
    5788:	ff 4f       	sbci	r31, 0xFF	; 255
    578a:	80 81       	ld	r24, Z
    578c:	91 81       	ldd	r25, Z+1	; 0x01
    578e:	01 97       	sbiw	r24, 0x01	; 1
    5790:	f1 f7       	brne	.-4      	; 0x578e <Robot_voidObstacleAvoidingMode+0xece>
    5792:	fe 01       	movw	r30, r28
    5794:	e1 58       	subi	r30, 0x81	; 129
    5796:	ff 4f       	sbci	r31, 0xFF	; 255
    5798:	91 83       	std	Z+1, r25	; 0x01
    579a:	80 83       	st	Z, r24
			_delay_ms(200);
			BUZZER_voidBuzzer_Work(BUZZER_OFF);
    579c:	80 e0       	ldi	r24, 0x00	; 0
    579e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
			SERVO_voidTimer1ServoSetAngleOCR1B(0);
    57a2:	60 e0       	ldi	r22, 0x00	; 0
    57a4:	70 e0       	ldi	r23, 0x00	; 0
    57a6:	80 e0       	ldi	r24, 0x00	; 0
    57a8:	90 e0       	ldi	r25, 0x00	; 0
    57aa:	0e 94 6f 16 	call	0x2cde	; 0x2cde <SERVO_voidTimer1ServoSetAngleOCR1B>
    57ae:	fe 01       	movw	r30, r28
    57b0:	e5 58       	subi	r30, 0x85	; 133
    57b2:	ff 4f       	sbci	r31, 0xFF	; 255
    57b4:	80 e0       	ldi	r24, 0x00	; 0
    57b6:	90 e0       	ldi	r25, 0x00	; 0
    57b8:	a6 e9       	ldi	r26, 0x96	; 150
    57ba:	b3 e4       	ldi	r27, 0x43	; 67
    57bc:	80 83       	st	Z, r24
    57be:	91 83       	std	Z+1, r25	; 0x01
    57c0:	a2 83       	std	Z+2, r26	; 0x02
    57c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57c4:	8e 01       	movw	r16, r28
    57c6:	09 58       	subi	r16, 0x89	; 137
    57c8:	1f 4f       	sbci	r17, 0xFF	; 255
    57ca:	fe 01       	movw	r30, r28
    57cc:	e5 58       	subi	r30, 0x85	; 133
    57ce:	ff 4f       	sbci	r31, 0xFF	; 255
    57d0:	60 81       	ld	r22, Z
    57d2:	71 81       	ldd	r23, Z+1	; 0x01
    57d4:	82 81       	ldd	r24, Z+2	; 0x02
    57d6:	93 81       	ldd	r25, Z+3	; 0x03
    57d8:	20 e0       	ldi	r18, 0x00	; 0
    57da:	30 e0       	ldi	r19, 0x00	; 0
    57dc:	4a ef       	ldi	r20, 0xFA	; 250
    57de:	54 e4       	ldi	r21, 0x44	; 68
    57e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57e4:	dc 01       	movw	r26, r24
    57e6:	cb 01       	movw	r24, r22
    57e8:	f8 01       	movw	r30, r16
    57ea:	80 83       	st	Z, r24
    57ec:	91 83       	std	Z+1, r25	; 0x01
    57ee:	a2 83       	std	Z+2, r26	; 0x02
    57f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    57f2:	fe 01       	movw	r30, r28
    57f4:	e9 58       	subi	r30, 0x89	; 137
    57f6:	ff 4f       	sbci	r31, 0xFF	; 255
    57f8:	60 81       	ld	r22, Z
    57fa:	71 81       	ldd	r23, Z+1	; 0x01
    57fc:	82 81       	ldd	r24, Z+2	; 0x02
    57fe:	93 81       	ldd	r25, Z+3	; 0x03
    5800:	20 e0       	ldi	r18, 0x00	; 0
    5802:	30 e0       	ldi	r19, 0x00	; 0
    5804:	40 e8       	ldi	r20, 0x80	; 128
    5806:	5f e3       	ldi	r21, 0x3F	; 63
    5808:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    580c:	88 23       	and	r24, r24
    580e:	44 f4       	brge	.+16     	; 0x5820 <Robot_voidObstacleAvoidingMode+0xf60>
		__ticks = 1;
    5810:	fe 01       	movw	r30, r28
    5812:	eb 58       	subi	r30, 0x8B	; 139
    5814:	ff 4f       	sbci	r31, 0xFF	; 255
    5816:	81 e0       	ldi	r24, 0x01	; 1
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	91 83       	std	Z+1, r25	; 0x01
    581c:	80 83       	st	Z, r24
    581e:	64 c0       	rjmp	.+200    	; 0x58e8 <Robot_voidObstacleAvoidingMode+0x1028>
	else if (__tmp > 65535)
    5820:	fe 01       	movw	r30, r28
    5822:	e9 58       	subi	r30, 0x89	; 137
    5824:	ff 4f       	sbci	r31, 0xFF	; 255
    5826:	60 81       	ld	r22, Z
    5828:	71 81       	ldd	r23, Z+1	; 0x01
    582a:	82 81       	ldd	r24, Z+2	; 0x02
    582c:	93 81       	ldd	r25, Z+3	; 0x03
    582e:	20 e0       	ldi	r18, 0x00	; 0
    5830:	3f ef       	ldi	r19, 0xFF	; 255
    5832:	4f e7       	ldi	r20, 0x7F	; 127
    5834:	57 e4       	ldi	r21, 0x47	; 71
    5836:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    583a:	18 16       	cp	r1, r24
    583c:	0c f0       	brlt	.+2      	; 0x5840 <Robot_voidObstacleAvoidingMode+0xf80>
    583e:	43 c0       	rjmp	.+134    	; 0x58c6 <Robot_voidObstacleAvoidingMode+0x1006>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5840:	fe 01       	movw	r30, r28
    5842:	e5 58       	subi	r30, 0x85	; 133
    5844:	ff 4f       	sbci	r31, 0xFF	; 255
    5846:	60 81       	ld	r22, Z
    5848:	71 81       	ldd	r23, Z+1	; 0x01
    584a:	82 81       	ldd	r24, Z+2	; 0x02
    584c:	93 81       	ldd	r25, Z+3	; 0x03
    584e:	20 e0       	ldi	r18, 0x00	; 0
    5850:	30 e0       	ldi	r19, 0x00	; 0
    5852:	40 e2       	ldi	r20, 0x20	; 32
    5854:	51 e4       	ldi	r21, 0x41	; 65
    5856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    585a:	dc 01       	movw	r26, r24
    585c:	cb 01       	movw	r24, r22
    585e:	8e 01       	movw	r16, r28
    5860:	0b 58       	subi	r16, 0x8B	; 139
    5862:	1f 4f       	sbci	r17, 0xFF	; 255
    5864:	bc 01       	movw	r22, r24
    5866:	cd 01       	movw	r24, r26
    5868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    586c:	dc 01       	movw	r26, r24
    586e:	cb 01       	movw	r24, r22
    5870:	f8 01       	movw	r30, r16
    5872:	91 83       	std	Z+1, r25	; 0x01
    5874:	80 83       	st	Z, r24
    5876:	1f c0       	rjmp	.+62     	; 0x58b6 <Robot_voidObstacleAvoidingMode+0xff6>
    5878:	fe 01       	movw	r30, r28
    587a:	ed 58       	subi	r30, 0x8D	; 141
    587c:	ff 4f       	sbci	r31, 0xFF	; 255
    587e:	88 ec       	ldi	r24, 0xC8	; 200
    5880:	90 e0       	ldi	r25, 0x00	; 0
    5882:	91 83       	std	Z+1, r25	; 0x01
    5884:	80 83       	st	Z, r24
    5886:	fe 01       	movw	r30, r28
    5888:	ed 58       	subi	r30, 0x8D	; 141
    588a:	ff 4f       	sbci	r31, 0xFF	; 255
    588c:	80 81       	ld	r24, Z
    588e:	91 81       	ldd	r25, Z+1	; 0x01
    5890:	01 97       	sbiw	r24, 0x01	; 1
    5892:	f1 f7       	brne	.-4      	; 0x5890 <Robot_voidObstacleAvoidingMode+0xfd0>
    5894:	fe 01       	movw	r30, r28
    5896:	ed 58       	subi	r30, 0x8D	; 141
    5898:	ff 4f       	sbci	r31, 0xFF	; 255
    589a:	91 83       	std	Z+1, r25	; 0x01
    589c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    589e:	de 01       	movw	r26, r28
    58a0:	ab 58       	subi	r26, 0x8B	; 139
    58a2:	bf 4f       	sbci	r27, 0xFF	; 255
    58a4:	fe 01       	movw	r30, r28
    58a6:	eb 58       	subi	r30, 0x8B	; 139
    58a8:	ff 4f       	sbci	r31, 0xFF	; 255
    58aa:	80 81       	ld	r24, Z
    58ac:	91 81       	ldd	r25, Z+1	; 0x01
    58ae:	01 97       	sbiw	r24, 0x01	; 1
    58b0:	11 96       	adiw	r26, 0x01	; 1
    58b2:	9c 93       	st	X, r25
    58b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58b6:	fe 01       	movw	r30, r28
    58b8:	eb 58       	subi	r30, 0x8B	; 139
    58ba:	ff 4f       	sbci	r31, 0xFF	; 255
    58bc:	80 81       	ld	r24, Z
    58be:	91 81       	ldd	r25, Z+1	; 0x01
    58c0:	00 97       	sbiw	r24, 0x00	; 0
    58c2:	d1 f6       	brne	.-76     	; 0x5878 <Robot_voidObstacleAvoidingMode+0xfb8>
    58c4:	27 c0       	rjmp	.+78     	; 0x5914 <Robot_voidObstacleAvoidingMode+0x1054>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58c6:	8e 01       	movw	r16, r28
    58c8:	0b 58       	subi	r16, 0x8B	; 139
    58ca:	1f 4f       	sbci	r17, 0xFF	; 255
    58cc:	fe 01       	movw	r30, r28
    58ce:	e9 58       	subi	r30, 0x89	; 137
    58d0:	ff 4f       	sbci	r31, 0xFF	; 255
    58d2:	60 81       	ld	r22, Z
    58d4:	71 81       	ldd	r23, Z+1	; 0x01
    58d6:	82 81       	ldd	r24, Z+2	; 0x02
    58d8:	93 81       	ldd	r25, Z+3	; 0x03
    58da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58de:	dc 01       	movw	r26, r24
    58e0:	cb 01       	movw	r24, r22
    58e2:	f8 01       	movw	r30, r16
    58e4:	91 83       	std	Z+1, r25	; 0x01
    58e6:	80 83       	st	Z, r24
    58e8:	de 01       	movw	r26, r28
    58ea:	af 58       	subi	r26, 0x8F	; 143
    58ec:	bf 4f       	sbci	r27, 0xFF	; 255
    58ee:	fe 01       	movw	r30, r28
    58f0:	eb 58       	subi	r30, 0x8B	; 139
    58f2:	ff 4f       	sbci	r31, 0xFF	; 255
    58f4:	80 81       	ld	r24, Z
    58f6:	91 81       	ldd	r25, Z+1	; 0x01
    58f8:	8d 93       	st	X+, r24
    58fa:	9c 93       	st	X, r25
    58fc:	fe 01       	movw	r30, r28
    58fe:	ef 58       	subi	r30, 0x8F	; 143
    5900:	ff 4f       	sbci	r31, 0xFF	; 255
    5902:	80 81       	ld	r24, Z
    5904:	91 81       	ldd	r25, Z+1	; 0x01
    5906:	01 97       	sbiw	r24, 0x01	; 1
    5908:	f1 f7       	brne	.-4      	; 0x5906 <Robot_voidObstacleAvoidingMode+0x1046>
    590a:	fe 01       	movw	r30, r28
    590c:	ef 58       	subi	r30, 0x8F	; 143
    590e:	ff 4f       	sbci	r31, 0xFF	; 255
    5910:	91 83       	std	Z+1, r25	; 0x01
    5912:	80 83       	st	Z, r24
			_delay_ms(300);
			Local_u16RightObject = ULTRASONIC_u16GetDistance();
    5914:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <ULTRASONIC_u16GetDistance>
    5918:	fe 01       	movw	r30, r28
    591a:	e3 5f       	subi	r30, 0xF3	; 243
    591c:	fe 4f       	sbci	r31, 0xFE	; 254
    591e:	91 83       	std	Z+1, r25	; 0x01
    5920:	80 83       	st	Z, r24
			BUZZER_voidBuzzer_Work(BUZZER_ON);
    5922:	81 e0       	ldi	r24, 0x01	; 1
    5924:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    5928:	fe 01       	movw	r30, r28
    592a:	e3 59       	subi	r30, 0x93	; 147
    592c:	ff 4f       	sbci	r31, 0xFF	; 255
    592e:	80 e0       	ldi	r24, 0x00	; 0
    5930:	90 e0       	ldi	r25, 0x00	; 0
    5932:	a8 e4       	ldi	r26, 0x48	; 72
    5934:	b3 e4       	ldi	r27, 0x43	; 67
    5936:	80 83       	st	Z, r24
    5938:	91 83       	std	Z+1, r25	; 0x01
    593a:	a2 83       	std	Z+2, r26	; 0x02
    593c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    593e:	8e 01       	movw	r16, r28
    5940:	07 59       	subi	r16, 0x97	; 151
    5942:	1f 4f       	sbci	r17, 0xFF	; 255
    5944:	fe 01       	movw	r30, r28
    5946:	e3 59       	subi	r30, 0x93	; 147
    5948:	ff 4f       	sbci	r31, 0xFF	; 255
    594a:	60 81       	ld	r22, Z
    594c:	71 81       	ldd	r23, Z+1	; 0x01
    594e:	82 81       	ldd	r24, Z+2	; 0x02
    5950:	93 81       	ldd	r25, Z+3	; 0x03
    5952:	20 e0       	ldi	r18, 0x00	; 0
    5954:	30 e0       	ldi	r19, 0x00	; 0
    5956:	4a ef       	ldi	r20, 0xFA	; 250
    5958:	54 e4       	ldi	r21, 0x44	; 68
    595a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    595e:	dc 01       	movw	r26, r24
    5960:	cb 01       	movw	r24, r22
    5962:	f8 01       	movw	r30, r16
    5964:	80 83       	st	Z, r24
    5966:	91 83       	std	Z+1, r25	; 0x01
    5968:	a2 83       	std	Z+2, r26	; 0x02
    596a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    596c:	fe 01       	movw	r30, r28
    596e:	e7 59       	subi	r30, 0x97	; 151
    5970:	ff 4f       	sbci	r31, 0xFF	; 255
    5972:	60 81       	ld	r22, Z
    5974:	71 81       	ldd	r23, Z+1	; 0x01
    5976:	82 81       	ldd	r24, Z+2	; 0x02
    5978:	93 81       	ldd	r25, Z+3	; 0x03
    597a:	20 e0       	ldi	r18, 0x00	; 0
    597c:	30 e0       	ldi	r19, 0x00	; 0
    597e:	40 e8       	ldi	r20, 0x80	; 128
    5980:	5f e3       	ldi	r21, 0x3F	; 63
    5982:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5986:	88 23       	and	r24, r24
    5988:	44 f4       	brge	.+16     	; 0x599a <Robot_voidObstacleAvoidingMode+0x10da>
		__ticks = 1;
    598a:	fe 01       	movw	r30, r28
    598c:	e9 59       	subi	r30, 0x99	; 153
    598e:	ff 4f       	sbci	r31, 0xFF	; 255
    5990:	81 e0       	ldi	r24, 0x01	; 1
    5992:	90 e0       	ldi	r25, 0x00	; 0
    5994:	91 83       	std	Z+1, r25	; 0x01
    5996:	80 83       	st	Z, r24
    5998:	64 c0       	rjmp	.+200    	; 0x5a62 <Robot_voidObstacleAvoidingMode+0x11a2>
	else if (__tmp > 65535)
    599a:	fe 01       	movw	r30, r28
    599c:	e7 59       	subi	r30, 0x97	; 151
    599e:	ff 4f       	sbci	r31, 0xFF	; 255
    59a0:	60 81       	ld	r22, Z
    59a2:	71 81       	ldd	r23, Z+1	; 0x01
    59a4:	82 81       	ldd	r24, Z+2	; 0x02
    59a6:	93 81       	ldd	r25, Z+3	; 0x03
    59a8:	20 e0       	ldi	r18, 0x00	; 0
    59aa:	3f ef       	ldi	r19, 0xFF	; 255
    59ac:	4f e7       	ldi	r20, 0x7F	; 127
    59ae:	57 e4       	ldi	r21, 0x47	; 71
    59b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59b4:	18 16       	cp	r1, r24
    59b6:	0c f0       	brlt	.+2      	; 0x59ba <Robot_voidObstacleAvoidingMode+0x10fa>
    59b8:	43 c0       	rjmp	.+134    	; 0x5a40 <Robot_voidObstacleAvoidingMode+0x1180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59ba:	fe 01       	movw	r30, r28
    59bc:	e3 59       	subi	r30, 0x93	; 147
    59be:	ff 4f       	sbci	r31, 0xFF	; 255
    59c0:	60 81       	ld	r22, Z
    59c2:	71 81       	ldd	r23, Z+1	; 0x01
    59c4:	82 81       	ldd	r24, Z+2	; 0x02
    59c6:	93 81       	ldd	r25, Z+3	; 0x03
    59c8:	20 e0       	ldi	r18, 0x00	; 0
    59ca:	30 e0       	ldi	r19, 0x00	; 0
    59cc:	40 e2       	ldi	r20, 0x20	; 32
    59ce:	51 e4       	ldi	r21, 0x41	; 65
    59d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59d4:	dc 01       	movw	r26, r24
    59d6:	cb 01       	movw	r24, r22
    59d8:	8e 01       	movw	r16, r28
    59da:	09 59       	subi	r16, 0x99	; 153
    59dc:	1f 4f       	sbci	r17, 0xFF	; 255
    59de:	bc 01       	movw	r22, r24
    59e0:	cd 01       	movw	r24, r26
    59e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59e6:	dc 01       	movw	r26, r24
    59e8:	cb 01       	movw	r24, r22
    59ea:	f8 01       	movw	r30, r16
    59ec:	91 83       	std	Z+1, r25	; 0x01
    59ee:	80 83       	st	Z, r24
    59f0:	1f c0       	rjmp	.+62     	; 0x5a30 <Robot_voidObstacleAvoidingMode+0x1170>
    59f2:	fe 01       	movw	r30, r28
    59f4:	eb 59       	subi	r30, 0x9B	; 155
    59f6:	ff 4f       	sbci	r31, 0xFF	; 255
    59f8:	88 ec       	ldi	r24, 0xC8	; 200
    59fa:	90 e0       	ldi	r25, 0x00	; 0
    59fc:	91 83       	std	Z+1, r25	; 0x01
    59fe:	80 83       	st	Z, r24
    5a00:	fe 01       	movw	r30, r28
    5a02:	eb 59       	subi	r30, 0x9B	; 155
    5a04:	ff 4f       	sbci	r31, 0xFF	; 255
    5a06:	80 81       	ld	r24, Z
    5a08:	91 81       	ldd	r25, Z+1	; 0x01
    5a0a:	01 97       	sbiw	r24, 0x01	; 1
    5a0c:	f1 f7       	brne	.-4      	; 0x5a0a <Robot_voidObstacleAvoidingMode+0x114a>
    5a0e:	fe 01       	movw	r30, r28
    5a10:	eb 59       	subi	r30, 0x9B	; 155
    5a12:	ff 4f       	sbci	r31, 0xFF	; 255
    5a14:	91 83       	std	Z+1, r25	; 0x01
    5a16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a18:	de 01       	movw	r26, r28
    5a1a:	a9 59       	subi	r26, 0x99	; 153
    5a1c:	bf 4f       	sbci	r27, 0xFF	; 255
    5a1e:	fe 01       	movw	r30, r28
    5a20:	e9 59       	subi	r30, 0x99	; 153
    5a22:	ff 4f       	sbci	r31, 0xFF	; 255
    5a24:	80 81       	ld	r24, Z
    5a26:	91 81       	ldd	r25, Z+1	; 0x01
    5a28:	01 97       	sbiw	r24, 0x01	; 1
    5a2a:	11 96       	adiw	r26, 0x01	; 1
    5a2c:	9c 93       	st	X, r25
    5a2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a30:	fe 01       	movw	r30, r28
    5a32:	e9 59       	subi	r30, 0x99	; 153
    5a34:	ff 4f       	sbci	r31, 0xFF	; 255
    5a36:	80 81       	ld	r24, Z
    5a38:	91 81       	ldd	r25, Z+1	; 0x01
    5a3a:	00 97       	sbiw	r24, 0x00	; 0
    5a3c:	d1 f6       	brne	.-76     	; 0x59f2 <Robot_voidObstacleAvoidingMode+0x1132>
    5a3e:	27 c0       	rjmp	.+78     	; 0x5a8e <Robot_voidObstacleAvoidingMode+0x11ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a40:	8e 01       	movw	r16, r28
    5a42:	09 59       	subi	r16, 0x99	; 153
    5a44:	1f 4f       	sbci	r17, 0xFF	; 255
    5a46:	fe 01       	movw	r30, r28
    5a48:	e7 59       	subi	r30, 0x97	; 151
    5a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a4c:	60 81       	ld	r22, Z
    5a4e:	71 81       	ldd	r23, Z+1	; 0x01
    5a50:	82 81       	ldd	r24, Z+2	; 0x02
    5a52:	93 81       	ldd	r25, Z+3	; 0x03
    5a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a58:	dc 01       	movw	r26, r24
    5a5a:	cb 01       	movw	r24, r22
    5a5c:	f8 01       	movw	r30, r16
    5a5e:	91 83       	std	Z+1, r25	; 0x01
    5a60:	80 83       	st	Z, r24
    5a62:	de 01       	movw	r26, r28
    5a64:	ad 59       	subi	r26, 0x9D	; 157
    5a66:	bf 4f       	sbci	r27, 0xFF	; 255
    5a68:	fe 01       	movw	r30, r28
    5a6a:	e9 59       	subi	r30, 0x99	; 153
    5a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6e:	80 81       	ld	r24, Z
    5a70:	91 81       	ldd	r25, Z+1	; 0x01
    5a72:	8d 93       	st	X+, r24
    5a74:	9c 93       	st	X, r25
    5a76:	fe 01       	movw	r30, r28
    5a78:	ed 59       	subi	r30, 0x9D	; 157
    5a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7c:	80 81       	ld	r24, Z
    5a7e:	91 81       	ldd	r25, Z+1	; 0x01
    5a80:	01 97       	sbiw	r24, 0x01	; 1
    5a82:	f1 f7       	brne	.-4      	; 0x5a80 <Robot_voidObstacleAvoidingMode+0x11c0>
    5a84:	fe 01       	movw	r30, r28
    5a86:	ed 59       	subi	r30, 0x9D	; 157
    5a88:	ff 4f       	sbci	r31, 0xFF	; 255
    5a8a:	91 83       	std	Z+1, r25	; 0x01
    5a8c:	80 83       	st	Z, r24
			_delay_ms(200);
			BUZZER_voidBuzzer_Work(BUZZER_OFF);
    5a8e:	80 e0       	ldi	r24, 0x00	; 0
    5a90:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    5a94:	fe 01       	movw	r30, r28
    5a96:	e1 5a       	subi	r30, 0xA1	; 161
    5a98:	ff 4f       	sbci	r31, 0xFF	; 255
    5a9a:	80 e0       	ldi	r24, 0x00	; 0
    5a9c:	90 e0       	ldi	r25, 0x00	; 0
    5a9e:	a6 e9       	ldi	r26, 0x96	; 150
    5aa0:	b3 e4       	ldi	r27, 0x43	; 67
    5aa2:	80 83       	st	Z, r24
    5aa4:	91 83       	std	Z+1, r25	; 0x01
    5aa6:	a2 83       	std	Z+2, r26	; 0x02
    5aa8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5aaa:	8e 01       	movw	r16, r28
    5aac:	05 5a       	subi	r16, 0xA5	; 165
    5aae:	1f 4f       	sbci	r17, 0xFF	; 255
    5ab0:	fe 01       	movw	r30, r28
    5ab2:	e1 5a       	subi	r30, 0xA1	; 161
    5ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab6:	60 81       	ld	r22, Z
    5ab8:	71 81       	ldd	r23, Z+1	; 0x01
    5aba:	82 81       	ldd	r24, Z+2	; 0x02
    5abc:	93 81       	ldd	r25, Z+3	; 0x03
    5abe:	20 e0       	ldi	r18, 0x00	; 0
    5ac0:	30 e0       	ldi	r19, 0x00	; 0
    5ac2:	4a ef       	ldi	r20, 0xFA	; 250
    5ac4:	54 e4       	ldi	r21, 0x44	; 68
    5ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5aca:	dc 01       	movw	r26, r24
    5acc:	cb 01       	movw	r24, r22
    5ace:	f8 01       	movw	r30, r16
    5ad0:	80 83       	st	Z, r24
    5ad2:	91 83       	std	Z+1, r25	; 0x01
    5ad4:	a2 83       	std	Z+2, r26	; 0x02
    5ad6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5ad8:	fe 01       	movw	r30, r28
    5ada:	e5 5a       	subi	r30, 0xA5	; 165
    5adc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ade:	60 81       	ld	r22, Z
    5ae0:	71 81       	ldd	r23, Z+1	; 0x01
    5ae2:	82 81       	ldd	r24, Z+2	; 0x02
    5ae4:	93 81       	ldd	r25, Z+3	; 0x03
    5ae6:	20 e0       	ldi	r18, 0x00	; 0
    5ae8:	30 e0       	ldi	r19, 0x00	; 0
    5aea:	40 e8       	ldi	r20, 0x80	; 128
    5aec:	5f e3       	ldi	r21, 0x3F	; 63
    5aee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5af2:	88 23       	and	r24, r24
    5af4:	44 f4       	brge	.+16     	; 0x5b06 <Robot_voidObstacleAvoidingMode+0x1246>
		__ticks = 1;
    5af6:	fe 01       	movw	r30, r28
    5af8:	e7 5a       	subi	r30, 0xA7	; 167
    5afa:	ff 4f       	sbci	r31, 0xFF	; 255
    5afc:	81 e0       	ldi	r24, 0x01	; 1
    5afe:	90 e0       	ldi	r25, 0x00	; 0
    5b00:	91 83       	std	Z+1, r25	; 0x01
    5b02:	80 83       	st	Z, r24
    5b04:	64 c0       	rjmp	.+200    	; 0x5bce <Robot_voidObstacleAvoidingMode+0x130e>
	else if (__tmp > 65535)
    5b06:	fe 01       	movw	r30, r28
    5b08:	e5 5a       	subi	r30, 0xA5	; 165
    5b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b0c:	60 81       	ld	r22, Z
    5b0e:	71 81       	ldd	r23, Z+1	; 0x01
    5b10:	82 81       	ldd	r24, Z+2	; 0x02
    5b12:	93 81       	ldd	r25, Z+3	; 0x03
    5b14:	20 e0       	ldi	r18, 0x00	; 0
    5b16:	3f ef       	ldi	r19, 0xFF	; 255
    5b18:	4f e7       	ldi	r20, 0x7F	; 127
    5b1a:	57 e4       	ldi	r21, 0x47	; 71
    5b1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b20:	18 16       	cp	r1, r24
    5b22:	0c f0       	brlt	.+2      	; 0x5b26 <Robot_voidObstacleAvoidingMode+0x1266>
    5b24:	43 c0       	rjmp	.+134    	; 0x5bac <Robot_voidObstacleAvoidingMode+0x12ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b26:	fe 01       	movw	r30, r28
    5b28:	e1 5a       	subi	r30, 0xA1	; 161
    5b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b2c:	60 81       	ld	r22, Z
    5b2e:	71 81       	ldd	r23, Z+1	; 0x01
    5b30:	82 81       	ldd	r24, Z+2	; 0x02
    5b32:	93 81       	ldd	r25, Z+3	; 0x03
    5b34:	20 e0       	ldi	r18, 0x00	; 0
    5b36:	30 e0       	ldi	r19, 0x00	; 0
    5b38:	40 e2       	ldi	r20, 0x20	; 32
    5b3a:	51 e4       	ldi	r21, 0x41	; 65
    5b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b40:	dc 01       	movw	r26, r24
    5b42:	cb 01       	movw	r24, r22
    5b44:	8e 01       	movw	r16, r28
    5b46:	07 5a       	subi	r16, 0xA7	; 167
    5b48:	1f 4f       	sbci	r17, 0xFF	; 255
    5b4a:	bc 01       	movw	r22, r24
    5b4c:	cd 01       	movw	r24, r26
    5b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b52:	dc 01       	movw	r26, r24
    5b54:	cb 01       	movw	r24, r22
    5b56:	f8 01       	movw	r30, r16
    5b58:	91 83       	std	Z+1, r25	; 0x01
    5b5a:	80 83       	st	Z, r24
    5b5c:	1f c0       	rjmp	.+62     	; 0x5b9c <Robot_voidObstacleAvoidingMode+0x12dc>
    5b5e:	fe 01       	movw	r30, r28
    5b60:	e9 5a       	subi	r30, 0xA9	; 169
    5b62:	ff 4f       	sbci	r31, 0xFF	; 255
    5b64:	88 ec       	ldi	r24, 0xC8	; 200
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	91 83       	std	Z+1, r25	; 0x01
    5b6a:	80 83       	st	Z, r24
    5b6c:	fe 01       	movw	r30, r28
    5b6e:	e9 5a       	subi	r30, 0xA9	; 169
    5b70:	ff 4f       	sbci	r31, 0xFF	; 255
    5b72:	80 81       	ld	r24, Z
    5b74:	91 81       	ldd	r25, Z+1	; 0x01
    5b76:	01 97       	sbiw	r24, 0x01	; 1
    5b78:	f1 f7       	brne	.-4      	; 0x5b76 <Robot_voidObstacleAvoidingMode+0x12b6>
    5b7a:	fe 01       	movw	r30, r28
    5b7c:	e9 5a       	subi	r30, 0xA9	; 169
    5b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b80:	91 83       	std	Z+1, r25	; 0x01
    5b82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b84:	de 01       	movw	r26, r28
    5b86:	a7 5a       	subi	r26, 0xA7	; 167
    5b88:	bf 4f       	sbci	r27, 0xFF	; 255
    5b8a:	fe 01       	movw	r30, r28
    5b8c:	e7 5a       	subi	r30, 0xA7	; 167
    5b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b90:	80 81       	ld	r24, Z
    5b92:	91 81       	ldd	r25, Z+1	; 0x01
    5b94:	01 97       	sbiw	r24, 0x01	; 1
    5b96:	11 96       	adiw	r26, 0x01	; 1
    5b98:	9c 93       	st	X, r25
    5b9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b9c:	fe 01       	movw	r30, r28
    5b9e:	e7 5a       	subi	r30, 0xA7	; 167
    5ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba2:	80 81       	ld	r24, Z
    5ba4:	91 81       	ldd	r25, Z+1	; 0x01
    5ba6:	00 97       	sbiw	r24, 0x00	; 0
    5ba8:	d1 f6       	brne	.-76     	; 0x5b5e <Robot_voidObstacleAvoidingMode+0x129e>
    5baa:	27 c0       	rjmp	.+78     	; 0x5bfa <Robot_voidObstacleAvoidingMode+0x133a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bac:	8e 01       	movw	r16, r28
    5bae:	07 5a       	subi	r16, 0xA7	; 167
    5bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    5bb2:	fe 01       	movw	r30, r28
    5bb4:	e5 5a       	subi	r30, 0xA5	; 165
    5bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb8:	60 81       	ld	r22, Z
    5bba:	71 81       	ldd	r23, Z+1	; 0x01
    5bbc:	82 81       	ldd	r24, Z+2	; 0x02
    5bbe:	93 81       	ldd	r25, Z+3	; 0x03
    5bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bc4:	dc 01       	movw	r26, r24
    5bc6:	cb 01       	movw	r24, r22
    5bc8:	f8 01       	movw	r30, r16
    5bca:	91 83       	std	Z+1, r25	; 0x01
    5bcc:	80 83       	st	Z, r24
    5bce:	de 01       	movw	r26, r28
    5bd0:	ab 5a       	subi	r26, 0xAB	; 171
    5bd2:	bf 4f       	sbci	r27, 0xFF	; 255
    5bd4:	fe 01       	movw	r30, r28
    5bd6:	e7 5a       	subi	r30, 0xA7	; 167
    5bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bda:	80 81       	ld	r24, Z
    5bdc:	91 81       	ldd	r25, Z+1	; 0x01
    5bde:	8d 93       	st	X+, r24
    5be0:	9c 93       	st	X, r25
    5be2:	fe 01       	movw	r30, r28
    5be4:	eb 5a       	subi	r30, 0xAB	; 171
    5be6:	ff 4f       	sbci	r31, 0xFF	; 255
    5be8:	80 81       	ld	r24, Z
    5bea:	91 81       	ldd	r25, Z+1	; 0x01
    5bec:	01 97       	sbiw	r24, 0x01	; 1
    5bee:	f1 f7       	brne	.-4      	; 0x5bec <Robot_voidObstacleAvoidingMode+0x132c>
    5bf0:	fe 01       	movw	r30, r28
    5bf2:	eb 5a       	subi	r30, 0xAB	; 171
    5bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf6:	91 83       	std	Z+1, r25	; 0x01
    5bf8:	80 83       	st	Z, r24
			_delay_ms(300);
			/* Set Servo direction */
			BUZZER_voidBuzzer_Work(BUZZER_ON);
    5bfa:	81 e0       	ldi	r24, 0x01	; 1
    5bfc:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    5c00:	fe 01       	movw	r30, r28
    5c02:	ef 5a       	subi	r30, 0xAF	; 175
    5c04:	ff 4f       	sbci	r31, 0xFF	; 255
    5c06:	80 e0       	ldi	r24, 0x00	; 0
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	a8 e4       	ldi	r26, 0x48	; 72
    5c0c:	b3 e4       	ldi	r27, 0x43	; 67
    5c0e:	80 83       	st	Z, r24
    5c10:	91 83       	std	Z+1, r25	; 0x01
    5c12:	a2 83       	std	Z+2, r26	; 0x02
    5c14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c16:	8e 01       	movw	r16, r28
    5c18:	03 5b       	subi	r16, 0xB3	; 179
    5c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    5c1c:	fe 01       	movw	r30, r28
    5c1e:	ef 5a       	subi	r30, 0xAF	; 175
    5c20:	ff 4f       	sbci	r31, 0xFF	; 255
    5c22:	60 81       	ld	r22, Z
    5c24:	71 81       	ldd	r23, Z+1	; 0x01
    5c26:	82 81       	ldd	r24, Z+2	; 0x02
    5c28:	93 81       	ldd	r25, Z+3	; 0x03
    5c2a:	20 e0       	ldi	r18, 0x00	; 0
    5c2c:	30 e0       	ldi	r19, 0x00	; 0
    5c2e:	4a ef       	ldi	r20, 0xFA	; 250
    5c30:	54 e4       	ldi	r21, 0x44	; 68
    5c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c36:	dc 01       	movw	r26, r24
    5c38:	cb 01       	movw	r24, r22
    5c3a:	f8 01       	movw	r30, r16
    5c3c:	80 83       	st	Z, r24
    5c3e:	91 83       	std	Z+1, r25	; 0x01
    5c40:	a2 83       	std	Z+2, r26	; 0x02
    5c42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c44:	fe 01       	movw	r30, r28
    5c46:	e3 5b       	subi	r30, 0xB3	; 179
    5c48:	ff 4f       	sbci	r31, 0xFF	; 255
    5c4a:	60 81       	ld	r22, Z
    5c4c:	71 81       	ldd	r23, Z+1	; 0x01
    5c4e:	82 81       	ldd	r24, Z+2	; 0x02
    5c50:	93 81       	ldd	r25, Z+3	; 0x03
    5c52:	20 e0       	ldi	r18, 0x00	; 0
    5c54:	30 e0       	ldi	r19, 0x00	; 0
    5c56:	40 e8       	ldi	r20, 0x80	; 128
    5c58:	5f e3       	ldi	r21, 0x3F	; 63
    5c5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c5e:	88 23       	and	r24, r24
    5c60:	44 f4       	brge	.+16     	; 0x5c72 <Robot_voidObstacleAvoidingMode+0x13b2>
		__ticks = 1;
    5c62:	fe 01       	movw	r30, r28
    5c64:	e5 5b       	subi	r30, 0xB5	; 181
    5c66:	ff 4f       	sbci	r31, 0xFF	; 255
    5c68:	81 e0       	ldi	r24, 0x01	; 1
    5c6a:	90 e0       	ldi	r25, 0x00	; 0
    5c6c:	91 83       	std	Z+1, r25	; 0x01
    5c6e:	80 83       	st	Z, r24
    5c70:	64 c0       	rjmp	.+200    	; 0x5d3a <Robot_voidObstacleAvoidingMode+0x147a>
	else if (__tmp > 65535)
    5c72:	fe 01       	movw	r30, r28
    5c74:	e3 5b       	subi	r30, 0xB3	; 179
    5c76:	ff 4f       	sbci	r31, 0xFF	; 255
    5c78:	60 81       	ld	r22, Z
    5c7a:	71 81       	ldd	r23, Z+1	; 0x01
    5c7c:	82 81       	ldd	r24, Z+2	; 0x02
    5c7e:	93 81       	ldd	r25, Z+3	; 0x03
    5c80:	20 e0       	ldi	r18, 0x00	; 0
    5c82:	3f ef       	ldi	r19, 0xFF	; 255
    5c84:	4f e7       	ldi	r20, 0x7F	; 127
    5c86:	57 e4       	ldi	r21, 0x47	; 71
    5c88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c8c:	18 16       	cp	r1, r24
    5c8e:	0c f0       	brlt	.+2      	; 0x5c92 <Robot_voidObstacleAvoidingMode+0x13d2>
    5c90:	43 c0       	rjmp	.+134    	; 0x5d18 <Robot_voidObstacleAvoidingMode+0x1458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c92:	fe 01       	movw	r30, r28
    5c94:	ef 5a       	subi	r30, 0xAF	; 175
    5c96:	ff 4f       	sbci	r31, 0xFF	; 255
    5c98:	60 81       	ld	r22, Z
    5c9a:	71 81       	ldd	r23, Z+1	; 0x01
    5c9c:	82 81       	ldd	r24, Z+2	; 0x02
    5c9e:	93 81       	ldd	r25, Z+3	; 0x03
    5ca0:	20 e0       	ldi	r18, 0x00	; 0
    5ca2:	30 e0       	ldi	r19, 0x00	; 0
    5ca4:	40 e2       	ldi	r20, 0x20	; 32
    5ca6:	51 e4       	ldi	r21, 0x41	; 65
    5ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cac:	dc 01       	movw	r26, r24
    5cae:	cb 01       	movw	r24, r22
    5cb0:	8e 01       	movw	r16, r28
    5cb2:	05 5b       	subi	r16, 0xB5	; 181
    5cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    5cb6:	bc 01       	movw	r22, r24
    5cb8:	cd 01       	movw	r24, r26
    5cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cbe:	dc 01       	movw	r26, r24
    5cc0:	cb 01       	movw	r24, r22
    5cc2:	f8 01       	movw	r30, r16
    5cc4:	91 83       	std	Z+1, r25	; 0x01
    5cc6:	80 83       	st	Z, r24
    5cc8:	1f c0       	rjmp	.+62     	; 0x5d08 <Robot_voidObstacleAvoidingMode+0x1448>
    5cca:	fe 01       	movw	r30, r28
    5ccc:	e7 5b       	subi	r30, 0xB7	; 183
    5cce:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd0:	88 ec       	ldi	r24, 0xC8	; 200
    5cd2:	90 e0       	ldi	r25, 0x00	; 0
    5cd4:	91 83       	std	Z+1, r25	; 0x01
    5cd6:	80 83       	st	Z, r24
    5cd8:	fe 01       	movw	r30, r28
    5cda:	e7 5b       	subi	r30, 0xB7	; 183
    5cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cde:	80 81       	ld	r24, Z
    5ce0:	91 81       	ldd	r25, Z+1	; 0x01
    5ce2:	01 97       	sbiw	r24, 0x01	; 1
    5ce4:	f1 f7       	brne	.-4      	; 0x5ce2 <Robot_voidObstacleAvoidingMode+0x1422>
    5ce6:	fe 01       	movw	r30, r28
    5ce8:	e7 5b       	subi	r30, 0xB7	; 183
    5cea:	ff 4f       	sbci	r31, 0xFF	; 255
    5cec:	91 83       	std	Z+1, r25	; 0x01
    5cee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cf0:	de 01       	movw	r26, r28
    5cf2:	a5 5b       	subi	r26, 0xB5	; 181
    5cf4:	bf 4f       	sbci	r27, 0xFF	; 255
    5cf6:	fe 01       	movw	r30, r28
    5cf8:	e5 5b       	subi	r30, 0xB5	; 181
    5cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    5cfc:	80 81       	ld	r24, Z
    5cfe:	91 81       	ldd	r25, Z+1	; 0x01
    5d00:	01 97       	sbiw	r24, 0x01	; 1
    5d02:	11 96       	adiw	r26, 0x01	; 1
    5d04:	9c 93       	st	X, r25
    5d06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d08:	fe 01       	movw	r30, r28
    5d0a:	e5 5b       	subi	r30, 0xB5	; 181
    5d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d0e:	80 81       	ld	r24, Z
    5d10:	91 81       	ldd	r25, Z+1	; 0x01
    5d12:	00 97       	sbiw	r24, 0x00	; 0
    5d14:	d1 f6       	brne	.-76     	; 0x5cca <Robot_voidObstacleAvoidingMode+0x140a>
    5d16:	27 c0       	rjmp	.+78     	; 0x5d66 <Robot_voidObstacleAvoidingMode+0x14a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d18:	8e 01       	movw	r16, r28
    5d1a:	05 5b       	subi	r16, 0xB5	; 181
    5d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d1e:	fe 01       	movw	r30, r28
    5d20:	e3 5b       	subi	r30, 0xB3	; 179
    5d22:	ff 4f       	sbci	r31, 0xFF	; 255
    5d24:	60 81       	ld	r22, Z
    5d26:	71 81       	ldd	r23, Z+1	; 0x01
    5d28:	82 81       	ldd	r24, Z+2	; 0x02
    5d2a:	93 81       	ldd	r25, Z+3	; 0x03
    5d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d30:	dc 01       	movw	r26, r24
    5d32:	cb 01       	movw	r24, r22
    5d34:	f8 01       	movw	r30, r16
    5d36:	91 83       	std	Z+1, r25	; 0x01
    5d38:	80 83       	st	Z, r24
    5d3a:	de 01       	movw	r26, r28
    5d3c:	a9 5b       	subi	r26, 0xB9	; 185
    5d3e:	bf 4f       	sbci	r27, 0xFF	; 255
    5d40:	fe 01       	movw	r30, r28
    5d42:	e5 5b       	subi	r30, 0xB5	; 181
    5d44:	ff 4f       	sbci	r31, 0xFF	; 255
    5d46:	80 81       	ld	r24, Z
    5d48:	91 81       	ldd	r25, Z+1	; 0x01
    5d4a:	8d 93       	st	X+, r24
    5d4c:	9c 93       	st	X, r25
    5d4e:	fe 01       	movw	r30, r28
    5d50:	e9 5b       	subi	r30, 0xB9	; 185
    5d52:	ff 4f       	sbci	r31, 0xFF	; 255
    5d54:	80 81       	ld	r24, Z
    5d56:	91 81       	ldd	r25, Z+1	; 0x01
    5d58:	01 97       	sbiw	r24, 0x01	; 1
    5d5a:	f1 f7       	brne	.-4      	; 0x5d58 <Robot_voidObstacleAvoidingMode+0x1498>
    5d5c:	fe 01       	movw	r30, r28
    5d5e:	e9 5b       	subi	r30, 0xB9	; 185
    5d60:	ff 4f       	sbci	r31, 0xFF	; 255
    5d62:	91 83       	std	Z+1, r25	; 0x01
    5d64:	80 83       	st	Z, r24
			_delay_ms(200);
			BUZZER_voidBuzzer_Work(BUZZER_OFF);
    5d66:	80 e0       	ldi	r24, 0x00	; 0
    5d68:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
			SERVO_voidTimer1ServoSetAngleOCR1B(90);
    5d6c:	6a e5       	ldi	r22, 0x5A	; 90
    5d6e:	70 e0       	ldi	r23, 0x00	; 0
    5d70:	80 e0       	ldi	r24, 0x00	; 0
    5d72:	90 e0       	ldi	r25, 0x00	; 0
    5d74:	0e 94 6f 16 	call	0x2cde	; 0x2cde <SERVO_voidTimer1ServoSetAngleOCR1B>
    5d78:	fe 01       	movw	r30, r28
    5d7a:	ed 5b       	subi	r30, 0xBD	; 189
    5d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d7e:	80 e0       	ldi	r24, 0x00	; 0
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	a6 e9       	ldi	r26, 0x96	; 150
    5d84:	b3 e4       	ldi	r27, 0x43	; 67
    5d86:	80 83       	st	Z, r24
    5d88:	91 83       	std	Z+1, r25	; 0x01
    5d8a:	a2 83       	std	Z+2, r26	; 0x02
    5d8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d8e:	8e 01       	movw	r16, r28
    5d90:	01 5c       	subi	r16, 0xC1	; 193
    5d92:	1f 4f       	sbci	r17, 0xFF	; 255
    5d94:	fe 01       	movw	r30, r28
    5d96:	ed 5b       	subi	r30, 0xBD	; 189
    5d98:	ff 4f       	sbci	r31, 0xFF	; 255
    5d9a:	60 81       	ld	r22, Z
    5d9c:	71 81       	ldd	r23, Z+1	; 0x01
    5d9e:	82 81       	ldd	r24, Z+2	; 0x02
    5da0:	93 81       	ldd	r25, Z+3	; 0x03
    5da2:	20 e0       	ldi	r18, 0x00	; 0
    5da4:	30 e0       	ldi	r19, 0x00	; 0
    5da6:	4a ef       	ldi	r20, 0xFA	; 250
    5da8:	54 e4       	ldi	r21, 0x44	; 68
    5daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dae:	dc 01       	movw	r26, r24
    5db0:	cb 01       	movw	r24, r22
    5db2:	f8 01       	movw	r30, r16
    5db4:	80 83       	st	Z, r24
    5db6:	91 83       	std	Z+1, r25	; 0x01
    5db8:	a2 83       	std	Z+2, r26	; 0x02
    5dba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5dbc:	fe 01       	movw	r30, r28
    5dbe:	ff 96       	adiw	r30, 0x3f	; 63
    5dc0:	60 81       	ld	r22, Z
    5dc2:	71 81       	ldd	r23, Z+1	; 0x01
    5dc4:	82 81       	ldd	r24, Z+2	; 0x02
    5dc6:	93 81       	ldd	r25, Z+3	; 0x03
    5dc8:	20 e0       	ldi	r18, 0x00	; 0
    5dca:	30 e0       	ldi	r19, 0x00	; 0
    5dcc:	40 e8       	ldi	r20, 0x80	; 128
    5dce:	5f e3       	ldi	r21, 0x3F	; 63
    5dd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5dd4:	88 23       	and	r24, r24
    5dd6:	2c f4       	brge	.+10     	; 0x5de2 <Robot_voidObstacleAvoidingMode+0x1522>
		__ticks = 1;
    5dd8:	81 e0       	ldi	r24, 0x01	; 1
    5dda:	90 e0       	ldi	r25, 0x00	; 0
    5ddc:	9e af       	std	Y+62, r25	; 0x3e
    5dde:	8d af       	std	Y+61, r24	; 0x3d
    5de0:	46 c0       	rjmp	.+140    	; 0x5e6e <Robot_voidObstacleAvoidingMode+0x15ae>
	else if (__tmp > 65535)
    5de2:	fe 01       	movw	r30, r28
    5de4:	ff 96       	adiw	r30, 0x3f	; 63
    5de6:	60 81       	ld	r22, Z
    5de8:	71 81       	ldd	r23, Z+1	; 0x01
    5dea:	82 81       	ldd	r24, Z+2	; 0x02
    5dec:	93 81       	ldd	r25, Z+3	; 0x03
    5dee:	20 e0       	ldi	r18, 0x00	; 0
    5df0:	3f ef       	ldi	r19, 0xFF	; 255
    5df2:	4f e7       	ldi	r20, 0x7F	; 127
    5df4:	57 e4       	ldi	r21, 0x47	; 71
    5df6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5dfa:	18 16       	cp	r1, r24
    5dfc:	64 f5       	brge	.+88     	; 0x5e56 <Robot_voidObstacleAvoidingMode+0x1596>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5dfe:	fe 01       	movw	r30, r28
    5e00:	ed 5b       	subi	r30, 0xBD	; 189
    5e02:	ff 4f       	sbci	r31, 0xFF	; 255
    5e04:	60 81       	ld	r22, Z
    5e06:	71 81       	ldd	r23, Z+1	; 0x01
    5e08:	82 81       	ldd	r24, Z+2	; 0x02
    5e0a:	93 81       	ldd	r25, Z+3	; 0x03
    5e0c:	20 e0       	ldi	r18, 0x00	; 0
    5e0e:	30 e0       	ldi	r19, 0x00	; 0
    5e10:	40 e2       	ldi	r20, 0x20	; 32
    5e12:	51 e4       	ldi	r21, 0x41	; 65
    5e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e18:	dc 01       	movw	r26, r24
    5e1a:	cb 01       	movw	r24, r22
    5e1c:	bc 01       	movw	r22, r24
    5e1e:	cd 01       	movw	r24, r26
    5e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e24:	dc 01       	movw	r26, r24
    5e26:	cb 01       	movw	r24, r22
    5e28:	9e af       	std	Y+62, r25	; 0x3e
    5e2a:	8d af       	std	Y+61, r24	; 0x3d
    5e2c:	0f c0       	rjmp	.+30     	; 0x5e4c <Robot_voidObstacleAvoidingMode+0x158c>
    5e2e:	88 ec       	ldi	r24, 0xC8	; 200
    5e30:	90 e0       	ldi	r25, 0x00	; 0
    5e32:	9c af       	std	Y+60, r25	; 0x3c
    5e34:	8b af       	std	Y+59, r24	; 0x3b
    5e36:	8b ad       	ldd	r24, Y+59	; 0x3b
    5e38:	9c ad       	ldd	r25, Y+60	; 0x3c
    5e3a:	01 97       	sbiw	r24, 0x01	; 1
    5e3c:	f1 f7       	brne	.-4      	; 0x5e3a <Robot_voidObstacleAvoidingMode+0x157a>
    5e3e:	9c af       	std	Y+60, r25	; 0x3c
    5e40:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e42:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e44:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e46:	01 97       	sbiw	r24, 0x01	; 1
    5e48:	9e af       	std	Y+62, r25	; 0x3e
    5e4a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e50:	00 97       	sbiw	r24, 0x00	; 0
    5e52:	69 f7       	brne	.-38     	; 0x5e2e <Robot_voidObstacleAvoidingMode+0x156e>
    5e54:	16 c0       	rjmp	.+44     	; 0x5e82 <Robot_voidObstacleAvoidingMode+0x15c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e56:	fe 01       	movw	r30, r28
    5e58:	ff 96       	adiw	r30, 0x3f	; 63
    5e5a:	60 81       	ld	r22, Z
    5e5c:	71 81       	ldd	r23, Z+1	; 0x01
    5e5e:	82 81       	ldd	r24, Z+2	; 0x02
    5e60:	93 81       	ldd	r25, Z+3	; 0x03
    5e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e66:	dc 01       	movw	r26, r24
    5e68:	cb 01       	movw	r24, r22
    5e6a:	9e af       	std	Y+62, r25	; 0x3e
    5e6c:	8d af       	std	Y+61, r24	; 0x3d
    5e6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5e70:	9e ad       	ldd	r25, Y+62	; 0x3e
    5e72:	9a af       	std	Y+58, r25	; 0x3a
    5e74:	89 af       	std	Y+57, r24	; 0x39
    5e76:	89 ad       	ldd	r24, Y+57	; 0x39
    5e78:	9a ad       	ldd	r25, Y+58	; 0x3a
    5e7a:	01 97       	sbiw	r24, 0x01	; 1
    5e7c:	f1 f7       	brne	.-4      	; 0x5e7a <Robot_voidObstacleAvoidingMode+0x15ba>
    5e7e:	9a af       	std	Y+58, r25	; 0x3a
    5e80:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(300);
			/*Alarm on */
		    BUZZER_voidBuzzer_Work(BUZZER_ON);
    5e82:	81 e0       	ldi	r24, 0x01	; 1
    5e84:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    5e88:	80 e0       	ldi	r24, 0x00	; 0
    5e8a:	90 e0       	ldi	r25, 0x00	; 0
    5e8c:	a8 e4       	ldi	r26, 0x48	; 72
    5e8e:	b3 e4       	ldi	r27, 0x43	; 67
    5e90:	8d ab       	std	Y+53, r24	; 0x35
    5e92:	9e ab       	std	Y+54, r25	; 0x36
    5e94:	af ab       	std	Y+55, r26	; 0x37
    5e96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e98:	6d a9       	ldd	r22, Y+53	; 0x35
    5e9a:	7e a9       	ldd	r23, Y+54	; 0x36
    5e9c:	8f a9       	ldd	r24, Y+55	; 0x37
    5e9e:	98 ad       	ldd	r25, Y+56	; 0x38
    5ea0:	20 e0       	ldi	r18, 0x00	; 0
    5ea2:	30 e0       	ldi	r19, 0x00	; 0
    5ea4:	4a ef       	ldi	r20, 0xFA	; 250
    5ea6:	54 e4       	ldi	r21, 0x44	; 68
    5ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5eac:	dc 01       	movw	r26, r24
    5eae:	cb 01       	movw	r24, r22
    5eb0:	89 ab       	std	Y+49, r24	; 0x31
    5eb2:	9a ab       	std	Y+50, r25	; 0x32
    5eb4:	ab ab       	std	Y+51, r26	; 0x33
    5eb6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5eb8:	69 a9       	ldd	r22, Y+49	; 0x31
    5eba:	7a a9       	ldd	r23, Y+50	; 0x32
    5ebc:	8b a9       	ldd	r24, Y+51	; 0x33
    5ebe:	9c a9       	ldd	r25, Y+52	; 0x34
    5ec0:	20 e0       	ldi	r18, 0x00	; 0
    5ec2:	30 e0       	ldi	r19, 0x00	; 0
    5ec4:	40 e8       	ldi	r20, 0x80	; 128
    5ec6:	5f e3       	ldi	r21, 0x3F	; 63
    5ec8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ecc:	88 23       	and	r24, r24
    5ece:	2c f4       	brge	.+10     	; 0x5eda <Robot_voidObstacleAvoidingMode+0x161a>
		__ticks = 1;
    5ed0:	81 e0       	ldi	r24, 0x01	; 1
    5ed2:	90 e0       	ldi	r25, 0x00	; 0
    5ed4:	98 ab       	std	Y+48, r25	; 0x30
    5ed6:	8f a7       	std	Y+47, r24	; 0x2f
    5ed8:	3f c0       	rjmp	.+126    	; 0x5f58 <Robot_voidObstacleAvoidingMode+0x1698>
	else if (__tmp > 65535)
    5eda:	69 a9       	ldd	r22, Y+49	; 0x31
    5edc:	7a a9       	ldd	r23, Y+50	; 0x32
    5ede:	8b a9       	ldd	r24, Y+51	; 0x33
    5ee0:	9c a9       	ldd	r25, Y+52	; 0x34
    5ee2:	20 e0       	ldi	r18, 0x00	; 0
    5ee4:	3f ef       	ldi	r19, 0xFF	; 255
    5ee6:	4f e7       	ldi	r20, 0x7F	; 127
    5ee8:	57 e4       	ldi	r21, 0x47	; 71
    5eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5eee:	18 16       	cp	r1, r24
    5ef0:	4c f5       	brge	.+82     	; 0x5f44 <Robot_voidObstacleAvoidingMode+0x1684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ef2:	6d a9       	ldd	r22, Y+53	; 0x35
    5ef4:	7e a9       	ldd	r23, Y+54	; 0x36
    5ef6:	8f a9       	ldd	r24, Y+55	; 0x37
    5ef8:	98 ad       	ldd	r25, Y+56	; 0x38
    5efa:	20 e0       	ldi	r18, 0x00	; 0
    5efc:	30 e0       	ldi	r19, 0x00	; 0
    5efe:	40 e2       	ldi	r20, 0x20	; 32
    5f00:	51 e4       	ldi	r21, 0x41	; 65
    5f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f06:	dc 01       	movw	r26, r24
    5f08:	cb 01       	movw	r24, r22
    5f0a:	bc 01       	movw	r22, r24
    5f0c:	cd 01       	movw	r24, r26
    5f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f12:	dc 01       	movw	r26, r24
    5f14:	cb 01       	movw	r24, r22
    5f16:	98 ab       	std	Y+48, r25	; 0x30
    5f18:	8f a7       	std	Y+47, r24	; 0x2f
    5f1a:	0f c0       	rjmp	.+30     	; 0x5f3a <Robot_voidObstacleAvoidingMode+0x167a>
    5f1c:	88 ec       	ldi	r24, 0xC8	; 200
    5f1e:	90 e0       	ldi	r25, 0x00	; 0
    5f20:	9e a7       	std	Y+46, r25	; 0x2e
    5f22:	8d a7       	std	Y+45, r24	; 0x2d
    5f24:	8d a5       	ldd	r24, Y+45	; 0x2d
    5f26:	9e a5       	ldd	r25, Y+46	; 0x2e
    5f28:	01 97       	sbiw	r24, 0x01	; 1
    5f2a:	f1 f7       	brne	.-4      	; 0x5f28 <Robot_voidObstacleAvoidingMode+0x1668>
    5f2c:	9e a7       	std	Y+46, r25	; 0x2e
    5f2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f30:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f32:	98 a9       	ldd	r25, Y+48	; 0x30
    5f34:	01 97       	sbiw	r24, 0x01	; 1
    5f36:	98 ab       	std	Y+48, r25	; 0x30
    5f38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f3c:	98 a9       	ldd	r25, Y+48	; 0x30
    5f3e:	00 97       	sbiw	r24, 0x00	; 0
    5f40:	69 f7       	brne	.-38     	; 0x5f1c <Robot_voidObstacleAvoidingMode+0x165c>
    5f42:	14 c0       	rjmp	.+40     	; 0x5f6c <Robot_voidObstacleAvoidingMode+0x16ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f44:	69 a9       	ldd	r22, Y+49	; 0x31
    5f46:	7a a9       	ldd	r23, Y+50	; 0x32
    5f48:	8b a9       	ldd	r24, Y+51	; 0x33
    5f4a:	9c a9       	ldd	r25, Y+52	; 0x34
    5f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f50:	dc 01       	movw	r26, r24
    5f52:	cb 01       	movw	r24, r22
    5f54:	98 ab       	std	Y+48, r25	; 0x30
    5f56:	8f a7       	std	Y+47, r24	; 0x2f
    5f58:	8f a5       	ldd	r24, Y+47	; 0x2f
    5f5a:	98 a9       	ldd	r25, Y+48	; 0x30
    5f5c:	9c a7       	std	Y+44, r25	; 0x2c
    5f5e:	8b a7       	std	Y+43, r24	; 0x2b
    5f60:	8b a5       	ldd	r24, Y+43	; 0x2b
    5f62:	9c a5       	ldd	r25, Y+44	; 0x2c
    5f64:	01 97       	sbiw	r24, 0x01	; 1
    5f66:	f1 f7       	brne	.-4      	; 0x5f64 <Robot_voidObstacleAvoidingMode+0x16a4>
    5f68:	9c a7       	std	Y+44, r25	; 0x2c
    5f6a:	8b a7       	std	Y+43, r24	; 0x2b
		    _delay_ms(200);
		    BUZZER_voidBuzzer_Work(BUZZER_OFF);
    5f6c:	80 e0       	ldi	r24, 0x00	; 0
    5f6e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    5f72:	80 e0       	ldi	r24, 0x00	; 0
    5f74:	90 e0       	ldi	r25, 0x00	; 0
    5f76:	a8 e4       	ldi	r26, 0x48	; 72
    5f78:	b3 e4       	ldi	r27, 0x43	; 67
    5f7a:	8f a3       	std	Y+39, r24	; 0x27
    5f7c:	98 a7       	std	Y+40, r25	; 0x28
    5f7e:	a9 a7       	std	Y+41, r26	; 0x29
    5f80:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f82:	6f a1       	ldd	r22, Y+39	; 0x27
    5f84:	78 a5       	ldd	r23, Y+40	; 0x28
    5f86:	89 a5       	ldd	r24, Y+41	; 0x29
    5f88:	9a a5       	ldd	r25, Y+42	; 0x2a
    5f8a:	20 e0       	ldi	r18, 0x00	; 0
    5f8c:	30 e0       	ldi	r19, 0x00	; 0
    5f8e:	4a ef       	ldi	r20, 0xFA	; 250
    5f90:	54 e4       	ldi	r21, 0x44	; 68
    5f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f96:	dc 01       	movw	r26, r24
    5f98:	cb 01       	movw	r24, r22
    5f9a:	8b a3       	std	Y+35, r24	; 0x23
    5f9c:	9c a3       	std	Y+36, r25	; 0x24
    5f9e:	ad a3       	std	Y+37, r26	; 0x25
    5fa0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5fa2:	6b a1       	ldd	r22, Y+35	; 0x23
    5fa4:	7c a1       	ldd	r23, Y+36	; 0x24
    5fa6:	8d a1       	ldd	r24, Y+37	; 0x25
    5fa8:	9e a1       	ldd	r25, Y+38	; 0x26
    5faa:	20 e0       	ldi	r18, 0x00	; 0
    5fac:	30 e0       	ldi	r19, 0x00	; 0
    5fae:	40 e8       	ldi	r20, 0x80	; 128
    5fb0:	5f e3       	ldi	r21, 0x3F	; 63
    5fb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fb6:	88 23       	and	r24, r24
    5fb8:	2c f4       	brge	.+10     	; 0x5fc4 <Robot_voidObstacleAvoidingMode+0x1704>
		__ticks = 1;
    5fba:	81 e0       	ldi	r24, 0x01	; 1
    5fbc:	90 e0       	ldi	r25, 0x00	; 0
    5fbe:	9a a3       	std	Y+34, r25	; 0x22
    5fc0:	89 a3       	std	Y+33, r24	; 0x21
    5fc2:	3f c0       	rjmp	.+126    	; 0x6042 <Robot_voidObstacleAvoidingMode+0x1782>
	else if (__tmp > 65535)
    5fc4:	6b a1       	ldd	r22, Y+35	; 0x23
    5fc6:	7c a1       	ldd	r23, Y+36	; 0x24
    5fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    5fca:	9e a1       	ldd	r25, Y+38	; 0x26
    5fcc:	20 e0       	ldi	r18, 0x00	; 0
    5fce:	3f ef       	ldi	r19, 0xFF	; 255
    5fd0:	4f e7       	ldi	r20, 0x7F	; 127
    5fd2:	57 e4       	ldi	r21, 0x47	; 71
    5fd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5fd8:	18 16       	cp	r1, r24
    5fda:	4c f5       	brge	.+82     	; 0x602e <Robot_voidObstacleAvoidingMode+0x176e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fdc:	6f a1       	ldd	r22, Y+39	; 0x27
    5fde:	78 a5       	ldd	r23, Y+40	; 0x28
    5fe0:	89 a5       	ldd	r24, Y+41	; 0x29
    5fe2:	9a a5       	ldd	r25, Y+42	; 0x2a
    5fe4:	20 e0       	ldi	r18, 0x00	; 0
    5fe6:	30 e0       	ldi	r19, 0x00	; 0
    5fe8:	40 e2       	ldi	r20, 0x20	; 32
    5fea:	51 e4       	ldi	r21, 0x41	; 65
    5fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ff0:	dc 01       	movw	r26, r24
    5ff2:	cb 01       	movw	r24, r22
    5ff4:	bc 01       	movw	r22, r24
    5ff6:	cd 01       	movw	r24, r26
    5ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ffc:	dc 01       	movw	r26, r24
    5ffe:	cb 01       	movw	r24, r22
    6000:	9a a3       	std	Y+34, r25	; 0x22
    6002:	89 a3       	std	Y+33, r24	; 0x21
    6004:	0f c0       	rjmp	.+30     	; 0x6024 <Robot_voidObstacleAvoidingMode+0x1764>
    6006:	88 ec       	ldi	r24, 0xC8	; 200
    6008:	90 e0       	ldi	r25, 0x00	; 0
    600a:	98 a3       	std	Y+32, r25	; 0x20
    600c:	8f 8f       	std	Y+31, r24	; 0x1f
    600e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6010:	98 a1       	ldd	r25, Y+32	; 0x20
    6012:	01 97       	sbiw	r24, 0x01	; 1
    6014:	f1 f7       	brne	.-4      	; 0x6012 <Robot_voidObstacleAvoidingMode+0x1752>
    6016:	98 a3       	std	Y+32, r25	; 0x20
    6018:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    601a:	89 a1       	ldd	r24, Y+33	; 0x21
    601c:	9a a1       	ldd	r25, Y+34	; 0x22
    601e:	01 97       	sbiw	r24, 0x01	; 1
    6020:	9a a3       	std	Y+34, r25	; 0x22
    6022:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6024:	89 a1       	ldd	r24, Y+33	; 0x21
    6026:	9a a1       	ldd	r25, Y+34	; 0x22
    6028:	00 97       	sbiw	r24, 0x00	; 0
    602a:	69 f7       	brne	.-38     	; 0x6006 <Robot_voidObstacleAvoidingMode+0x1746>
    602c:	14 c0       	rjmp	.+40     	; 0x6056 <Robot_voidObstacleAvoidingMode+0x1796>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    602e:	6b a1       	ldd	r22, Y+35	; 0x23
    6030:	7c a1       	ldd	r23, Y+36	; 0x24
    6032:	8d a1       	ldd	r24, Y+37	; 0x25
    6034:	9e a1       	ldd	r25, Y+38	; 0x26
    6036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    603a:	dc 01       	movw	r26, r24
    603c:	cb 01       	movw	r24, r22
    603e:	9a a3       	std	Y+34, r25	; 0x22
    6040:	89 a3       	std	Y+33, r24	; 0x21
    6042:	89 a1       	ldd	r24, Y+33	; 0x21
    6044:	9a a1       	ldd	r25, Y+34	; 0x22
    6046:	9e 8f       	std	Y+30, r25	; 0x1e
    6048:	8d 8f       	std	Y+29, r24	; 0x1d
    604a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    604c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    604e:	01 97       	sbiw	r24, 0x01	; 1
    6050:	f1 f7       	brne	.-4      	; 0x604e <Robot_voidObstacleAvoidingMode+0x178e>
    6052:	9e 8f       	std	Y+30, r25	; 0x1e
    6054:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(200);
			/* Comparison between to direction and set Orientation*/
			Robot_voidComparisonlogic(Local_u16LeftObject,Local_u16RightObject);
    6056:	fe 01       	movw	r30, r28
    6058:	e1 5f       	subi	r30, 0xF1	; 241
    605a:	fe 4f       	sbci	r31, 0xFE	; 254
    605c:	80 81       	ld	r24, Z
    605e:	91 81       	ldd	r25, Z+1	; 0x01
    6060:	fe 01       	movw	r30, r28
    6062:	e3 5f       	subi	r30, 0xF3	; 243
    6064:	fe 4f       	sbci	r31, 0xFE	; 254
    6066:	20 81       	ld	r18, Z
    6068:	31 81       	ldd	r19, Z+1	; 0x01
    606a:	b9 01       	movw	r22, r18
    606c:	0e 94 ae 1c 	call	0x395c	; 0x395c <Robot_voidComparisonlogic>
    6070:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <Robot_voidObstacleAvoidingMode+0x3e>
	    }
	    else
	    {
	    	/* if no object go forward */
		    Robot_voidForward();
    6074:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <Robot_voidForward>
		    BUZZER_voidBuzzer_Work(BUZZER_ON);
    6078:	81 e0       	ldi	r24, 0x01	; 1
    607a:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    607e:	80 e0       	ldi	r24, 0x00	; 0
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	aa e7       	ldi	r26, 0x7A	; 122
    6084:	b4 e4       	ldi	r27, 0x44	; 68
    6086:	89 8f       	std	Y+25, r24	; 0x19
    6088:	9a 8f       	std	Y+26, r25	; 0x1a
    608a:	ab 8f       	std	Y+27, r26	; 0x1b
    608c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    608e:	69 8d       	ldd	r22, Y+25	; 0x19
    6090:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6092:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6094:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6096:	20 e0       	ldi	r18, 0x00	; 0
    6098:	30 e0       	ldi	r19, 0x00	; 0
    609a:	4a ef       	ldi	r20, 0xFA	; 250
    609c:	54 e4       	ldi	r21, 0x44	; 68
    609e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60a2:	dc 01       	movw	r26, r24
    60a4:	cb 01       	movw	r24, r22
    60a6:	8d 8b       	std	Y+21, r24	; 0x15
    60a8:	9e 8b       	std	Y+22, r25	; 0x16
    60aa:	af 8b       	std	Y+23, r26	; 0x17
    60ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    60ae:	6d 89       	ldd	r22, Y+21	; 0x15
    60b0:	7e 89       	ldd	r23, Y+22	; 0x16
    60b2:	8f 89       	ldd	r24, Y+23	; 0x17
    60b4:	98 8d       	ldd	r25, Y+24	; 0x18
    60b6:	20 e0       	ldi	r18, 0x00	; 0
    60b8:	30 e0       	ldi	r19, 0x00	; 0
    60ba:	40 e8       	ldi	r20, 0x80	; 128
    60bc:	5f e3       	ldi	r21, 0x3F	; 63
    60be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    60c2:	88 23       	and	r24, r24
    60c4:	2c f4       	brge	.+10     	; 0x60d0 <Robot_voidObstacleAvoidingMode+0x1810>
		__ticks = 1;
    60c6:	81 e0       	ldi	r24, 0x01	; 1
    60c8:	90 e0       	ldi	r25, 0x00	; 0
    60ca:	9c 8b       	std	Y+20, r25	; 0x14
    60cc:	8b 8b       	std	Y+19, r24	; 0x13
    60ce:	3f c0       	rjmp	.+126    	; 0x614e <Robot_voidObstacleAvoidingMode+0x188e>
	else if (__tmp > 65535)
    60d0:	6d 89       	ldd	r22, Y+21	; 0x15
    60d2:	7e 89       	ldd	r23, Y+22	; 0x16
    60d4:	8f 89       	ldd	r24, Y+23	; 0x17
    60d6:	98 8d       	ldd	r25, Y+24	; 0x18
    60d8:	20 e0       	ldi	r18, 0x00	; 0
    60da:	3f ef       	ldi	r19, 0xFF	; 255
    60dc:	4f e7       	ldi	r20, 0x7F	; 127
    60de:	57 e4       	ldi	r21, 0x47	; 71
    60e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    60e4:	18 16       	cp	r1, r24
    60e6:	4c f5       	brge	.+82     	; 0x613a <Robot_voidObstacleAvoidingMode+0x187a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60e8:	69 8d       	ldd	r22, Y+25	; 0x19
    60ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    60ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    60ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    60f0:	20 e0       	ldi	r18, 0x00	; 0
    60f2:	30 e0       	ldi	r19, 0x00	; 0
    60f4:	40 e2       	ldi	r20, 0x20	; 32
    60f6:	51 e4       	ldi	r21, 0x41	; 65
    60f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60fc:	dc 01       	movw	r26, r24
    60fe:	cb 01       	movw	r24, r22
    6100:	bc 01       	movw	r22, r24
    6102:	cd 01       	movw	r24, r26
    6104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6108:	dc 01       	movw	r26, r24
    610a:	cb 01       	movw	r24, r22
    610c:	9c 8b       	std	Y+20, r25	; 0x14
    610e:	8b 8b       	std	Y+19, r24	; 0x13
    6110:	0f c0       	rjmp	.+30     	; 0x6130 <Robot_voidObstacleAvoidingMode+0x1870>
    6112:	88 ec       	ldi	r24, 0xC8	; 200
    6114:	90 e0       	ldi	r25, 0x00	; 0
    6116:	9a 8b       	std	Y+18, r25	; 0x12
    6118:	89 8b       	std	Y+17, r24	; 0x11
    611a:	89 89       	ldd	r24, Y+17	; 0x11
    611c:	9a 89       	ldd	r25, Y+18	; 0x12
    611e:	01 97       	sbiw	r24, 0x01	; 1
    6120:	f1 f7       	brne	.-4      	; 0x611e <Robot_voidObstacleAvoidingMode+0x185e>
    6122:	9a 8b       	std	Y+18, r25	; 0x12
    6124:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6126:	8b 89       	ldd	r24, Y+19	; 0x13
    6128:	9c 89       	ldd	r25, Y+20	; 0x14
    612a:	01 97       	sbiw	r24, 0x01	; 1
    612c:	9c 8b       	std	Y+20, r25	; 0x14
    612e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6130:	8b 89       	ldd	r24, Y+19	; 0x13
    6132:	9c 89       	ldd	r25, Y+20	; 0x14
    6134:	00 97       	sbiw	r24, 0x00	; 0
    6136:	69 f7       	brne	.-38     	; 0x6112 <Robot_voidObstacleAvoidingMode+0x1852>
    6138:	14 c0       	rjmp	.+40     	; 0x6162 <Robot_voidObstacleAvoidingMode+0x18a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    613a:	6d 89       	ldd	r22, Y+21	; 0x15
    613c:	7e 89       	ldd	r23, Y+22	; 0x16
    613e:	8f 89       	ldd	r24, Y+23	; 0x17
    6140:	98 8d       	ldd	r25, Y+24	; 0x18
    6142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6146:	dc 01       	movw	r26, r24
    6148:	cb 01       	movw	r24, r22
    614a:	9c 8b       	std	Y+20, r25	; 0x14
    614c:	8b 8b       	std	Y+19, r24	; 0x13
    614e:	8b 89       	ldd	r24, Y+19	; 0x13
    6150:	9c 89       	ldd	r25, Y+20	; 0x14
    6152:	98 8b       	std	Y+16, r25	; 0x10
    6154:	8f 87       	std	Y+15, r24	; 0x0f
    6156:	8f 85       	ldd	r24, Y+15	; 0x0f
    6158:	98 89       	ldd	r25, Y+16	; 0x10
    615a:	01 97       	sbiw	r24, 0x01	; 1
    615c:	f1 f7       	brne	.-4      	; 0x615a <Robot_voidObstacleAvoidingMode+0x189a>
    615e:	98 8b       	std	Y+16, r25	; 0x10
    6160:	8f 87       	std	Y+15, r24	; 0x0f
		    _delay_ms(1000);
		    BUZZER_voidBuzzer_Work(BUZZER_OFF);
    6162:	80 e0       	ldi	r24, 0x00	; 0
    6164:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <BUZZER_voidBuzzer_Work>
    6168:	80 e0       	ldi	r24, 0x00	; 0
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	aa e7       	ldi	r26, 0x7A	; 122
    616e:	b4 e4       	ldi	r27, 0x44	; 68
    6170:	8b 87       	std	Y+11, r24	; 0x0b
    6172:	9c 87       	std	Y+12, r25	; 0x0c
    6174:	ad 87       	std	Y+13, r26	; 0x0d
    6176:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6178:	6b 85       	ldd	r22, Y+11	; 0x0b
    617a:	7c 85       	ldd	r23, Y+12	; 0x0c
    617c:	8d 85       	ldd	r24, Y+13	; 0x0d
    617e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6180:	20 e0       	ldi	r18, 0x00	; 0
    6182:	30 e0       	ldi	r19, 0x00	; 0
    6184:	4a ef       	ldi	r20, 0xFA	; 250
    6186:	54 e4       	ldi	r21, 0x44	; 68
    6188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    618c:	dc 01       	movw	r26, r24
    618e:	cb 01       	movw	r24, r22
    6190:	8f 83       	std	Y+7, r24	; 0x07
    6192:	98 87       	std	Y+8, r25	; 0x08
    6194:	a9 87       	std	Y+9, r26	; 0x09
    6196:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6198:	6f 81       	ldd	r22, Y+7	; 0x07
    619a:	78 85       	ldd	r23, Y+8	; 0x08
    619c:	89 85       	ldd	r24, Y+9	; 0x09
    619e:	9a 85       	ldd	r25, Y+10	; 0x0a
    61a0:	20 e0       	ldi	r18, 0x00	; 0
    61a2:	30 e0       	ldi	r19, 0x00	; 0
    61a4:	40 e8       	ldi	r20, 0x80	; 128
    61a6:	5f e3       	ldi	r21, 0x3F	; 63
    61a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    61ac:	88 23       	and	r24, r24
    61ae:	2c f4       	brge	.+10     	; 0x61ba <Robot_voidObstacleAvoidingMode+0x18fa>
		__ticks = 1;
    61b0:	81 e0       	ldi	r24, 0x01	; 1
    61b2:	90 e0       	ldi	r25, 0x00	; 0
    61b4:	9e 83       	std	Y+6, r25	; 0x06
    61b6:	8d 83       	std	Y+5, r24	; 0x05
    61b8:	40 c0       	rjmp	.+128    	; 0x623a <Robot_voidObstacleAvoidingMode+0x197a>
	else if (__tmp > 65535)
    61ba:	6f 81       	ldd	r22, Y+7	; 0x07
    61bc:	78 85       	ldd	r23, Y+8	; 0x08
    61be:	89 85       	ldd	r24, Y+9	; 0x09
    61c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    61c2:	20 e0       	ldi	r18, 0x00	; 0
    61c4:	3f ef       	ldi	r19, 0xFF	; 255
    61c6:	4f e7       	ldi	r20, 0x7F	; 127
    61c8:	57 e4       	ldi	r21, 0x47	; 71
    61ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    61ce:	18 16       	cp	r1, r24
    61d0:	54 f5       	brge	.+84     	; 0x6226 <Robot_voidObstacleAvoidingMode+0x1966>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    61d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    61d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    61d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    61da:	20 e0       	ldi	r18, 0x00	; 0
    61dc:	30 e0       	ldi	r19, 0x00	; 0
    61de:	40 e2       	ldi	r20, 0x20	; 32
    61e0:	51 e4       	ldi	r21, 0x41	; 65
    61e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61e6:	dc 01       	movw	r26, r24
    61e8:	cb 01       	movw	r24, r22
    61ea:	bc 01       	movw	r22, r24
    61ec:	cd 01       	movw	r24, r26
    61ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61f2:	dc 01       	movw	r26, r24
    61f4:	cb 01       	movw	r24, r22
    61f6:	9e 83       	std	Y+6, r25	; 0x06
    61f8:	8d 83       	std	Y+5, r24	; 0x05
    61fa:	0f c0       	rjmp	.+30     	; 0x621a <Robot_voidObstacleAvoidingMode+0x195a>
    61fc:	88 ec       	ldi	r24, 0xC8	; 200
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	9c 83       	std	Y+4, r25	; 0x04
    6202:	8b 83       	std	Y+3, r24	; 0x03
    6204:	8b 81       	ldd	r24, Y+3	; 0x03
    6206:	9c 81       	ldd	r25, Y+4	; 0x04
    6208:	01 97       	sbiw	r24, 0x01	; 1
    620a:	f1 f7       	brne	.-4      	; 0x6208 <Robot_voidObstacleAvoidingMode+0x1948>
    620c:	9c 83       	std	Y+4, r25	; 0x04
    620e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6210:	8d 81       	ldd	r24, Y+5	; 0x05
    6212:	9e 81       	ldd	r25, Y+6	; 0x06
    6214:	01 97       	sbiw	r24, 0x01	; 1
    6216:	9e 83       	std	Y+6, r25	; 0x06
    6218:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    621a:	8d 81       	ldd	r24, Y+5	; 0x05
    621c:	9e 81       	ldd	r25, Y+6	; 0x06
    621e:	00 97       	sbiw	r24, 0x00	; 0
    6220:	69 f7       	brne	.-38     	; 0x61fc <Robot_voidObstacleAvoidingMode+0x193c>
    6222:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <Robot_voidObstacleAvoidingMode+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6226:	6f 81       	ldd	r22, Y+7	; 0x07
    6228:	78 85       	ldd	r23, Y+8	; 0x08
    622a:	89 85       	ldd	r24, Y+9	; 0x09
    622c:	9a 85       	ldd	r25, Y+10	; 0x0a
    622e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6232:	dc 01       	movw	r26, r24
    6234:	cb 01       	movw	r24, r22
    6236:	9e 83       	std	Y+6, r25	; 0x06
    6238:	8d 83       	std	Y+5, r24	; 0x05
    623a:	8d 81       	ldd	r24, Y+5	; 0x05
    623c:	9e 81       	ldd	r25, Y+6	; 0x06
    623e:	9a 83       	std	Y+2, r25	; 0x02
    6240:	89 83       	std	Y+1, r24	; 0x01
    6242:	89 81       	ldd	r24, Y+1	; 0x01
    6244:	9a 81       	ldd	r25, Y+2	; 0x02
    6246:	01 97       	sbiw	r24, 0x01	; 1
    6248:	f1 f7       	brne	.-4      	; 0x6246 <Robot_voidObstacleAvoidingMode+0x1986>
    624a:	9a 83       	std	Y+2, r25	; 0x02
    624c:	89 83       	std	Y+1, r24	; 0x01
    624e:	0c 94 7f 24 	jmp	0x48fe	; 0x48fe <Robot_voidObstacleAvoidingMode+0x3e>

00006252 <Robot_voidInit>:
	    }
	}
}
/*********************************************************** Initialization ****************************************************************/
void Robot_voidInit(void)
{
    6252:	df 93       	push	r29
    6254:	cf 93       	push	r28
    6256:	cd b7       	in	r28, 0x3d	; 61
    6258:	de b7       	in	r29, 0x3e	; 62
	/************************** Init UART *************************************/
	UART_voidInit();
    625a:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_voidInit>
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN0,DIO_u8_PIN_INPUT);
    625e:	83 e0       	ldi	r24, 0x03	; 3
    6260:	60 e0       	ldi	r22, 0x00	; 0
    6262:	40 e0       	ldi	r20, 0x00	; 0
    6264:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN1,DIO_u8_PIN_OUTPUT);
    6268:	83 e0       	ldi	r24, 0x03	; 3
    626a:	61 e0       	ldi	r22, 0x01	; 1
    626c:	41 e0       	ldi	r20, 0x01	; 1
    626e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	/************************** Init Timer ************************************/
	TIMER_voidTimer0Init();
    6272:	0e 94 71 08 	call	0x10e2	; 0x10e2 <TIMER_voidTimer0Init>
	DIO_voidSetPinDirection(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_PIN_OUTPUT);
    6276:	81 e0       	ldi	r24, 0x01	; 1
    6278:	63 e0       	ldi	r22, 0x03	; 3
    627a:	41 e0       	ldi	r20, 0x01	; 1
    627c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	TIMER_voidTimer2Init();
    6280:	0e 94 b3 09 	call	0x1366	; 0x1366 <TIMER_voidTimer2Init>
	DIO_voidSetPinDirection(DIO_u8_PORTD,DIO_u8_PIN7,DIO_u8_PIN_OUTPUT);
    6284:	83 e0       	ldi	r24, 0x03	; 3
    6286:	67 e0       	ldi	r22, 0x07	; 7
    6288:	41 e0       	ldi	r20, 0x01	; 1
    628a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	/**************************** Init Servo **********************************/
	SERVO_voidTimer1InitOCR1B();
    628e:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <SERVO_voidTimer1InitOCR1B>
	SERVO_voidTimer1ServoSetAngleOCR1B(90);
    6292:	6a e5       	ldi	r22, 0x5A	; 90
    6294:	70 e0       	ldi	r23, 0x00	; 0
    6296:	80 e0       	ldi	r24, 0x00	; 0
    6298:	90 e0       	ldi	r25, 0x00	; 0
    629a:	0e 94 6f 16 	call	0x2cde	; 0x2cde <SERVO_voidTimer1ServoSetAngleOCR1B>
	/**************************** Init ULTRASONIC *****************************/
	ULTRASONIC_voidInit();
    629e:	0e 94 b7 14 	call	0x296e	; 0x296e <ULTRASONIC_voidInit>
	/***************************** INIT SPEAD ****************************/
	Robot_voidSpeed(Robot_u8_INIT_SPEED);
    62a2:	8c e3       	ldi	r24, 0x3C	; 60
    62a4:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <Robot_voidSpeed>
	/************************************** MOTOR DRIVER L298******************************************************/
	DIO_voidSetPinDirection(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN1,DIO_u8_PIN_OUTPUT);
    62a8:	80 e0       	ldi	r24, 0x00	; 0
    62aa:	60 e0       	ldi	r22, 0x00	; 0
    62ac:	41 e0       	ldi	r20, 0x01	; 1
    62ae:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN2,DIO_u8_PIN_OUTPUT);
    62b2:	80 e0       	ldi	r24, 0x00	; 0
    62b4:	61 e0       	ldi	r22, 0x01	; 1
    62b6:	41 e0       	ldi	r20, 0x01	; 1
    62b8:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN3,DIO_u8_PIN_OUTPUT);
    62bc:	80 e0       	ldi	r24, 0x00	; 0
    62be:	62 e0       	ldi	r22, 0x02	; 2
    62c0:	41 e0       	ldi	r20, 0x01	; 1
    62c2:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(Robot_u8_MOTOR_DRIVER_L298_PORT,Robot_u8_MOTOR_DRIVER_L298_IN4,DIO_u8_PIN_OUTPUT);
    62c6:	80 e0       	ldi	r24, 0x00	; 0
    62c8:	63 e0       	ldi	r22, 0x03	; 3
    62ca:	41 e0       	ldi	r20, 0x01	; 1
    62cc:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
	/***************************** INIT BUZZER ****************************/
	DIO_voidSetPinDirection(DIO_u8_PORTA , DIO_u8_PIN5 , DIO_u8_PIN_OUTPUT);
    62d0:	80 e0       	ldi	r24, 0x00	; 0
    62d2:	65 e0       	ldi	r22, 0x05	; 5
    62d4:	41 e0       	ldi	r20, 0x01	; 1
    62d6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <DIO_voidSetPinDirection>
}
    62da:	cf 91       	pop	r28
    62dc:	df 91       	pop	r29
    62de:	08 95       	ret

000062e0 <main>:
int main(void)
{
    62e0:	df 93       	push	r29
    62e2:	cf 93       	push	r28
    62e4:	cd b7       	in	r28, 0x3d	; 61
    62e6:	de b7       	in	r29, 0x3e	; 62
	/* Initialization Robot */
	Robot_voidInit();
    62e8:	0e 94 29 31 	call	0x6252	; 0x6252 <Robot_voidInit>
    while(1)
    {
    	Robot_voidObstacleAvoidingMode();
    62ec:	0e 94 60 24 	call	0x48c0	; 0x48c0 <Robot_voidObstacleAvoidingMode>
    62f0:	fd cf       	rjmp	.-6      	; 0x62ec <main+0xc>

000062f2 <__mulsi3>:
    62f2:	62 9f       	mul	r22, r18
    62f4:	d0 01       	movw	r26, r0
    62f6:	73 9f       	mul	r23, r19
    62f8:	f0 01       	movw	r30, r0
    62fa:	82 9f       	mul	r24, r18
    62fc:	e0 0d       	add	r30, r0
    62fe:	f1 1d       	adc	r31, r1
    6300:	64 9f       	mul	r22, r20
    6302:	e0 0d       	add	r30, r0
    6304:	f1 1d       	adc	r31, r1
    6306:	92 9f       	mul	r25, r18
    6308:	f0 0d       	add	r31, r0
    630a:	83 9f       	mul	r24, r19
    630c:	f0 0d       	add	r31, r0
    630e:	74 9f       	mul	r23, r20
    6310:	f0 0d       	add	r31, r0
    6312:	65 9f       	mul	r22, r21
    6314:	f0 0d       	add	r31, r0
    6316:	99 27       	eor	r25, r25
    6318:	72 9f       	mul	r23, r18
    631a:	b0 0d       	add	r27, r0
    631c:	e1 1d       	adc	r30, r1
    631e:	f9 1f       	adc	r31, r25
    6320:	63 9f       	mul	r22, r19
    6322:	b0 0d       	add	r27, r0
    6324:	e1 1d       	adc	r30, r1
    6326:	f9 1f       	adc	r31, r25
    6328:	bd 01       	movw	r22, r26
    632a:	cf 01       	movw	r24, r30
    632c:	11 24       	eor	r1, r1
    632e:	08 95       	ret

00006330 <__udivmodhi4>:
    6330:	aa 1b       	sub	r26, r26
    6332:	bb 1b       	sub	r27, r27
    6334:	51 e1       	ldi	r21, 0x11	; 17
    6336:	07 c0       	rjmp	.+14     	; 0x6346 <__udivmodhi4_ep>

00006338 <__udivmodhi4_loop>:
    6338:	aa 1f       	adc	r26, r26
    633a:	bb 1f       	adc	r27, r27
    633c:	a6 17       	cp	r26, r22
    633e:	b7 07       	cpc	r27, r23
    6340:	10 f0       	brcs	.+4      	; 0x6346 <__udivmodhi4_ep>
    6342:	a6 1b       	sub	r26, r22
    6344:	b7 0b       	sbc	r27, r23

00006346 <__udivmodhi4_ep>:
    6346:	88 1f       	adc	r24, r24
    6348:	99 1f       	adc	r25, r25
    634a:	5a 95       	dec	r21
    634c:	a9 f7       	brne	.-22     	; 0x6338 <__udivmodhi4_loop>
    634e:	80 95       	com	r24
    6350:	90 95       	com	r25
    6352:	bc 01       	movw	r22, r24
    6354:	cd 01       	movw	r24, r26
    6356:	08 95       	ret

00006358 <__divmodhi4>:
    6358:	97 fb       	bst	r25, 7
    635a:	09 2e       	mov	r0, r25
    635c:	07 26       	eor	r0, r23
    635e:	0a d0       	rcall	.+20     	; 0x6374 <__divmodhi4_neg1>
    6360:	77 fd       	sbrc	r23, 7
    6362:	04 d0       	rcall	.+8      	; 0x636c <__divmodhi4_neg2>
    6364:	e5 df       	rcall	.-54     	; 0x6330 <__udivmodhi4>
    6366:	06 d0       	rcall	.+12     	; 0x6374 <__divmodhi4_neg1>
    6368:	00 20       	and	r0, r0
    636a:	1a f4       	brpl	.+6      	; 0x6372 <__divmodhi4_exit>

0000636c <__divmodhi4_neg2>:
    636c:	70 95       	com	r23
    636e:	61 95       	neg	r22
    6370:	7f 4f       	sbci	r23, 0xFF	; 255

00006372 <__divmodhi4_exit>:
    6372:	08 95       	ret

00006374 <__divmodhi4_neg1>:
    6374:	f6 f7       	brtc	.-4      	; 0x6372 <__divmodhi4_exit>
    6376:	90 95       	com	r25
    6378:	81 95       	neg	r24
    637a:	9f 4f       	sbci	r25, 0xFF	; 255
    637c:	08 95       	ret

0000637e <__udivmodsi4>:
    637e:	a1 e2       	ldi	r26, 0x21	; 33
    6380:	1a 2e       	mov	r1, r26
    6382:	aa 1b       	sub	r26, r26
    6384:	bb 1b       	sub	r27, r27
    6386:	fd 01       	movw	r30, r26
    6388:	0d c0       	rjmp	.+26     	; 0x63a4 <__udivmodsi4_ep>

0000638a <__udivmodsi4_loop>:
    638a:	aa 1f       	adc	r26, r26
    638c:	bb 1f       	adc	r27, r27
    638e:	ee 1f       	adc	r30, r30
    6390:	ff 1f       	adc	r31, r31
    6392:	a2 17       	cp	r26, r18
    6394:	b3 07       	cpc	r27, r19
    6396:	e4 07       	cpc	r30, r20
    6398:	f5 07       	cpc	r31, r21
    639a:	20 f0       	brcs	.+8      	; 0x63a4 <__udivmodsi4_ep>
    639c:	a2 1b       	sub	r26, r18
    639e:	b3 0b       	sbc	r27, r19
    63a0:	e4 0b       	sbc	r30, r20
    63a2:	f5 0b       	sbc	r31, r21

000063a4 <__udivmodsi4_ep>:
    63a4:	66 1f       	adc	r22, r22
    63a6:	77 1f       	adc	r23, r23
    63a8:	88 1f       	adc	r24, r24
    63aa:	99 1f       	adc	r25, r25
    63ac:	1a 94       	dec	r1
    63ae:	69 f7       	brne	.-38     	; 0x638a <__udivmodsi4_loop>
    63b0:	60 95       	com	r22
    63b2:	70 95       	com	r23
    63b4:	80 95       	com	r24
    63b6:	90 95       	com	r25
    63b8:	9b 01       	movw	r18, r22
    63ba:	ac 01       	movw	r20, r24
    63bc:	bd 01       	movw	r22, r26
    63be:	cf 01       	movw	r24, r30
    63c0:	08 95       	ret

000063c2 <__prologue_saves__>:
    63c2:	2f 92       	push	r2
    63c4:	3f 92       	push	r3
    63c6:	4f 92       	push	r4
    63c8:	5f 92       	push	r5
    63ca:	6f 92       	push	r6
    63cc:	7f 92       	push	r7
    63ce:	8f 92       	push	r8
    63d0:	9f 92       	push	r9
    63d2:	af 92       	push	r10
    63d4:	bf 92       	push	r11
    63d6:	cf 92       	push	r12
    63d8:	df 92       	push	r13
    63da:	ef 92       	push	r14
    63dc:	ff 92       	push	r15
    63de:	0f 93       	push	r16
    63e0:	1f 93       	push	r17
    63e2:	cf 93       	push	r28
    63e4:	df 93       	push	r29
    63e6:	cd b7       	in	r28, 0x3d	; 61
    63e8:	de b7       	in	r29, 0x3e	; 62
    63ea:	ca 1b       	sub	r28, r26
    63ec:	db 0b       	sbc	r29, r27
    63ee:	0f b6       	in	r0, 0x3f	; 63
    63f0:	f8 94       	cli
    63f2:	de bf       	out	0x3e, r29	; 62
    63f4:	0f be       	out	0x3f, r0	; 63
    63f6:	cd bf       	out	0x3d, r28	; 61
    63f8:	09 94       	ijmp

000063fa <__epilogue_restores__>:
    63fa:	2a 88       	ldd	r2, Y+18	; 0x12
    63fc:	39 88       	ldd	r3, Y+17	; 0x11
    63fe:	48 88       	ldd	r4, Y+16	; 0x10
    6400:	5f 84       	ldd	r5, Y+15	; 0x0f
    6402:	6e 84       	ldd	r6, Y+14	; 0x0e
    6404:	7d 84       	ldd	r7, Y+13	; 0x0d
    6406:	8c 84       	ldd	r8, Y+12	; 0x0c
    6408:	9b 84       	ldd	r9, Y+11	; 0x0b
    640a:	aa 84       	ldd	r10, Y+10	; 0x0a
    640c:	b9 84       	ldd	r11, Y+9	; 0x09
    640e:	c8 84       	ldd	r12, Y+8	; 0x08
    6410:	df 80       	ldd	r13, Y+7	; 0x07
    6412:	ee 80       	ldd	r14, Y+6	; 0x06
    6414:	fd 80       	ldd	r15, Y+5	; 0x05
    6416:	0c 81       	ldd	r16, Y+4	; 0x04
    6418:	1b 81       	ldd	r17, Y+3	; 0x03
    641a:	aa 81       	ldd	r26, Y+2	; 0x02
    641c:	b9 81       	ldd	r27, Y+1	; 0x01
    641e:	ce 0f       	add	r28, r30
    6420:	d1 1d       	adc	r29, r1
    6422:	0f b6       	in	r0, 0x3f	; 63
    6424:	f8 94       	cli
    6426:	de bf       	out	0x3e, r29	; 62
    6428:	0f be       	out	0x3f, r0	; 63
    642a:	cd bf       	out	0x3d, r28	; 61
    642c:	ed 01       	movw	r28, r26
    642e:	08 95       	ret

00006430 <_exit>:
    6430:	f8 94       	cli

00006432 <__stop_program>:
    6432:	ff cf       	rjmp	.-2      	; 0x6432 <__stop_program>
